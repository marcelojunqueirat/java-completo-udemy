
/* 
 * Versï¿½o: 5.5.0-5
 * 
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

org_apache_myfaces_DateFormatSymbols = function()
{
 this.eras = new Array('BC', 'AD');
 this.months = new Array('January', 'February', 'March', 'April',
 'May', 'June', 'July', 'August', 'September', 'October',
 'November', 'December', 'Undecimber');
 this.shortMonths = new Array('Jan', 'Feb', 'Mar', 'Apr',
 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
 'Nov', 'Dec', 'Und');
 this.weekdays = new Array('Sunday', 'Monday', 'Tuesday',
 'Wednesday', 'Thursday', 'Friday', 'Saturday');
 this.shortWeekdays = new Array('Sun', 'Mon', 'Tue',
 'Wed', 'Thu', 'Fri', 'Sat');
 this.ampms = new Array('AM', 'PM');
 this.zoneStrings = new Array(new Array(0, 'long-name', 'short-name'));
 var threshold = new Date();
 threshold.setYear(threshold.getYear()-80);
 this.twoDigitYearStart = threshold;
}

org_apache_myfaces_SimpleDateFormatParserContext = function()
{
 this.newIndex=0;
 this.retValue=0;
 this.year=0;
 this.ambigousYear=false;
 this.month=0;
 this.day=0;
 this.dayOfWeek=0;
 this.hour=0;
 this.min=0;
 this.sec=0;
 this.ampm=0;
 this.dateStr="";
}

org_apache_myfaces_SimpleDateFormat = function(pattern, dateFormatSymbols)
{
 this.pattern = pattern;
 this.dateFormatSymbols = dateFormatSymbols ? dateFormatSymbols :
 new org_apache_myfaces_DateFormatSymbols();
}
org_apache_myfaces_SimpleDateFormat.prototype._handle = function(dateStr, date, parse)
 {
 var patternIndex = 0;
 var dateIndex = 0;
 var commentMode = false;
 var lastChar = 0;
 var currentChar=0;
 var nextChar=0;
 var patternSub = null;

 var context = new org_apache_myfaces_SimpleDateFormatParserContext();

 if(date != null)
 {
 context.year = this._fullYearFromDate(date.getYear());
 context.month = date.getMonth();
 context.day = date.getDate();
 context.dayOfWeek = date.getDay();
 context.hour = date.getHours();
 context.min = date.getMinutes();
 context.sec = date.getSeconds();
 }

 while (patternIndex < this.pattern.length)
 {
 currentChar = this.pattern.charAt(patternIndex);

 if(patternIndex<(this.pattern.length-1))
 {
 nextChar = this.pattern.charAt(patternIndex+1);
 }
 else
 {
 nextChar = 0;
 }


 if (currentChar == '\'' && lastChar!='\\')
 {
 commentMode = !commentMode;
 patternIndex++;
 }
 else
 {
 if(!commentMode)
 {
 if (currentChar == '\\' && lastChar!='\\')
 {
 patternIndex++;
 }
 else
 {
 if(patternSub == null)
 patternSub = "";

 patternSub+=currentChar;

 if(currentChar != nextChar)
 {
 this._handlePatternSub(context, patternSub,
 dateStr, dateIndex, parse);

 patternSub = null;

 if(context.newIndex<0)
 break;

 dateIndex = context.newIndex;
 }

 patternIndex++;
 }
 }
 else
 {
 if(parse)
 {
 if(this.pattern.charAt(patternIndex)!=dateStr.charAt(dateIndex))
 {
 //invalid character in dateString
 return null;
 }
 }
 else
 {
 context.dateStr+=this.pattern.charAt(patternIndex);
 }

 patternIndex++;
 dateIndex++;
 }
 }

 lastChar = currentChar;
 }

 this._handlePatternSub(context, patternSub,
 dateStr, dateIndex, parse);

 return context;
 };

org_apache_myfaces_SimpleDateFormat.prototype.parse = function(dateStr)
 {
 if(!dateStr || dateStr.length==0)
 return null;

 var context = this._handle(dateStr, null, true);

 if(context.retValue==-1)
 return null;

 this._adjustTwoDigitYear(context);

 return this._createDateFromContext(context);
 };
org_apache_myfaces_SimpleDateFormat.prototype._createDateFromContext=function(context)
 {
 return new Date(context.year, context.month,
 context.day,context.hour,context.min,context.sec);
 };
org_apache_myfaces_SimpleDateFormat.prototype.format = function(date)
 {
 var context = this._handle(null, date, false);

 return context.dateStr;
 };

org_apache_myfaces_SimpleDateFormat.prototype._parseString = function(context, dateStr, dateIndex, strings)
 {
 var fragment = dateStr.substr(dateIndex);
 var index = this._prefixOf(strings, fragment);
 if (index != -1) {
 context.retValue = index;
 context.newIndex = dateIndex + strings[index].length;
 return context;
 }

 context.retValue=-1;
 context.newIndex=-1;
 return context;
 };

org_apache_myfaces_SimpleDateFormat.prototype._parseNum = function(context, dateStr, posCount, dateIndex)
 {
 for(var i=Math.min(posCount,dateStr.length-dateIndex);i>0;i--)
 {
 var numStr = dateStr.substring(dateIndex,dateIndex+i);

 context.retValue = this._parseInt(numStr);

 if(context.retValue == -1)
 continue;

 context.newIndex = dateIndex+i;
 return context;
 }

 context.retValue = -1;
 context.newIndex = -1;
 return context;
 };

org_apache_myfaces_SimpleDateFormat.prototype._handlePatternSub = function(context, patternSub, dateStr, dateIndex, parse)
 {
 if(patternSub==null || patternSub.length==0)
 return;

 if(patternSub.charAt(0)=='y')
 {
 if(parse)
 {
 /* XXX @Arvid: whatever we do, we need to try to parse
 the full year format - length means nothing for
 parsing, only for formatting, so says SimpleDateFormat javadoc.
 only if we run into problems as there are no separator chars, we
 should use exact length parsing - how are we going to handle this?

 Additionally, the threshold was not quite correct - it needs to
 be set to current date - 80years...

 this is done after parsing now!

 if (patternSub.length <= 3) {
 this._parseNum(context, dateStr,2,dateIndex);
 context.year = (context.retValue < 26)
 ? 2000 + context.retValue : 1900 + context.retValue;
 } else {
 this._parseNum(context, dateStr,4,dateIndex);
 context.year = context.retValue;
 }*/
 this._parseNum(context, dateStr,4,dateIndex);

 if((context.newIndex-dateIndex)<4)
 {
 context.year = context.retValue+1900;
 context.ambigousYear = true;
 }
 else
 {
 context.year = context.retValue;

 }
 }
 else
 {
 this._formatNum(context,context.year,patternSub.length <= 3 ? 2 : 4,true);
 }
 }
 else if(patternSub.charAt(0)=='M')
 {
 if(parse)
 {
 if (patternSub.length == 3) {
 var fragment = dateStr.substr(dateIndex, 3);
 var index = this._indexOf(this.dateFormatSymbols.shortMonths, fragment);
 if (index != -1) {
 context.month = index;
 context.newIndex = dateIndex + 3;
 }
 } else if (patternSub.length >= 4) {
 var fragment = dateStr.substr(dateIndex);
 var index = this._prefixOf(this.dateFormatSymbols.months, fragment);
 if (index != -1) {
 context.month = index;
 context.newIndex = dateIndex + this.dateFormatSymbols.months[index].length;
 }
 } else {
 this._parseNum(context, dateStr,2,dateIndex);
 context.month = context.retValue-1;
 }
 }
 else
 {
 if (patternSub.length == 3) {
 context.dateStr += this.dateFormatSymbols.shortMonths[context.month];
 } else if (patternSub.length >= 4) {
 context.dateStr += this.dateFormatSymbols.months[context.month];
 } else {
 this._formatNum(context,context.month+1,patternSub.length);
 }
 }
 }
 else if(patternSub.charAt(0)=='d')
 {
 if(parse)
 {
 this._parseNum(context, dateStr,2,dateIndex);
 context.day = context.retValue;
 }
 else
 {
 this._formatNum(context,context.day,patternSub.length);
 }
 }
 else if(patternSub.charAt(0)=='E')
 {
 if(parse)
 {
 // XXX dayOfWeek is not used to generate date at the moment
 if (patternSub.length <= 3) {
 var fragment = dateStr.substr(dateIndex, 3);
 var index = this._indexOf(this.dateFormatSymbols.shortWeekdays, fragment);
 if (index != -1) {
 context.dayOfWeek = index;
 context.newIndex = dateIndex + 3;
 }
 } else {
 var fragment = dateStr.substr(dateIndex);
 var index = this._prefixOf(this.dateFormatSymbols.weekdays, fragment);
 if (index != -1) {
 context.dayOfWeek = index;
 context.newIndex = dateIndex + this.dateFormatSymbols.weekdays[index].length;
 }
 }
 }
 else
 {
 if (patternSub.length <= 3) {
 context.dateStr += this.dateFormatSymbols.shortWeekdays[context.dayOfWeek];
 } else {
 context.dateStr += this.dateFormatSymbols.weekdays[context.dayOfWeek];
 }
 }
 }
 else if(patternSub.charAt(0)=='H' ||
 patternSub.charAt(0)=='h')
 {
 if(parse)
 {
 this._parseNum(context, dateStr,2,dateIndex);
 context.hour = context.retValue;
 }
 else
 {
 this._formatNum(context,context.hour,patternSub.length);
 }
 }
 else if(patternSub.charAt(0)=='m')
 {
 if(parse)
 {
 this._parseNum(context, dateStr,2,dateIndex);
 context.min = context.retValue;
 }
 else
 {
 this._formatNum(context,context.min,patternSub.length);
 }
 }
 else if(patternSub.charAt(0)=='s')
 {
 if(parse)
 {
 this._parseNum(context, dateStr,2,dateIndex);
 context.sec = context.retValue;
 }
 else
 {
 this._formatNum(context,context.sec,patternSub.length);
 }
 }
 else if(patternSub.charAt(0)=='a')
 {
 if(parse)
 {
 this._parseString(context, dateStr,dateIndex,this.dateFormatSymbols.ampms);
 context.ampm = context.retValue;
 }
 else
 {
 context.dateStr += this.dateFormatSymbols.ampms[context.ampm];
 }
 }
 else
 {
 if(parse)
 {
 context.newIndex=dateIndex+patternSub.length;
 }
 else
 {
 context.dateStr+=patternSub;
 }

 }
 };

org_apache_myfaces_SimpleDateFormat.prototype._formatNum = function (context, num, length, ensureLength)
 {
 var str = num+"";

 while(str.length<length)
 str="0"+str;

 // XXX do we have to distinguish left and right 'cutting'
 //ensureLength - enable cutting only for parameters like the year, the other
 if (ensureLength && str.length > length) {
 str = str.substr(str.length - length);
 }

 context.dateStr+=str;
 };

 // perhaps add to Array.prototype
org_apache_myfaces_SimpleDateFormat.prototype._indexOf = function (array, value)
 {
 for (var i = 0; i < array.length; ++i) {
 if (array[i] == value) {
 return i;
 }
 }
 return -1;
 };

org_apache_myfaces_SimpleDateFormat.prototype._prefixOf = function (array, value)
 {
 for (var i = 0; i < array.length; ++i) {
 if (value.indexOf(array[i]) == 0) {
 return i;
 }
 }
 return -1;
 };

org_apache_myfaces_SimpleDateFormat.prototype._parseInt = function(value)
 {
 var sum = 0;

 for(var i=0;i<value.length;i++)
 {
 var c = value.charAt(i);

 if(c<'0'||c>'9')
 {
 return -1;
 }
 sum = sum*10+(c-'0');
 }

 return sum;
 };
org_apache_myfaces_SimpleDateFormat.prototype._fullYearFromDate = function(year)
 {

 var yearStr = year+"";

 if (yearStr.length < 4)
 {
 return year+1900;
 }

 return year;
 };
org_apache_myfaces_SimpleDateFormat.prototype._adjustTwoDigitYear = function(context)
 {

 if(context.ambigousYear)
 {
 var date = this._createDateFromContext(context);
 var threshold = this.dateFormatSymbols.twoDigitYearStart;

 if(date.getTime()<threshold.getTime())
 context.year += 100;
 }
 };
 function isChrome() {
	return /chrome/.test(navigator.userAgent.toLowerCase());
}

/**
 * Ativa a validaï¿½ï¿½o de alteraï¿½ï¿½es
 */
function setDirtyFlag() {
	top.needToConfirm = true;
}

/**
 * Desativa a validaï¿½ï¿½o de alteraï¿½ï¿½es
 */
function releaseDirtyFlag() {
	top.needToConfirm = false;
}

/**
 * Adiciona o mï¿½todo de validaï¿½ï¿½o aos elementos inputs passados por parï¿½metro
 * @param {Object} $elementos
 */
function bindValidationInputs(inputs) {
	inputs.bind('change.namespace', function(){
		setDirtyFlag();
		unbindValidationInputs(inputs);
	});
}

/**
 * Adiciona o mï¿½todo de validaï¿½ï¿½o aos elementos buttons passados por parï¿½metro
 * @param {Object} $elementos
 */
function bindValidationButtons(buttons) {
	buttons.bind('click.namespace', function(){
		setDirtyFlag();
		unbindValidationButtons(buttons);
	});
}

/**
 * Desconsidera o botï¿½o salvar
 * @param {Object} $elementos
 */
function unbindSave(elementos) {
	elementos.click( function(){
		releaseDirtyFlag();
	});
}

/**
 * retira o mï¿½todo de validaï¿½ï¿½o aos elementos inputs passados por parï¿½metro
 * @param {Object} $elementos
 */
function unbindValidationInputs(inputs) {
	inputs.unbind('change.namespace');
}

/**
 * retira o mï¿½todo de validaï¿½ï¿½o aos elementos buttons passados por parï¿½metro
 * @param {Object} $elementos
 */
function unbindValidationButtons(buttons) {
	buttons.unbind('click.namespace');
}

/**
 * Adiciona no evento onClick do botï¿½o limpar que estï¿½ dentro do 
 * formulï¿½rio a ser validado a reativaï¿½ï¿½o da validaï¿½ï¿½o
 */
function bindButtonLimpar() {
	getButtonLimpar().bind('click', function() {
		startValidation();
	});
}

/**
 * Retorna botï¿½es limpar que estï¿½o dentro do formulï¿½rio a ser validado
 * @return {TypeName} 
 */
function getButtonLimpar() {
	return jQuery('form[validation] :button[value="Limpar"]');
}

/**
 * Retorna os botï¿½es salvar
 */
function getBtnSave() {
	return jQuery('form[validation] :input[value="Salvar"]');
}

/**
 * Controle para chrome, pois o mesmo ignora o evento beforeunload dentro de iframe
 * @return {TypeName} 
 */
function bindLinksMenu(elements) {
	elements.each(function() {
		if (this.onclick != undefined) {
			var originalOnclick = this.onclick;
			jQuery(this).removeAttr('onClick');
			jQuery(this).bind('click.namespace', function() {
				if (top.needToConfirm) {
					if (confirmExitChrome()) {
						elements.unbind('click.namespace');
						originalOnclick.call();
					}
					
					return false;
				}
				
				originalOnclick.call();
	         });
		} else {
			jQuery(this).bind('click.namespace', function() {
				if (top.needToConfirm) {
					if (confirmExitChrome()) {
						elements.unbind('click.namespace');
						return true;
					}
					return false;
				}
			
				elements.unbind('click.namespace');
				return true;
			});
		}
	});
}

/**
 * Busca os links do menu e do iframe superior
 * @return {TypeName} 
 */
function getElementsValidationChrome() {
	var elements;
	if (top.menu != null && top.superior != null) {
		elements = jQuery.merge(jQuery('a:[target="page"]', top.menu.document), jQuery('a[class="bt-sair"]', top.superior.document));
		elements = jQuery.merge(elements, jQuery('a', document));;
		return jQuery.merge(elements, jQuery('a', top.document));
	} else {
		return jQuery('a', top.document);
	}
}

/**
 * Retorna os elementos inputs passï¿½veis a manipulaï¿½ï¿½o de validaï¿½ï¿½o
 */
function getInputsValidation() {
	return jQuery('form[validation] :input');
}

/**
 * Retorna os elementos botï¿½es passï¿½veis a manipulaï¿½ï¿½o de validaï¿½ï¿½o
 */
function getButtonsValidation() {
	return jQuery.merge(jQuery('form[validation] img'), jQuery('form[validation] :button[value^="Adicionar"]'));
}

function getMsg() {
	return "Existem alteraï¿½ï¿½es nï¿½o salvas na pï¿½gina atual. Ao sair estas informaï¿½ï¿½es serï¿½o perdidas. Deseja realmente sair da pï¿½gina?";
}

/**
 * Confirmaï¿½ï¿½o utilizada para o evento click
 * @return {TypeName} 
 */
function confirmExitChrome() {
	if (top.needToConfirm) {
		if (window.confirm(getMsg())) {
			releaseDirtyFlag();
			return true;
		}
		return false;
	}
}

/**
 * Confirmaï¿½ï¿½o utilizada para o evento beforeunload
 * @return {TypeName} 
 */
function confirmExit() {
	if (top.needToConfirm) {
		return getMsg();
	}
}

/**
 * Inicia a validaï¿½ï¿½o nos campos que atendem a condiï¿½ï¿½o de validaï¿½ï¿½o
 */
function startValidation() {
	
	releaseDirtyFlag();
	bindButtonLimpar();
	bindValidationInputs(getInputsValidation());
	bindValidationButtons(getButtonsValidation());
	unbindSave(getBtnSave());
	
	if (isChrome()) {
		jQuery('#buscar', top.document).focus( 
			function() {
				if (!top.ask) {
					bindLinksMenu(jQuery('a:[target="page"]', top.document));
					jQuery('#buscar', top.document).bind('keypress', function(event) {
						if (event.keyCode == 13) {
							if (top.needToConfirm) {
								if (confirmExitChrome()) {
									jQuery('iframe[name='+jQuery('li.selected > a', top.document).attr('target')+']', top.document).attr('src', jQuery('li.selected > a', top.document).attr('href'));
								}
								return false;
							}
					
							return true;
						}
					});
					top.ask = true;
				}
			}
		);
		bindLinksMenu(getElementsValidationChrome());
		top.window.onbeforeunload = confirmExit;
	} else {
		jQuery(window).bind('beforeunload', confirmExit);
		if (top.superior != null) {
			jQuery('a[class="bt-sair"]', top.superior.document).bind('click', function() {
				jQuery(window).unbind('beforeunload');
				return confirmExitChrome();
			});
		}
	}
}

function hasValidation() {
	return jQuery('form[validation]').size() > 0;
}

jQuery(document).ready(function() {
	if (hasValidation()) {
		startValidation();
	}
});//exibe ou esconde o menu lateral, se esta aberto esconde, se esta escondido abre.
function A_showMenuLateral(obj){
	var framesetContent = parent.document.getElementById("frameContent");
	var imgSeta;
	var frameBottom = parent.document.getElementById("frameBottom");
	if(frameBottom.contentDocument){
		//firefox
		imgSeta = frameBottom.contentDocument.getElementById("seta");
	}else{
		//explorer
		imgSeta = parent.document.frames["frameBottom"].document.getElementById("seta");
	}
	var srcSeta = new String(imgSeta.src);
	var posBarra = srcSeta.lastIndexOf("/");
	if(framesetContent.cols != "0,*"){
		framesetContent.setAttribute("colsContentMenuAberto", new String(framesetContent.cols));
		framesetContent.cols = "0,*";
		imgSeta.src = srcSeta.substr(0, posBarra) + "/setaExpand.gif";
	}else{
		framesetContent.cols = framesetContent.getAttribute("colsContentMenuAberto");
		imgSeta.src = srcSeta.substr(0, posBarra) + "/setaContract.gif";
	}
}

// Verifica se o menu esta aberto
function A_menuLateralEstaAberto(){
	var framesetContent = parent.document.getElementById("frameContent");
	return (framesetContent.cols != "0,*");
}

// Abre o menu somente se ele estiver fechado, se estiver aberto nï¿½o faz nada
function A_abreMenuLateral(){
	if(!A_MenuLateralEstaAberto()){
		A_showMenuLateral(null)
	}
}

// Fecha o menu somente se ele estiver aberto, se estiver fechado nï¿½o faz nada
function A_fechaMenuLateral(){
	if(A_MenuLateralEstaAberto()){
		A_showMenuLateral(null)
	}
}

//teclas de atalho
function A_ShortCut(evento){
	if(evento.ctrlKey){
		tecla = evento.keyCode
		//window.status = tecla
		
		//M - contract/expand menu side
		if(tecla == 77){
			A_changeLateralSize()
		}
	}
}

function destacaSelecionado(obj) {
	jQuery(".menuText-selecionado").removeClass("menuText-selecionado");
	jQuery(obj).addClass("menuText-selecionado");
}

//coloca o texto no caminho quando o menu ï¿½ clicado
function A_writeInPath(obj){
	
	destacaSelecionado(obj);
	//pega o texto
	
	var jObj = jQuery(obj);
	var textPath = jObj.text();
	var nivel = jObj.attr("nivel");
	while(nivel > 0) {
		jObj = jObj.parents(".nivel"+(nivel-1));
		textPath = jObj.find(".menuTextPrinc").eq(0).text() + " > " + textPath;
		nivel = nivel - 1;
	}
	
	
	//coloca no caminho
	frameSuperior = parent.window.frames["superior"]
	objPath = frameSuperior.document.getElementById("path")
	objPath.childNodes[0].nodeValue = textPath

}







avisosCriticosModalOpacity = 0.5;
var avisosList;

function createMuralAvisosCriticos(){
	avisosList = top.avisosList;
	
	var ul = document.getElementById("listaAvisosCriticos");
    if(avisosList==null){
    	fecharConsModalById('');
    	return;
    }
    
	for(var i = 0; avisosList[(""+i)]; i++){
        var li = document.createElement("li");
        var cb = document.createElement("input");
        cb.setAttribute("type","checkbox");
        if (jQuery.browser.msie) {
        	cb.attachEvent("onclick", function(event){eval("saveHandler(event);")});
	    }else{
	    	cb.setAttribute("onclick", "saveHandler(event)");
	    }
        
        cb.setAttribute("name","avisosCriticosMarcadosString["+i+"]");
        cb.setAttribute("value", avisosList[(""+i)]["nuSeqAviso"] + "_:_" + avisosList[(""+i)]["avisoproviderName"] );
        
        var label = document.createElement("a");
        var divId = 'mensagem'+i;
        
        jQuery(label).click(function(event){toogleSiblingDiv(event)});
        
        var div = document.createElement("div");
        div.id = divId;
        div.style.display = "none";
        
        var tarea = document.createElement("p");
        var cbArea = document.createElement("p");
        cbArea.style.color="red";
        
        
        var assunto = document.createTextNode(avisosList[(""+i)]["deAssunto"]);
        var mensagem = document.createTextNode(avisosList[(""+i)]["deMensagem"]);
        var marcarComoLido = document.createTextNode("Marcar como lido");
        
        tarea.appendChild(mensagem);
        label.appendChild(assunto);
        
        cbArea.appendChild(cb);
        cbArea.appendChild(marcarComoLido);
        
        div.appendChild(tarea);
        div.appendChild(cbArea);
        
        li.appendChild(label);
        li.appendChild(div);
        
        ul.appendChild(li);

    }
	//i=0;
	top.avisosList = null;
	
}
function toogleSiblingDiv(event){
	if ( !event.target )
		event.target = event.srcElement
	var $this = event.target;
	jQuery($this).parent().children("div").toggle(300);
}
function saveHandler(event){
	if ( !event.target )
		event.target = event.srcElement
	var $this = event.target;
	var $a = jQuery($this).parent().parent().parent().children("a");
	if($a.hasClass("avisoLido")){
		$a.removeClass("avisoLido");
	}
	else{
		$a.addClass("avisoLido");
	}
	var botaoSalvar = jQuery(":submit");
	var checkboxesNaoChecados = jQuery(":checkbox:not(:checked)");
	if(checkboxesNaoChecados.length==0){
		botaoSalvar.removeAttr("disabled");
		botaoSalvar.removeClass("botaoDisabled");
	}
	else{
		botaoSalvar.addClass("botaoDisabled");
		botaoSalvar.attr("disabled" , "disabled");
	}
}
function fecharConsModalById(id) {
    //onclosewindow();
	removeModalForALayer();
    var idIframe = "spwAvisoCritico"+id;
    layerCon = parent.document.getElementById(idIframe);
    var doc = parent.document;
    if (layerCon == null) {
       layerCon = document.getElementById(idIframe);
       doc = document;
    }
    if (layerCon != null) {
      layerCon.parentNode.removeChild(layerCon);
      objBody = doc.getElementsByTagName("BODY")[0];
      objBody.onmouseup = null;
      objBody.onmousemove = null;
    }
    
    
}

/** Cria a caixa de consulta **/
function abrirModalAviso(url, largura, altura, avisos, titulo){
	if(document.getElementById("spwAvisoCritico") != null /*&& verificaIframeDiv()*/) {
       return;
    }
	avisosList = avisos;
    alturaTitulo = 18;
    var idIframe = '';
    var idIframeConcat = "spwAvisoCritico";
    //verifica se a consulta ja esta aberta(default -> spwConsulta e caso nï¿½o tenha verifica quaquer div que contenha spwConsulta)

    //
    //spwModalAvisosCriticos();
    //pega dados da pag
    //objBody = document.getElementsByTagName("BODY")[0];
    alturaPag = getDocHeight(document);
    larguraPag = getDocWidth(document);
    posScroll = document.body.scrollTop;
    //cria a layer
    objBody = document.getElementsByTagName("BODY")[0];

	//cria a layer
	var laConsulta = document.createElement("DIV");
	laConsulta.className = "spwTabelaGrid";	
	
	laConsulta.style.backgroundColor = "#ffffff";
	laConsulta.style.backgroundPosition = "top left";				
	laConsulta.style.zIndex = 9009;
    laConsulta.id = idIframeConcat;
    laConsulta.style.position = "absolute";
    laConsulta.style.width = largura+"px";
    laConsulta.style.height = altura+"px";
    
    
    var leftP = (larguraPag - largura) / 2;
    var topP = (alturaPag - altura) /2 + posScroll;
    var sk = jQuery('#imagensSkin', topP.document).val();
	laConsulta.style.backgroundImage = "url("+sk+"bgGridSearchTL.png)";
    if(leftP<=25)
    	leftP = 50;
    if(topP<=0)
    	topP = 55;
    laConsulta.style.left = leftP + "px";
    laConsulta.style.top = topP + "px";
    laConsulta.style.backgroundColor = "#FFFFFF";
    laConsulta.style.backgroundPosition = "top left";
    laConsulta.style.zIndex = 9999;
    objBody.appendChild(laConsulta);
	objBody.setAttribute('idDivConsulta',laConsulta.id);

    //cria a tabela superior
	tabelaCons = document.createElement("TABLE");
	tabelaCons.cellPadding = 0;
	tabelaCons.cellSpacing = 0;
	tabelaCons.style.width = '100%';
	/**/
	tabelaCons.style.backgroundImage = "url("+sk+"bgGridSearchTR.png)";
	tabelaCons.style.backgroundPosition = "top right";
	tabelaCons.style.backgroundRepeat = "no-repeat";
	tabelaCons.style.backgroundColor = "transparent";
	tabelaCons.style.fontSize = "13px";
	tabelaCons.style.color = "#FFFFFF";
	tabelaCons.style.lineHeight = "27px";
	/**/
	tabelaCons.className = "spwTituloGrid";
	tabelaCons.style.cursor = "move";
	cabCons = document.createElement("TBODY");
	tabelaCons.appendChild(cabCons);

	//cria a linha da tabela
	linhaCons = document.createElement("TR");
	cabCons.appendChild(linhaCons);

	//cria a primeira celula
	celula1Cons = document.createElement("TD");
	celula1Cons.height = alturaTitulo;
	/**/
	celula1Cons.style.paddingLeft = "5px"; 
	celula1Cons.style.paddingRight = "5px";				
	/**/
	celula1Cons.setAttribute('idDivConsulta',laConsulta.id);
	linhaCons.appendChild(celula1Cons);
	texto1 = document.createTextNode(titulo);
	celula1Cons.appendChild(texto1);
	objBody.onmousemove = moverLayerModal;
	celula1Cons.onmousedown = iniciaMoverModal;
	objBody.onmouseup = terminaMoverModal;

	//cria a segunda celula
	celula2Cons = document.createElement("TD");
	/**/
	celula2Cons.style.paddingLeft = "5px"; 
	celula2Cons.style.paddingRight = "5px";
	/**/
	linhaCons.appendChild(celula2Cons);

	celula2Cons.style.width = '20px';
	laConsulta.appendChild(tabelaCons);

    //cria tabela para conter o iframe
    tabelaIframe = document.createElement("TABLE");
    linhaIframe = document.createElement("TR");
    celulaIframe = document.createElement("TD");
    tabelaIframe.id = "tabelaIframe";
   
    if (url.indexOf("?") < 0) {
        url=url+"?";
    } else {
        url=url+"&";
    }
    if( navigator.appName == "Netscape" ) {
        iframeConsulta = document.createElement("iframe");
        iframeConsulta.src = url;
        iframeConsulta.width = "100%";
        iframeConsulta.height = altura - alturaTitulo;
        iframeConsulta.frameBorder = "0";
        iframeConsulta.id = "layerFormConsulta";
        laConsulta.appendChild(iframeConsulta);
    } else {
        htmlIframe = "<iframe id='layerFormConsulta' frameBorder='0' style='width:100%; height:100%' src='"+url+"'></iframe>";
        document.getElementById(idIframeConcat).insertAdjacentHTML("beforeEnd", htmlIframe);
    }
    //spwModalScripts(laConsulta.id);
    setModalForALayer(laConsulta.id);
}
function iniciaMoverModal(aEvent){
	
    var theEvent = aEvent ? aEvent : window.event ;
    movendo = true;
    posXinicial = new Number(theEvent.clientX + document.body.scrollLeft);
    posYinicial = new Number(theEvent.clientY + document.body.scrollTop);
    layerConsulta = document.getElementById("spwAvisoCritico");
    posXlayer = converteNumero(layerConsulta.style.left);
    posYlayer = converteNumero(layerConsulta.style.top);
}

/** exibe o conteudo da consulta quanto termina de mover **/
function terminaMoverModal(){
    document.getElementById("layerFormConsulta").style.display = "";
    movendo = false;
}

/** move a layer **/
function moverLayerModal(aEvent){
    var theEvent = aEvent ? aEvent : window.event;
    if (movendo == true) {
        document.getElementById("layerFormConsulta").style.display = "none";
        currentX = new Number(theEvent.clientX + document.body.scrollLeft);
        currentY = new Number(theEvent.clientY + document.body.scrollTop);
        layerConsulta = document.getElementById("spwAvisoCritico");
        layerConsulta.style.left = posXlayer + (currentX - posXinicial) + "px";
        layerConsulta.style.top = posYlayer + (currentY - posYinicial) + "px";
    }
}

function setModalForALayer(idIframeConcat){
	$idFrameMural = jQuery('#idFrameMural',top.document);				
	$rootHtml = $idFrameMural.parents("html:last");
	
	$divSpwModalContent = jQuery("#modalAvisoCritico");
	if($divSpwModalContent.length==0){
		var div = top.document.createElement("DIV");
		div.setAttribute('id','modalAvisoCritico');
		$divSpwModalContent = jQuery(div);
		$divSpwModalContent.id = "modalAvisoCritico";
		$divSpwModalContent.addClass("spwModalDefault");
		$rootHtml.children("body").append($divSpwModalContent);
	}
	
	$divSpwModalContent.css({'position':'absolute','top':0 ,'left':0,'width':$rootHtml.width(),'height':($rootHtml.height()+$rootHtml.scrollTop())});
	
	$divSpwModalContent.fadeTo(0,modal_opacity, function() {
		$divSpwModalContent.show();
		$divSpwModalContent.css('z-index',9009);	
	});	    			    			    	
	
	$iframeConcat = jQuery('#'+idIframeConcat);
	$iframeConcat.css('z-index',9999);																	

	$rootHtml.scroll(function() {
		$rootHtml = jQuery(this);
		if($iframeConcat != null && $iframeConcat.size() > 0 && verificaIframeDiv()) {									
			$divSpwModalContent.css({'width':$rootHtml.width(),'height':$rootHtml.height()+$rootHtml.scrollTop()});						
			$divSpwModalContent.fadeTo(0,modal_opacity, function() {
				$divSpwModalContent.show();			        
			});
		}												
	});
	
	jQuery(window).resize(function() {
		$divSpwModalContent = jQuery("#modalAvisoCritico",top.document);
		if($divSpwModalContent.isVisible())
		setModalForALayer(idIframeConcat);
	});
	
    
}
function removeModalForALayer(){
	$divSpwModalContent = jQuery("#modalAvisoCritico",top.document);
	$divSpwModalContent.hide();
	jQuery(window).resize(function(){});
}

function getDivPageModalHeight($docPage,docPage){	
    var docHeight;
    try{
		if(isNaN($docPage.height())){
	   		throw 'NaN';
	   	}	   	
	   	docHeight = $docPage.height() + 'px';
	}catch(err){
	   	try{
	   		if(isNaN(docPage.height)){
	   			throw 'NaN';
	   		}	   		
		    //docHeight = (docPage.height) + 30 + 'px';
	   		docHeight = getDocHeight(docPage);
	   	}catch(err){
   			docHeight = '100%';
		}
    }
    
    return docHeight;
}

function getDivPageModalWidth($docPage,docPage){
	var docWidth;  	
    try{
    	if(isNaN($docPage.width())){
    		throw 'NaN';
    	}
    	docWidth = $docPage.width() + 'px';    	
    }catch(err){
    	try{
    		if(isNaN(docPage.width)){
    			throw 'NaN';
    		}
    		docWidth = (docPage.width) + 30 + 'px';		    
    	}catch(err){
    		try{
    			docWidth = docWidth = getDocWidth(docPage);    						    			
    		}catch(err){
    			docWidth = '100%';    			
    		}	
    	}
    }
    
    return docWidth;
}

function getDocHeight(D) {
    return Math.max(
        Math.max(D.body.scrollHeight, D.documentElement.scrollHeight),
        Math.max(D.body.offsetHeight, D.documentElement.offsetHeight),
        Math.max(D.body.clientHeight, D.documentElement.clientHeight)
    );
}

function getDocWidth(D) {
    return Math.max(
        Math.max(D.body.scrollWidth, D.documentElement.scrollWidth),
        Math.max(D.body.offsetWidth, D.documentElement.offsetWidth),
        Math.max(D.body.clientWidth, D.documentElement.clientWidth)
    );
}/**
 * Troca o estilo do botao por o nome do estilo + '-o'
 */
function B_mOver(obj)
{	
   obj = obj.parentNode.parentNode;
   var nmStyle = new String(obj.className);
   if(obj.className.indexOf("-o") == -1){
	   obj.className = nmStyle + "-o";
   }
}

/**
 * Troca o estilo do botao por o nome do estilo - '-o'
 */
function B_mOut(obj)
{
   obj = obj.parentNode.parentNode;
   var nmStyle = new String(obj.className);
   if(obj.className.indexOf("-o") > -1){
	   obj.className = nmStyle.substr(0, nmStyle.length - 2);
   }
}

function B_desabilitaBotao(obj){
	var objType = obj.type;
	var objClassName = obj.className;
	if (obj.nodeName == "INPUT" && (objType == "button" || objType=="submit")) {
		if(objClassName.indexOf('-o') != -1){
			obj.setAttribute('oldClassName',objClassName);
			obj.className = objClassName.substring(0,objClassName.length-2) + '-d';
		}else if(objClassName.indexOf('-d') == -1){
			obj.setAttribute('oldClassName',objClassName);
			obj.className = objClassName + '-d';
		}
		obj.disabled = true;
	} 
}

function B_submitTo(action) {
	document.forms[0].action = action;
	document.forms[0].submit();
}

function B_setLocation(action) {
	F_openPage(action);
}

function onClickButtonSpan(event) {
    
    var elem = event && event.target ? event.target : event.srcElement;
    
    if (elem.nodeName != "SPAN") {
        return;
    }

    var input;
    input = jQuery("input, button", elem)[0];
    if ((input == undefined) || (input == null)) {
    	input = elem.getElementsByTagName("span")[0].getElementsByTagName("input")[0];
    }
    
    if (input && input.disabled) {
        return;
    }
    
    try {
    	input.onclick();
    } catch(e) {
    	input.click();
    }
    
    if (input.type == "submit") {
        if (input.form.onsubmit()) {
            input.form.submit();
        }
    }

}

function onMouseOutButtonSpan(event) {
	var elem = event && event.target ? event.target : event.srcElement;
    
    if (elem.nodeName != "SPAN") {
        return;
    }

    var input;
    input = jQuery("input, button", elem)[0]; 
    if ((input == undefined) || (input == null)) {
    	input = elem.getElementsByTagName("span")[0].getElementsByTagName("input")[0];
    }
    
    if (input && input.disabled) {
        return;
    }
    
    input.onmouseout();
}

function onMouseOverButtonSpan(event) {
	var elem = event && event.target ? event.target : event.srcElement;
    
    if (elem.nodeName != "SPAN") {
        return;
    }

    var input;
    input = jQuery("input, button", elem)[0]; 
    if ((input == undefined) || (input == null)) {
    	input = elem.getElementsByTagName("span")[0].getElementsByTagName("input")[0];
    }
    
    if (input && input.disabled) {
        return;
    }
    
    input.onmouseover();
}/**
 * Verifica se os campos do formulï¿½rio sï¿½o vï¿½lidos
 */
function BENV_isCamposValidos(objForm) {
	//Varre o formulï¿½rio procurando por campos obrigatï¿½rios
	var elementosParaDesabilitar = new Array();
	var cn_array = new Array();
	var length = objForm.length;
	for (var iCampo=0;iCampo<length;iCampo++) {
		var obj = objForm[iCampo];		
		//procura por elementos que precisam ser desabilitados no submit
		if(new String(obj.getAttribute('desabilitaOnSubmit')).toUpperCase() == "TRUE"){
			elementosParaDesabilitar.push(obj);
		}
		var objName = obj.name;
        //verifica se nï¿½o ï¿½ a linha -1 da grid
    	if (objName != "" && objName != "null")  {
			//Verifica se nï¿½o estï¿½ com readonly ou disabled..
    		var valorDisabled = new String(obj.getAttribute('disabled')).toUpperCase();
    		if (jQuery.browser.mozilla) {
    			valorDisabled = (valorDisabled != "DISABLED");
    		} else {
    			valorDisabled = (valorDisabled != "TRUE");
    		}
		    if(valorDisabled){
	            //Faz a validaï¿½ï¿½o do campo
		    	
		    	var temErro = obj.className;
		    	
	            if (!C_verificaValor(obj)) {
            		if(obj.offsetHeight != 0 || C_exibeDivSubtitleCampo(obj)){
				    	obj.focus();    
				    }				    
            		var formatType = obj.getAttribute('formatType');            		
            		exibeMensagem(formatType, obj);            		
            		return false;
        		}
	            
	            if (temErro.search('erro') != -1) {
	            	alert(msgKey("label.js.campoInvalido",obj.getAttribute('rotulo')));
	            	obj.value = '';
	            	obj.focus();
	            	return false;
	            }
	            
	            if (new String(obj.getAttribute('obrigatorio')).toUpperCase() == "TRUE") {
	            	//verifica se o registro foi excluido.
	            	var isExcluido = false;
					var grid = getGrid(obj);
					if(grid != null){
						var index = getFieldIndex(obj.id);
						var idAcao = getColumnId(grid, "status", index);
						var acao = new String(document.getElementById(idAcao).value);
						isExcluido = (acao.charAt(0) == 'D');
					}
					//verifica se o campo faz parte da chave primï¿½ria
					var pk = obj.getAttribute('pk');
					var isPk = false;
					if(pk != null){
						isPk = (new String(pk).toUpperCase() == "TRUE");
					}
					//Verifica se ï¿½ campo de um input select 
					if (C_isISMLSon(obj)) {
						if (C_validaISMS(obj)) {//verifica se ï¿½ multipla seleï¿½ï¿½o e falta preencher o campo
							alert(msgKey("label.js.campoDevePreenchido", obj.getAttribute('rotulo')));
							obj.value = '';
			            	obj.focus();
							return false;
						} else {
							continue;
						}
					}
					
					
					//Verifica se o campo estï¿½ preenchido
	                if(!isExcluido || isPk){               		                		
						if (!C_verificaObrigatorio(obj)) {
							return false;
						}						
	    	        }
	            }	            	            	            	            
	        }
		    
		    //verifica se o valor do campo respeita o tamanho minimo definido
		    var minLength;
		    if (!isNaN(minLength = parseInt(obj.getAttribute('minLength')))) {
		    	if (parseInt(obj.value.length) < minLength) {
		    		alert(msgKey("label.js.campoTamanhoMinimo", obj.getAttribute('rotulo'), minLength));
		    		return false;
		    	}
		    }
              	        
	        //Verifica se ï¿½ necessï¿½rio a desformataï¿½ï¿½o do campo numï¿½rico e adiciona o objeto ao array
        	if(new String (obj.getAttribute('formatType')).toUpperCase() == 'NUMBER' && new String (obj.getAttribute('desformataOnSubmit')).toUpperCase() == "TRUE"){        		
        		cn_array.push(obj);       		        		        		
        	}
	        
        }
	}
	
	// hook method
	if (!BENV_validaForm()) {
		return false;
	}
	
	//Verifica se tem campos numï¿½ricos a serem desformatados
	if(cn_array != null && cn_array.length > 0){ 
		desformataCn_array(cn_array);		        		
	}
	
	//concatena o dia(first ou last) nas datas da tag formatedDate e verifica se o intervalo ï¿½ vï¿½lido	
	if(!verificaFormatedDate(objForm)){
		return false;	
	}
	
	var elementosParaDesabilitarLenght = elementosParaDesabilitar.length;
	for(var i = 0; i < elementosParaDesabilitarLenght; i++){
		var obj = elementosParaDesabilitar[i];
		obj.disabled = true;
	}
	
	
	//BENV_exibeProcessando();
    return true;
}

//hook method in BENV_isCamposValidos function for new validations
function BENV_validaForm() {
	return true;
}

function desformataCn_array(array){
	var arrayTamanho = array.length;
	for(var i = 0; i < arrayTamanho; i++){		
		array[i].value = CN_getValorDesformatadoDouble(array[i].value);
	}
}

function applySubmit(objForm, apply){
	if(objForm != null){
		var objTarget = objForm.target;
		var tname_lc = new String(objTarget).toLowerCase();
		var isSameWindow = objTarget == "" || 
				tname_lc == "_self" || objTarget == window.name;
		if(apply && isSameWindow){
			FF_desabilitaBotoes(objForm);
		}
	}
	return apply;
}

function exibeMensagem(formatType, input){
	switch(formatType){
		case 'DATE': {
			alert(msgKey("label.js.dataInvalida",input.value));
		    break;
		}
		case 'CPF': {
			alert(msgKey("label.js.cpfInvalido",input.value));
		    break;
		}
		case 'CNPJ': {
			alert(msgKey("label.js.cnpjInvalido",input.value));
		    break;
		}
		case 'EMAIL': {
			alert(msgKey("label.js.emailInvalido",input.value));
		    break;
		}
		case 'NUMBER': {
			alert(msgKey("label.js.valorInvalido",input.value));
		    break;
		}
		case 'MASK': {
			alert(msgKey("label.js.valorInvalido",input.value));
		    break;
		}
		case 'FORMATEDDATE': {
			alert(msgKey("label.js.dataInvalida",input.value));
		    break;
		}
		case 'INTERVALO': {
			alert(msgKey("label.js.intervaloDatas",input.value));
		    break;
		}
		
	}
}

/**
 * Evento OnClick
 */
function BENV_CLK(ctrl) {
	//pega o objeto form mais proximo
	//objForm = FF_GetForm(ctrl);
    objClicado = ctrl;
}

/**
 * Exibe a imagem de processando no meio da tela
 */
function BENV_exibeProcessando() {
	var objBody = document.getElementsByTagName("BODY")[0];
	var objLayer = document.createElement("DIV");
	objLayer.className = "processando";
	objLayer.id = "divProcessando";

	var alturaPag = F_getBrowserHeight();
	var larguraPag = F_getBrowserWidth();
	var posScroll = document.body.scrollTop;
	var largura = 200;
	var altura = 40;
	
	objLayer.style.left = ((larguraPag - largura) / 2) + "px";
	objLayer.style.top = ((alturaPag - altura) / 2 + posScroll) + "px";	

	objBody.appendChild(objLayer);
}

function BENV_removeProcessando() {
	var objBody = document.getElementsByTagName("BODY")[0];
	var divProcessando = document.getElementById("divProcessando");
	objBody.removeChild(divProcessando);
}

function verificaFormatedDate(objForm){
	var componentesAlterados = new Array();
	var length = objForm.length;
	for (var iCampo=0;iCampo<length;iCampo++) {
		var obj = objForm[iCampo];
		var objName = obj.name;
		var objValue = obj.value;
		//concatena o dia desejado ï¿½ data informada
		if(new String(obj.getAttribute('appendDay')).toUpperCase() == "FIRST" || 
			new String(obj.getAttribute('appendDay')).toUpperCase() == "LAST"){
	       	obj.value = appendDay(objValue, new String(obj.getAttribute('appendDay')).toUpperCase());
	       	componentesAlterados.push(obj);
	    }
		//verifica o intervalo
	    var compareId = obj.getAttribute('compareId');
	    if(new String(compareId) != null && new String(compareId) != "" 
		   && new String(compareId) != "null" && new String(obj.getAttribute('formatType')) == "FORMATEDDATE"){
	    	var outroDate = document.getElementById(compareId);
	    	var intervaloValido = verificaIntervaloDatas(new String(outroDate.value), new String(obj.value));
	    	if(!intervaloValido){	    		
	    		var tamanhoComponentesAlterados = componentesAlterados.length;
	    		for(var i=0;i<tamanhoComponentesAlterados;i++){
	    			var componente = componentesAlterados[i];
	    			var componenteValue = componente.value;
	    			if(new String(componenteValue).length == 10 && 
	    				(new String(componente.getAttribute('appendDay')).toUpperCase() == "FIRST" || 
	    				new String(componente.getAttribute('appendDay')).toUpperCase() == "LAST")){
	            		componente.value = new String(componenteValue).substring(3);
	            	}
	    		}
	    		obj.focus();
	    		exibeMensagem("INTERVALO", obj);
	    		return false;
	    	}
	    }
	}
	return true;
}

function verificaIntervaloDatas(dtIni, dtFim){	
	if(dtIni.length == 7){
		dtIni = "01/"+dtIni;
	}
	if(dtFim.length == 7){
		dtFim = "01/"+dtFim;
	}
	if(!Date.strToDate(dtIni).before(Date.strToDate(dtFim))){
		return false;
	}
	return true;
}

function decodificaInputMulSelOnSubmit() {
	var objs = jQuery('div[multselecao=true] > input');
	for (i=0; i<objs.length; i++) {
		objs.get(i).value = url_decode(url_decode(objs.get(i).value));
	}
}
function BEG_GetImagem(obj, tipo) {
   var srcImg = obj.className;
   if (tipo == "aceso") {
       srcImg = srcImg.substr(0, srcImg.length - 4) + "-o";
   } else if (tipo == "aceso_deletado") {
       srcImg = srcImg.substr(0, srcImg.length - 2) + "-d-o";
   } else if (tipo == "normal") {
       srcImg = srcImg.substr(0, srcImg.length - 2);
   } else if (tipo == "normal_deletado") {
       srcImg = srcImg.substr(0, srcImg.length) + "-d";
   }
   obj.className = srcImg;
}


/**
 * Executa a exclusï¿½o do registro
 */
function BEG_DeletaRegistro(obj) {
    // Muda a acao da linha
    changeAction(obj, "D");
    //Troca a imagem para a imagem "deletado"
    var srcImg = obj.className;
    var estado = srcImg.substr(srcImg.length - 2);
    if (estado == "-o") {
        var estado2 = srcImg.substr(srcImg.length - 4);
        if (estado2 == "-d-o") {
            mudarCorLinha(obj, "");
            BEG_GetImagem(obj, "aceso");
        } else {
            mudarCorLinha(obj, "");
            BEG_GetImagem(obj, "aceso_deletado");
        }
    } else {
        if (estado == "-d") {
            mudarCorLinha(obj, "");
            BEG_GetImagem(obj, "normal");
        } else {
            mudarCorLinha(obj, "");
            BEG_GetImagem(obj, "normal_deletado");
        }
    }
}

/**
 * Evento OnKeyPress
 */
function BEG_KPS(ctrl) {
    BEG_DeletaRegistro(ctrl);
}
var browserControl = new Array();

function isJreVersionValid(minimo){
	if(browserHasJre()){
		var m = minimo;
		var v = '' + getBrowserJreVersion();
		var vLeft = null;
		var mLeft = null;
		
		v = v.replace('_','.');
		m = m.replace('_','.');
		while(v != null	&& m != null){
			if(m.indexOf('.') != -1){
				var m2 = m;
				var m = m.substring(0,m.indexOf('.'));
				mLeft = m2.substring(m2.indexOf('.')+1, m2.length);
			} else {
				mLeft = null;
			}
			if(v.indexOf('.') != -1){
				v2 = v;
				v = v.substring(0,v.indexOf('.'));
				vLeft = v2.substring(v2.indexOf('.')+1, v2.length);
			} else {
				vLeft = null;
			}
			if(new Number(m) < new Number(v)){
				return true;
			} else if(new Number(m) > new Number(v)){
				return false;
			}
			if(mLeft == null){
				return true;
			}
			if(vLeft == null){
				return false;
			}
			v = vLeft;
			m = mLeft;
		}
	}
	return false;		
}

function browserHasJre(){
	return navigator.javaEnabled();
}

function getBrowserJreVersion(){
	return getJreVersion();
}

function getBrowserName(){
	return navigator.appName;
}

function getBrowserVersion(){
	return navigator.userAgent;
}

function checaVersaoJre(versao){
	if(!isJreVersionValid(versao)){
		var p = document.createElement('<P>');
		var msg = document.createTextNode(msgKey('label.js.jreInvalida', ''));
		var objBody = document.getElementsByTagName("BODY")[0];
		objBody.appendChild(msg);
		objBody.appendChild(document.createElement('<BR>'));
		objBody.appendChild(getSolucaoProblemaElement('jreInvalida.html'));
		objBody.appendChild(p);
	}
}

function checaBrowser(){
	if(!isBrowserValid(arguments)){
		var msg = document.createTextNode(msgKey('label.js.browserInvalido', ''));
		var msgLinha2 = document.createTextNode(msgKey('label.js.browsersValidos', ''));
		var objBody = document.getElementsByTagName("BODY")[0];
		objBody.appendChild(document.createElement('<BR>'));
		objBody.appendChild(msg);
		objBody.appendChild(msgLinha2);
		
		var argumentsTamanho = arguments.length;
		for(var i = 0; i < argumentsTamanho; i+=2){
			objBody.appendChild(document.createElement('<BR>'));
			objBody.appendChild(document.createTextNode(arguments[i] + ' ' + arguments[i+1]));
		}
		objBody.appendChild(document.createElement('<BR>'));		
		objBody.appendChild(getSolucaoProblemaElement('browserInvalido.html'));
		objBody.appendChild(document.createElement('<P>'));
	}
}

function isBrowserValid(){
	var browserControl = arguments[0];
	var i = 0;
	var name = getBrowserName();
	
	//Verifica se ï¿½ Chrome
	var is_chrome = getBrowserVersion().toLowerCase().indexOf('chrome') > -1;
	if (is_chrome) {
		return true;
	}
	
	if(name.indexOf('Netscape') == -1 && name.indexOf('Firefox') == -1 && 
					name.indexOf('Microsoft Internet Explorer') ==-1 ){
		return false;
	} 
	var version = getBrowserVersion();
	while(i < browserControl.length){
		var bName = browserControl[i++];
		if(name.indexOf(bName) != -1 || version.indexOf(bName)!= -1){
			if(i < browserControl.length){
				var bVersion = browserControl[i++];
				if(version.indexOf('MSIE') != -1){
					v = version.substring(version.indexOf('MSIE')+4, version.indexOf('; Windows'));
				} else {
					v = version.substring(version.indexOf('Firefox/')+8, version.length);
				} 
				versaoDoBrowser = trim(v);
				versaoDoBrowser = replaceAll(versaoDoBrowser,'.', '');
				versaoDoBrowser = '0.' + versaoDoBrowser;
				versaoMinima = replaceAll(bVersion,'.','');
				versaoMinima = '0.' + versaoMinima;
				if(versaoDoBrowser >= versaoMinima){
					return true;
				} else {
					return false;
				}
			}
		}		
	}
	return false;
}

function checaJavaScript(){
	document.getElementById('checkJavaScript').style.display='none';
	document.getElementById('submit').disabled = false;
}


function getJreVersion() {
    var version = 0;
    try {
        version = JREDetect.getJavaVersion();
    } catch(e) {
		return 0;
    }
    return version;
}

function getSolucaoProblemaElement(link){
	var a = document.createElement('A');
	a.setAttribute('href', link);
	a.setAttribute('target', 'newWindow');
	var label = document.createTextNode(msgKey('label.js.resolverProblema'));
	a.appendChild(label);
	return a;
}
function cabecalhoGrid_mOver(obj){
	var objClassName = cleanObjClassName(obj.className);		
	obj.className = objClassName + " spwCabecalhoGridHover";	
}

function cabecalhoGridLeftRound_mOver(obj){
	var objClassName = cleanObjClassName(obj.className);
	obj.className = objClassName + " spwCabecalhoGridLeftRoundHover";	
}
	
function cabecalhoGrid_mOut(obj){
	var objClassName = cleanObjClassName(obj.className);	
	var ordenacao = obj.getAttribute('ord');	
	
	if(ordenacao == 'asc'){	
		obj.className = objClassName + " spwCabecalhoAsc";
	}else if(ordenacao == 'des'){
		obj.className = objClassName + " spwCabecalhoDesc";
	}else{
		obj.className = objClassName + " spwCabecalhoGridOrder";
	}	
}

function cabecalhoGrid_Click(obj){
	var objClassName = cleanObjClassName(obj.className);		
	obj.className = objClassName + " spwCabecalhoGridClick";	
}

function cabecalhoGridLeftRound_Click(obj){	
	var objClassName = cleanObjClassName(obj.className);		
	obj.className = objClassName + " spwCabecalhoGridLeftRoundClick";		
}

function cleanObjClassName(objClassName){	
	var indexGridHover = objClassName.indexOf(' spwCabecalhoGridHover');	
	if(indexGridHover != -1){
		objClassName = objClassName.substring(0,indexGridHover) + " "+  objClassName.substring(indexGridHover+22);
	}
	
	var indexGridClick = objClassName.indexOf(' spwCabecalhoGridClick');	
	if(indexGridClick != -1){
		objClassName = objClassName.substring(0,indexGridClick) + " "+  objClassName.substring(indexGridClick+22);
	}
	
	var indexGridLeftRoundHover = objClassName.indexOf(' spwCabecalhoGridLeftRoundHover');	
	if(indexGridLeftRoundHover != -1){
		objClassName = objClassName.substring(0,indexGridLeftRoundHover) + " "+  objClassName.substring(indexGridLeftRoundHover+31);
	}
	
	var indexCabecalhoGridAsc = objClassName.indexOf(' spwCabecalhoAsc');	
	if(indexCabecalhoGridAsc != -1){
		objClassName = objClassName.substring(0,indexCabecalhoGridAsc) + " "+  objClassName.substring(indexCabecalhoGridAsc+31);
	}
	
	var indexCabecalhoGridDesc = objClassName.indexOf(' spwCabecalhoDesc');	
	if(indexCabecalhoGridDesc != -1){
		objClassName = objClassName.substring(0,indexCabecalhoGridDesc) + " "+  objClassName.substring(indexCabecalhoGridDesc+31);
	}
	
	var indexGridOrder = objClassName.indexOf(' spwCabecalhoGridOrder');	
	if(indexGridOrder != -1){
		objClassName = objClassName.substring(0,indexGridOrder) + " "+  objClassName.substring(indexGridOrder+22);
	}
	
	var indexGridLeftRoundClick = objClassName.indexOf(' spwCabecalhoGridLeftRoundClick');	
	if(indexGridLeftRoundClick != -1){
		objClassName = objClassName.substring(0,indexGridLeftRoundClick) + " "+  objClassName.substring(indexGridLeftRoundClick+31);
	}
	
	return objClassName;
}/** 
 * Retorna a posiï¿½ï¿½o do cursor dentro do campo.
 */
function C_getPosTextoDigitado(ctrl) {
  	if (jQuery.browser.msie) {
        ctrl.focus();
        var range = document.selection.createRange();
        return (ctrl.value.length - range.move("character", 50000)); 
    } else {
        return ctrl.selectionStart;
    }
}

/** 
 * Retorna o texto se o caracter "caracter" for digitado na posiï¿½ï¿½o atual do
 * cursor.
 */
function C_getTextoDigitado(ctrl, caracter) {
  	if (jQuery.browser.msie) {
        ctrl.focus();
        var range = document.selection.createRange();
        var tamSel = String(range.text).length;
        var posIni = (ctrl.value.length - range.move("character", 50000));
        var posFim = posIni + tamSel;
    } else {
        var posIni = ctrl.selectionStart;
        var posFim = ctrl.selectionEnd;
    }
    var textodigitado = ctrl.value.substr(0, posIni) + caracter + ctrl.value.substr(posFim);
    return textodigitado;
}

/*
 * Retorna TRUE se o campo estiver todo selecionado
 */
function C_isCampoTodoSelecionado(ctrl) {
    var tamanhoTextoCampo = String(ctrl.value).length;
  	if (jQuery.browser.msie) {
        var range = document.selection.createRange();
        return (String(range.text).length == tamanhoTextoCampo);
    } else {
        return (ctrl.selectionEnd - ctrl.selectionStart == tamanhoTextoCampo);
    }
}

/*
 * Retorna o tamanho da seleï¿½ï¿½o no campo
 */
function C_getSelLength(ctrl) {
  	if (jQuery.browser.msie) {
        var range = document.selection.createRange();
        return range.text.length;
    } else {
        return (ctrl.selectionEnd - ctrl.selectionStart);
    }
}

/**
 * Retorna o cï¿½digo da tecla digitada no OnKeyPress, OnKeyDown e OnKeyUp.
 */
function C_TeclaDigitada(event) {
    if (jQuery.browser.msie) {
        return event.keyCode;
    } else {
        return event.charCode;
    }
}

/**
 * Retorna o cï¿½digo da tecla de controle digitada no OnKeyPress, OnKeyDown e OnKeyUp.
 */
function C_TeclaControleDigitada(event) {
    if (jQuery.browser.msie) {
        if (event.type == "keypress") {
            return 0;
        } else {
            return event.keyCode;
        }
    } else {
        return event.keyCode; 
    }
}

/**
 * Cancela o evento OnKeyPress, OnKeyDown, OnKeyUp.
 */
function C_CancelaEvento(event) {
    if (jQuery.browser.msie) {
        event.returnValue = false;
    } else {
        event.preventDefault();
    }
}

/**
 * Retorna TRUE se o evento OnKeyPress pode ser processado.
 */
function C_NaoPodeProcessarOnKeyPress(ctrl, event) {
    var tecla = C_TeclaDigitada(event);
    var teclaControle = C_TeclaControleDigitada(event);
    
    if(!jQuery.browser.msie){
    return (ctrl.readOnly || tecla == 0 || tecla == 13 || event.ctrlKey || 
        event.ctrlLeft);
    }
    
    return (ctrl.readOnly || tecla == 0 || tecla == 13 || event.ctrlKey || 
        event.ctrlLeft || C_TeclaControleDigitada(event) > 0);
}

/**
 * valida el texto en el formato.
 */
function C_valorTeclasControleHandler(ctrl, event){
	window.setTimeout(function(){
			var formatoAux = ctrl.getAttribute("formato");
			var conteudo = ctrl.value;
			var formattype = ctrl.getAttribute("formattype");
			var formato = "";
			switch(formattype){
			case "DATE":
				conteudo = this.getValidConteudo(conteudo, ctrl);
				if(formatoAux == null || formatoAux == "")
					formato = "00/00/0000"; 
				else
					formato = formatoAux;
				break;
			case "FORMATEDDATE":
				if(formatoAux == null || formatoAux == "")
					formato = "00/0000"; 
				else
					formato = formatoAux;
				break;
			case "NUMBER":
				formato = F_strPad("",formatoAux, "0");
				break;
			case "TEXT":
				formato = F_strPad("",formatoAux, "a");
				break
			default:
				formato = formatoAux.toString();
			}
				
			if(formato && CM_isFormatoValido(formato, conteudo)){
				if (formattype != "TEXT") {
					conteudo=C_limpaConteudoComFormato(formato, conteudo);
					ctrl.value=CM_aplicaMascaraAoConteudo(formato, conteudo);
				}
			}
		 }, 200);
}

function getValidConteudo(conteudo, ctrl) {
	var isNonDigitCaracterWithSlash = (conteudo.search(/^\d{1,2}\/\d{1,2}\/\d{1,4}$/) != -1);
	var isNonDigitCaracter = (conteudo.search(/\D/) === -1);
	if (!isNonDigitCaracterWithSlash) {
		if (!isNonDigitCaracter) {
			ctrl.value = "";
			conteudo = "";
			return conteudo;
		}
	}
	return "";
}

/**
 * Retorna TRUE caso seja digitado CRTL+V, CTRL+X, SHIFT+INS
 */
function C_isTeclasControle(ctrl, event){
	var tecla = C_TeclaDigitada(event);
    var teclaControle = C_TeclaControleDigitada(event);
	if ( ((event.ctrlKey || event.ctrlLeft) && (tecla == 86 || tecla == 118 || tecla == 88 || tecla == 120)) ||
            ((event.shiftKey || event.shiftLeft) && (teclaControle == 45 || teclaControle == 46)) ) {
           return true;            
       }
	return false
}

/**
 * Retorna TRUE caso as teclas de controle devam ser inibidas
 */
function C_getDeveInibirTeclasControle(ctrl, event) {
    if ((jQuery.browser.msie && event.type == "keydown") ||
                (!jQuery.browser.msie && event.type == "keypress")) {
        //pega a tecla que foi digitada
        var tecla = C_TeclaDigitada(event);
        var teclaControle = C_TeclaControleDigitada(event);
        //Se o campo nï¿½o estï¿½ em branco ou todo selecionado...
        if (ctrl.value != "" || !C_isCampoTodoSelecionado(ctrl)) {
            //Nï¿½o deixa digitar o CRTL+V, CTRL+X, SHIFT+INS
            if ( C_isTeclasControle(ctrl, event) ) {
                return true;            
            }
            //Controla a digitaï¿½ï¿½o do DEL e BKSP
            if (teclaControle == 8 || teclaControle == 46)  {
                pos = C_getPosTextoDigitado(ctrl);  
                lenVal = String(ctrl.value).length;
                if ((teclaControle == 8 && pos != lenVal) ||
                        (teclaControle == 46 && pos != lenVal-1)) {
                     return true;
                }
            }
        }
    }
    return false;
}

/** 
 * Retira os caracteres especiais de um CPF/CNPJ 
 */
function C_EliminaMascaraCPFCNPJ(nuIdent) {
	var nuTemp = String(nuIdent);
    nuTemp = nuTemp.replace(/\\/g, "");
    nuTemp = nuTemp.replace(/\//g, "");
    nuTemp = nuTemp.replace(/,/g, "");
    nuTemp = nuTemp.replace(/\./g, "");
    nuTemp = nuTemp.replace(/-/g, "");
    nuTemp = nuTemp.replace(/\s/g, "");
    return nuTemp;
}

/**
 * Verifica se o formato do campo ï¿½ valido
 */
function C_verificaValor(ctrl) {
	var ctrlFormatType = ctrl.getAttribute('formatType');
    if (ctrlFormatType != null) {
        var formatType = new String(ctrlFormatType).toUpperCase();
        if (formatType == "TEXT") {
            return CT_verificaValor(ctrl);
        } else if (formatType == "NUMBER") {
            return CN_verificaValor(ctrl);
        } else if (formatType == "DATE") {
            return CD_verificaValor(ctrl);
        } else if (formatType == "HOUR") {
            return CH_verificaValor(ctrl);
        } else if (formatType == "MASK") {
            return CM_verificaValor(ctrl);
        } else if (formatType == "CPF") {
            return CCPF_verificaValor(ctrl);
        } else if (formatType == "CNPJ") {
            return CCNPJ_verificaValor(ctrl);
        } else if (formatType == "EMAIL") {
            return CEMAIL_verificaValor(ctrl);
        } else if(formatType == "FORMATEDDATE"){
        	return CFD_verificaValor(ctrl);
        } else if(formatType == "TELEFONE"){
        	var idCampoTelefone = ctrl.getAttribute('idCampoTelefone');
        	var campoTelefone = new CampoTelefone(idCampoTelefone);
        	return campoTelefone.verificaSeRespeitaMascara();
        }
    }
    return true;
}

/*
 * Verifica se o campo estï¿½ preenchido
 */
function C_verificaObrigatorio(ctrl) {
    if (ctrl.value == null || jQuery.trim(ctrl.value) == "") {
        var rotulo = ctrl.getAttribute('rotulo');
        if (rotulo != "" && rotulo != "null" && rotulo != null) {
            C_mostreMsgCampoObrigatorio(rotulo);
        } else {
            alert(msgKey("label.js.compoObrigatorio",""));
        }
        if(ctrl.offsetHeight != 0 || C_exibeDivSubtitleCampo(ctrl)){
	    	//adicionado para resolver erro de campos com display none
	    	try{
	    		ctrl.focus();
	    	}catch(e){
	    		return false;
	    	}    
	    }	    
        return false;
    }
    return true;
}

function C_exibeDivSubtitleCampo(campo){
    var div = campo;
    while(div != null && div.nodeName != 'DIV' && jQuery(div).attr("subtitleDiv") != "true"){
        div = div.parentNode;
    }
    if(div != null) {
        IH_toogleDiv(div);
        return true;
    }
    return false;
}

/*
 * Mostra a mensagem de campo obrigatorio
 */
function C_mostreMsgCampoObrigatorio(rotulo) {
    alert(msgKey("label.js.campoDevePreenchido", rotulo));
}

/*
 * Mostra a mensagem de campo com valor duplicado
 */
function C_mostreMsgValorCampoDuplicado(rotulo) {
   alert(msgKey("label.js.valoresDuplicados",rotulo));
}

function C_mostraHint(event, msg) {
    var objBody = document.getElementsByTagName("BODY")[0];
    var objDiv = document.createElement("DIV");
    objDiv.id = "hint";
    objDiv.className = "hint";
    objDiv.style.visibility = "visible";
    objDiv.style.position = 'absolute';
    objDiv.style.left = (event.clientX + document.body.scrollLeft + 10) 
+ "px";
    objDiv.style.top = event.clientY + document.body.scrollTop + "px";
    objBody.appendChild(objDiv);
    var objText = document.createTextNode(msg);
    objDiv.appendChild(objText);
}

function C_escondeHint() {
    var objLayer = document.getElementById("hint");
    if(objLayer != null)
        objLayer.parentNode.removeChild(objLayer);
}

function C_moveHint(event) {
    var objHint = document.getElementById("hint");
    if(objHint != null){
        objHint.style.left = (event.clientX + document.body.scrollLeft + 
10) + "px";
        objHint.style.top = event.clientY + document.body.scrollTop + "px";
    }
}

function C_OFC(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
		ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
	}
}

/**
 * Valida se o input select de multipla seleï¿½ï¿½o foi preenchido
 * @param obj
 */
function C_validaISMS(obj) {
	var nameField = obj.getAttribute('input-select') + 'SelectedEntitiesList';
	return  jQuery('#'+nameField).val().trim() == '' && obj.value.trim() == '';
}

/**
 * Verifica se ï¿½ um input select de multipla seleï¿½ï¿½o
 * 
 * @param obj
 * @return bool
 */
function C_isISMLSon(obj) {
	return obj.getAttribute('input-select') != null && jQuery('#'+obj.getAttribute('input-select')).attr('multiplaselecao') == 'true';
}/** 
 * Retorna TRUE se o CNPJ for vï¿½lido .
 */
function CCNPJ_isCNPJValido(strCNPJ) {
    var strCNPJ = C_EliminaMascaraCPFCNPJ(strCNPJ);
    if (strCNPJ == "") {
        return true;
    } else if (String(strCNPJ).length != 14) {
        return false;
    }    
    var cnpj = strCNPJ;
    var strDV = strCNPJ.substr(12, 2);
    var intDigito = 0;
    var strControle = "";
    var strMultiplicador = "543298765432";    
    var strCNPJ = strCNPJ.substr(0, 12);
    var intSoma=null;
    
    for (var j=1; j<=2; j++) {
        var intSoma = 0;
        for (var i=0; i<=11; i++) {
            intSoma += (parseInt(strCNPJ.substr(i, 1), 10) * parseInt(strMultiplicador.substr(i, 1), 10));
        }
        if (j == 2) {
            intSoma += (2 * intDigito);
        }
        intDigito = (intSoma * 10) % 11;
        if (intDigito == 10) {
            intDigito = 0;
        }
        strControle += intDigito.toString();
        strMultiplicador = "654329876543";
    }

    if (strControle != strDV) {
        return false;
    }
	//utilizando o cnpj(valor - 99999999999962) ao invez de strCNPJ(valor - 999999999999), 
    //pois estava gerando erros em cnpj como 99.999.999/9999-62
    var charOld = cnpj.charAt(0);
    var todosNumsIguais = false;
    var tamanhoCnpj = String(cnpj).length;
    
    for (var i=1;i<tamanhoCnpj;i++) {
        var todosNumsIguais = (charOld == cnpj.charAt(i));
        if (!todosNumsIguais) {
            return true; 
        } else {
            charOld = cnpj.charAt(i);
        }
    }
    return false;
}

/**
 * Verifica se o valor do campo ï¿½ vï¿½lido
 */
function CCNPJ_verificaValor(ctrl) {
    //Se nï¿½o for vï¿½lido, limpa o campo e mostra uma mensagem
    if (!CCNPJ_isCNPJValido(ctrl.value)) {
        //alert (msgKey("label.js.cnpjInvalido",ctrl.value));
        //ctrl.focus();
        if(ctrl.className.indexOf('erro')==-1){
        	ctrl.className=ctrl.className+' erro';
        }
        return false;
    }
    if(ctrl.className.indexOf('erro')!=-1){
      	ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
    }

    if (ctrl.value.length == 14 && ctrl.value.search('\\.') == -1 && ctrl.value.search('/') == -1) {
    	ctrl.value = CCNPJ_formateValue(ctrl.value);
    }
    
    return true;
}

function CCNPJ_formateValue(cpfWithoutFormat) {
	return cpfWithoutFormat.slice(0,2) + '.' + cpfWithoutFormat.slice(2,5) + '.' + cpfWithoutFormat.slice(5,8) + '/' + cpfWithoutFormat.slice(8,12) + '-' + cpfWithoutFormat.slice(12);
}

/** 
 * Tratamento de digitaï¿½ï¿½o no componente.
 */
function CCNPJ_KPS(ctrl, event) {
    ctrl.setAttribute("formato","00.000.000/0000-00");
    CM_KPS(ctrl, event);
}

/**
 * Trata a digitaï¿½ï¿½o no campo.
 */
function CCNPJ_KDN(ctrl, event) {
    ctrl.setAttribute("formato","00.000.000/0000-00");
    CM_KDN(ctrl, event);
}

/** Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos **/
function CCNPJ_BLR(ctrl) {
    CCNPJ_verificaValor(ctrl);
}

function CCNPJ_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		C_mostraHint(e, msgKey('label.js.cnpjInvalido',ctrl.value));
	}
}

function CCNPJ_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CCNPJ_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}
/** 
 * Retorna TRUE se o CPF for vï¿½lido 
 */
function CCPF_isCPFValido(cpf) {
    var cpf = C_EliminaMascaraCPFCNPJ(cpf);
    if (cpf == "") {
        return true;
    } else if (String(cpf).length != 11) {
        return false;
    }
    var rcpf1 = cpf.substr(0,9);
    var rcpf2 = cpf.substr(9,2);
    var d1 = 0;
    for (var i=0; i<9; i++) {
        d1 += rcpf1.charAt(i)*(10-i);
    }
    d1 = 11 - (d1 % 11);
    if (d1 > 9) {
        d1 = 0;
    }
    if (rcpf2.toString().charAt(0) != d1.toString().charAt(0)) {
        return false;
    }
    d1 *= 2;
    for (i=0; i<9; i++) {
        d1 += rcpf1.charAt(i)*(11-i);
    }
    d1 = 11 - (d1 % 11);
    if (d1 > 9) {
        d1 = 0;
    }
    if (rcpf2.toString().charAt(1) != d1.toString().charAt(0)) {
        return false;
    }
    var charOld = cpf.charAt(0);
    var todosNumsIguais = false;
    
    var cpfTamnho = String(cpf).length;
    
    for (var i=1;i<cpfTamnho;i++) {
        var todosNumsIguais = (charOld == cpf.charAt(i));
        if (!todosNumsIguais) {
            return true; 
        } else {
            charOld = cpf.charAt(i);
        }
    }
    return false;
}

/**
 * Verifica se o valor do campo ï¿½ vï¿½lido
 */
function CCPF_verificaValor(ctrl) {
	//remove todos os espaï¿½os em branco
	ctrl.value = remover_espacos(ctrl.value);
    //se nï¿½o for vï¿½lido, limpa o campo e mostra uma mensagem
    if (!CCPF_isCPFValido(ctrl.value)) {
        //alert (msgKey("label.js.cpfInvalido",ctrl.value));
        //ctrl.focus();
        if(ctrl.className.indexOf('erro')==-1){
        	ctrl.className=ctrl.className+' erro';
        }
        return false;
    }
    if(ctrl.className.indexOf('erro')!=-1){
      	ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
    }
    
    if (ctrl.value.length == 11 && ctrl.value.search('\\.') == -1) {
    	ctrl.value = CCPF_formateValue(ctrl.value);
    }
    
    return true;
}

/**
 * @param cpfWithoutFormat = cpf sem formataï¿½ï¿½o, somente nï¿½meros
 */
function CCPF_formateValue(cpfWithoutFormat) {
	return cpfWithoutFormat.slice(0,3) + '.' + cpfWithoutFormat.slice(3,6) + '.' + cpfWithoutFormat.slice(6,9) + '-' + cpfWithoutFormat.slice(9);
}

/** 
 * Tratamento de digitaï¿½ï¿½o no componente.
 */
function CCPF_KPS(ctrl, event) {
    ctrl.setAttribute("formato","000.000.000-00");
    CM_KPS(ctrl, event);
}

/**
 * Trata a digitaï¿½ï¿½o no campo.
 */
function CCPF_KDN(ctrl, event) {
    ctrl.setAttribute("formato","000.000.000-00");
    CM_KDN(ctrl, event);
}

/** Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos **/
function CCPF_BLR(ctrl) {
	CCPF_verificaValor(ctrl);
}

function CCPF_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		C_mostraHint(e, msgKey('label.js.cpfInvalido',ctrl.value));
	}
}

function CCPF_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CCPF_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}

function remover_espacos(str){
    var r = "";
    var strTamanho = str.length;
    
    for(var i = 0; i < strTamanho; i++){
      if(str.charAt(i) != ' ')
        r += str.charAt(i);
   }
  return r;
}
//Criado para resolver o problema do onchange do firefox.
var oldValueSPW_CD;
var msgErro = 'label.js.dataInvalida';

/**
 * Retorna a data como um Array de 3 posiï¿½ï¿½es contendo:
 * [0] = DD, [1] = MM, [2] = AAAA
 */
function CD_getDataSplit(texto) {
    var dataSplit = texto.split("/");
    var numBarrasCompletar = 3 - dataSplit.length;
    for (nPosData=0;nPosData<numBarrasCompletar;nPosData++) {
        var texto = texto + "/";
    }
    if (numBarrasCompletar > 0) {
        dataSplit = texto.split("/");
    }
    return dataSplit;
}

/**
 * Retorna a data formatada. Caso a data esteja incompleta, retorna a data
 * de forma completa.
 */
function CD_getValorFormatado(texto) {
    if (texto == "") {
        return "";
    }
    //Inicializa os valores da variï¿½veis de controle
    var dia = 0;
    var mes = 0;
    var ano = 0;
    var dataAtual = new Date();
    //Pega os valores do dia, mï¿½s e ano
    var dataSplit = CD_getDataSplit(texto);
    //Formata o dia
    dia = Number(dataSplit[0]);
    if (dia == 0 || isNaN(dia)) {
        dia = dataAtual.getDate();
    }
    if (String(dia).length == 1) {
        dia = "0" + dia;
    }
    //Formata o mï¿½s
    mes = Number(dataSplit[1]);
    if (mes == 0 || isNaN(mes)) {
        mes = dataAtual.getMonth()+1; //getMonth() - 0 a 11
    }
    if (String(mes).length == 1) {
        mes = "0" + mes;
    }
    //Formata o ano
    ano = dataSplit[2];
    if ((dataSplit[2] != "00") && (Number(ano) == 0) || isNaN(ano)) {
        ano = dataAtual.getFullYear();
    } else if (String(dataSplit[2]).length <= 2) {
        if (String(ano).length == 1) {
            ano = "0" + ano;
        }
        inicioAno = String(dataAtual.getFullYear()).substr(0,2);
        ano = Number(inicioAno + ano);
        if ((ano - 50) >= dataAtual.getFullYear()) {
            ano = ano - 100;
        }
    }
    return dia + "/" + mes + "/" + ano;
}

/** 
 * Retorna uma mensagem de erro caso o formato do campo nï¿½o for vï¿½lido.
 */
function CD_isFormatoValido(textoDigitado) {
    if (textoDigitado == "") {
        return "";
    }
    //Pega os valores do dia, mï¿½s e ano
    var dataSplit = CD_getDataSplit(textoDigitado);
    var dia = Number(dataSplit[0]);
    var mes = Number(dataSplit[1]);
    var ano = Number(dataSplit[2]);
    //Valida a data
    if (isNaN(dia) || isNaN(mes) || isNaN(ano)) {
        return "A data digitada ï¿½ invï¿½lida.";
    }
    // Verifica se ï¿½ ano bissexto
    var bissexto = ((ano % 4 == 0) && (ano % 100 != 0)) || (ano % 400 == 0);
    //Verifica se o ano ï¿½ vï¿½lido
    var min_ano = 1753; //Menor ano: SQLServer=1753, DB2=0001, Oracle=-4712, Informix=0001
    //if (ano > 99 && ano < min_ano) {
    if (ano < min_ano) {
        return "O ano informado deve ser maior que " + min_ano + ".";
    }
    if (ano > 9999) {
    	return "A data digitada ï¿½ invï¿½lida.";
    }
    if (dia < 1 || mes < 1) {
    	return "A data digitada ï¿½ invï¿½lida.";
    }
    //verifica se o mï¿½s ï¿½ vï¿½lido
    if (mes > 12) {
        return "O mï¿½s nï¿½o pode ser maior que 12.";
    }
    //verifica se o dia ï¿½ valido
    if ((mes == 2) && (bissexto) && (dia > 29)) {
        return "O mï¿½s " + mes + " nï¿½o pode ter mais que 29 dias.";
    }
    if ((mes == 2) && (!bissexto) && (dia > 28)) {
        return "O mï¿½s " + mes + " nï¿½o pode ter mais que 28 dias.";
    }
    if ((dia > 31) && ((mes == 1) || (mes == 3) || (mes == 5) || (mes == 7) || (mes == 8) || (mes == 10) || (mes == 12))) {
        return "O mï¿½s " + mes + " nï¿½o pode ter mais que 31 dias.";
    }
    if ((dia > 30) && ((mes == 4) || (mes == 6) || (mes == 9) || (mes == 11))) {
        return "O mï¿½s " + mes + " nï¿½o pode ter mais que 30 dias.";
    }
    return "";
}

/**
  * verifica se o texto exitentes em "ctrl" ï¿½ uma data vï¿½lida.
  */
function CD_verificaValor(ctrl) {

    var name = '#' + ctrl.name + '_tpAgendamento';
    var $name = jQuery(name);
    if ($name[0]) {
        return true;
    }
	
    //formata o campo data    
    var valordigitado = CD_getValorFormatado(ctrl.value);
    ctrl.value = valordigitado;
    //verifica se o texto ï¿½ vï¿½lido
    var msgformato = CD_isFormatoValido(valordigitado);
    //se nï¿½o for vï¿½lido, mostra uma mensagem
    if (msgformato != "") {
        //alert (msgformato + msgKey("label.js.valorDigitado","") + valordigitado + "\".");
        //ctrl.focus();
        if(ctrl.className.indexOf('erro')==-1){
        	ctrl.className=ctrl.className+' erro';
        }
        
        msgErro = 'label.js.dataInvalida';
        	
        return false;
    }
    if(ctrl.className.indexOf('erro')!=-1){
      	ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
    }
    return true;
}
/**
 * trata a entrada de teclas de controle de modificacao de conteudo. ctrl-v, shitf-ins, ctrl-x.
 */
function CD_KDN(ctrl, event){
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
}
/** 
 * Tratamento de digitaï¿½ï¿½o no componente 
 */
function CD_KPS(ctrl, event) {
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
	else//Nas situaï¿½ï¿½es abaixo nï¿½o deve fazer validaï¿½ï¿½o nï¿½o faz nada
		if (C_NaoPodeProcessarOnKeyPress(ctrl, event)) {
			return;
		}
    //inicializa as variï¿½veis de controle
    tecla = C_TeclaDigitada(event);
    //aceita numeros e a barra
    if (!( (tecla >= 48 && tecla <= 57) || tecla == 47)) {        
        C_CancelaEvento(event);
        return;            
    }
    //pega o texto que estï¿½ sendo digitado
    textoDigitado = C_getTextoDigitado(ctrl, String.fromCharCode(tecla));
    //Pega os valores do dia, mï¿½s e ano
    dataSplit = CD_getDataSplit(textoDigitado);
    //Verifica se nï¿½o existe mais que duas barras
    if (dataSplit.length > 3) {
        C_CancelaEvento(event);
        return;            
    }
    //completa as barras
    pos = C_getPosTextoDigitado(ctrl);
    if ( tecla != 47 && String(textoDigitado).length == pos+1 &&
         (String(dataSplit[0]).length == 3 || String(dataSplit[1]).length == 3) ) { 
        ctrl.value = ctrl.value + "/";
    } else {
        //verifica o formato do dia/mes/ano
        if ( (String(dataSplit[0]).length > 2) || (String(dataSplit[1]).length > 2) || (String(dataSplit[2]).length > 4) ) {
            C_CancelaEvento(event);
            return;            
        }
    }
}

/** 
  * Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos 
  */
function CD_BLR(ctrl) {
	var valueBeforeBLR = ctrl.value;
    //verifica se o texto existente no campo ï¿½ vï¿½lido
    CD_verificaValor(ctrl);
    
    if (CD_verificaValor(ctrl) && ctrl.value != '') {
    	CD_posValidacao(ctrl);
    }

    //Adicionado para arrumar o bug de nï¿½o chamar o onchange no firefox.
    if(jQuery.browser.mozilla){    	
    	if(oldValueSPW_CD != ctrl.value && valueBeforeBLR.length != 10){     				    	
    		//Criando o evento onchange pois fazendo sï¿½ o ctrl.onchange() o event ia nulo
			var chgEvent = document.createEvent("HTMLEvents");
			chgEvent.initEvent("change", true, true);
			ctrl.dispatchEvent(chgEvent);
    	}    
    }
}

function internal_validatePeriod(divPeridoId) {
	if (jQuery.trim( jQuery('#'+divPeridoId+' :input')[0].value) != "" &&  jQuery.trim( jQuery('#'+divPeridoId+' :input')[1].value) != "") {
		if (comparaData(jQuery('#'+divPeridoId+' :input')[0].value, jQuery('#'+divPeridoId+' :input')[1].value) > 0) {
			jQuery('#'+divPeridoId+' :input').addClass(' erro');
			msgErro = 'label.js.periodoInvalido';
		}else{
			jQuery('#'+divPeridoId+' :input').removeClass(' erro');
		}
	}
}

function CP_BLR(divPeridoId) {
	internal_validatePeriod(divPeridoId);
}

function CP_CNG(divPeridoId) {
	internal_validatePeriod(divPeridoId);
}

function internal_validateIntPeriod(divIntPeridoId) {
	if (jQuery.trim( jQuery('#'+divIntPeridoId+' :input')[0].value) != "" &&  jQuery.trim( jQuery('#'+divIntPeridoId+' :input')[1].value) != "") {
		if (jQuery('#'+divIntPeridoId+' :input')[0].value > jQuery('#'+divIntPeridoId+' :input')[1].value) {
			jQuery('#'+divIntPeridoId+' :input').addClass(' erro');
			msgErro = 'label.js.periodoInvalido';
		} else {
			jQuery('#'+divIntPeridoId+' :input').removeClass(' erro');
		}
	}
}

function CIP_BLR(divIntPeridoId) {
	internal_validateIntPeriod(divIntPeridoId);
}

function CIP_CNG(divIntPeridoId) {
	internal_validateIntPeriod(divIntPeridoId);
}



function CD_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		C_mostraHint(e, msgKey(msgErro,ctrl.value));
	}
}

function CD_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CD_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}

function CD_OFC(ctrl, event){
	oldValueSPW_CD = ctrl.value;
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
		ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
	}
	ctrl.select();
}

function CD_posValidacao(ctrl) {
}
/** 
 * Retorna uma mensagem de erro caso o formato do campo nï¿½o for vï¿½lido.
 * Pego de "http://javascript.internet.com/forms/email-address-validation.html"
 */
function CEMAIL_isFormatoValido(textoDigitado) {
    if (textoDigitado == "") {
        return "";
    }

    var checkTLD=1;
    var emailPat=/^(.+)@(.+)$/;
    var specialChars="\\(\\)><@,;:\\\\\\\"\\.\\[\\]";
    var validChars="\[^\\s" + specialChars + "\]";
    var quotedUser="(\"[^\"]*\")";
    var ipDomainPat=/^\[(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\]$/;
    var atom=validChars + '+';
    var word="(" + atom + "|" + quotedUser + ")";
    var userPat=new RegExp("^" + word + "(\\." + word + ")*$");
    var domainPat=new RegExp("^" + atom + "(\\." + atom +")*$");
    var matchArray=textoDigitado.match(emailPat);
    if (matchArray==null) {
        return 'O formato do endereï¿½o de e-mail nï¿½o ï¿½ vï¿½lido. Verifique se ele tem o formato "usuario@dominio".';
    }
    var user=matchArray[1];
    var domain=matchArray[2];
    var userTamanho = user.length;
    for (var i=0; i<userTamanho; i++) {
        if (user.charCodeAt(i)>127) {
            return "O endereï¿½o de e-mail possui caracteres invï¿½lidos";
        }
    }
    var domainTamanho = domain.length;
    for (var i=0; i<domainTamanho; i++) {
        if (domain.charCodeAt(i)>127) {
            return "O endereï¿½o de e-mail possui caracteres invï¿½lidos";
        }
    }
    if (user.match(userPat)==null) {
        return 'O formato do usuï¿½rio informado no endereï¿½o de e-mail nï¿½o ï¿½ valido.';
    }
    var IPArray=domain.match(ipDomainPat);
    if (IPArray!=null) {
        for (var i=1;i<=4;i++) {
            if (IPArray[i]>255) {
                return 'O endereï¿½o IP informado no endereï¿½o de e-mail nï¿½o ï¿½ valido.';
            }
        }
        return "";
    }
    var atomPat=new RegExp("^" + atom + "$");
    var domArr=domain.split(".");
    var len=domArr.length;
    for (i=0;i<len;i++) {
        if (domArr[i].search(atomPat)==-1) {
            return 'O formato do domï¿½nio informado no endereï¿½o de e-mail nï¿½o ï¿½ vï¿½lido.';
        }
    }
    if (len<2) {
        return 'O domï¿½nio informado no endereï¿½o de e-mail deve possuir pelo menos duas partes. Por exemplo: "usuario@empresa.com.br".';
    }
    return "";
}


/**
  * verifica se o texto exitentes em "ctrl" ï¿½ um e-mail vï¿½lido.
  */
function CEMAIL_verificaValor(ctrl) {
    var valordigitado = ctrl.value;
    //verifica se o texto ï¿½ vï¿½lido
    var msgformato = CEMAIL_isFormatoValido(valordigitado);
    //se nï¿½o for vï¿½lido, mostra uma mensagem
    if (msgformato != "") {
        //alert (msgformato + msgKey("label.js.valorDigitado","") + valordigitado + '\".');
        //ctrl.focus();
        if(ctrl.className.indexOf('erro')==-1){
        	ctrl.className=ctrl.className+' erro';
        }
        return false;
    }
    if(ctrl.className.indexOf('erro')!=-1){
      	ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
    }
    return true;
}

/** 
  * Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos 
  */
function CEMAIL_BLR(ctrl) {
    //verifica se o texto existente no campo ï¿½ vï¿½lido
    CEMAIL_verificaValor(ctrl);
}

function CEMAIL_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		C_mostraHint(e, msgKey('label.js.emailInvalido',ctrl.value));
	}
}

function CEMAIL_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CEMAIL_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}
/** 
 * Retorna uma mensagem de erro caso o formato do campo nï¿½o for vï¿½lido.
 */
function CFD_isFormatoValido(textoDigitado) {
    if (textoDigitado == "") {
        return "";
    }
    //Pega os valores do dia, mï¿½s e ano
    dataSplit = CD_getDataSplit(textoDigitado);   
    mes = Number(dataSplit[0]);
    ano = Number(dataSplit[1]);
    //Valida a data
    if (isNaN(mes) || isNaN(ano)) {
        return "A data digitada ï¿½ invï¿½lida.";
    }
    
    min_ano = 1753; //Menor ano: SQLServer=1753, DB2=0001, Oracle=-4712, Informix=0001    
    if (ano < min_ano) {
        return "O ano informado deve ser maior que " + min_ano + ".";
    }
    //verifica se o mï¿½s ï¿½ vï¿½lido
    if (mes > 12) {
        return "O mï¿½s nï¿½o pode ser maior que 12.";
    }   
    return "";
}

/**
  * verifica se o texto exitentes em "ctrl" ï¿½ uma data vï¿½lida co o formato MM/yyyy.
  */
function CFD_verificaValor(ctrl) {
    //formata o campo data    
    valordigitado = CFD_getValorFormatado(ctrl.value);
    ctrl.value = valordigitado;
    //verifica se o texto ï¿½ vï¿½lido
    msgformato = CFD_isFormatoValido(valordigitado);
    //se nï¿½o for vï¿½lido, mostra uma mensagem
    if (msgformato != "") {        
        if(ctrl.className.indexOf('erro')==-1){
        	ctrl.className=ctrl.className+' erro';
        }
        return false;
    }
    if(ctrl.className.indexOf('erro')!=-1){
      	ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
    }
    return true;
}

/**
 * Retorna a data formatada. Caso a data esteja incompleta, retorna a data
 * de forma completa.
 */
function CFD_getValorFormatado(texto) {
    if (texto == "") {
        return "";
    }
    //Inicializa os valores da variï¿½veis de controle    
    mes = 0;
    ano = 0;
    dataAtual = new Date();
    //Pega os valores do mï¿½s e ano
    dataSplit = CD_getDataSplit(texto);        
    //Formata o mï¿½s
    mes = Number(dataSplit[0])
    if (mes == 0) {
        mes = dataAtual.getMonth()+1; //getMonth() - 0 a 11
    }
    if (String(mes).length == 1) {
        mes = "0" + mes;
    }
    //Formata o ano
    ano = dataSplit[1]
    if ((dataSplit[1] != "00") && (Number(ano) == 0)) {
        ano = dataAtual.getFullYear();
    } else if (String(dataSplit[1]).length <= 2) {
        if (String(ano).length == 1) {
            ano = "0" + ano;
        }
        inicioAno = String(dataAtual.getFullYear()).substr(0,2);
        ano = Number(inicioAno + ano);
        if ((ano - 50) >= dataAtual.getFullYear()) {
            ano = ano - 100;
        }
    }
    return mes + "/" + ano;
}

/**
 * Retorna a data como um Array de 2 posiï¿½ï¿½es contendo:
 * [0] = MM, [1] = AAAA
 */
function CFD_getDataSplit(texto) {
    dataSplit = texto.split("/");
    numBarrasCompletar = 2 - dataSplit.length;
    for (nPosData=0;nPosData<numBarrasCompletar;nPosData++) {
        texto = texto + "/";
    }
    if (numBarrasCompletar > 0) {
        dataSplit = texto.split("/");
    }
    return dataSplit;
}
/**
 * trata a entrada de teclas de controle de modificacao de conteudo. ctrl-v, shitf-ins, ctrl-x.
 */
function CFD_KDN(ctrl, event){
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
}
/** 
 * Tratamento de digitaï¿½ï¿½o no componente 
 */
function CFD_KPS(ctrl, event) {
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
	else//Nas situaï¿½ï¿½es abaixo nï¿½o deve fazer validaï¿½ï¿½o nï¿½o faz nada
	    if (C_NaoPodeProcessarOnKeyPress(ctrl, event)) {
	        return;
	    }
    //inicializa as variï¿½veis de controle
    tecla = C_TeclaDigitada(event);
    //aceita numeros e a barra
    if (!( (tecla >= 48 && tecla <= 57) || tecla == 47)) {        
        C_CancelaEvento(event);
        return;            
    }
    //pega o texto que estï¿½ sendo digitado
    textoDigitado = C_getTextoDigitado(ctrl, String.fromCharCode(tecla));
    //Pega os valores do dia, mï¿½s e ano
    dataSplit = CFD_getDataSplit(textoDigitado);
    //Verifica se nï¿½o existe mais que duas barras
    if (dataSplit.length > 2) {
        C_CancelaEvento(event);
        return;            
    }
    //completa as barras
    pos = C_getPosTextoDigitado(ctrl);
    if ( tecla != 47 && String(textoDigitado).length == pos+1 &&
         (String(dataSplit[0]).length == 3)) { 
        ctrl.value = ctrl.value + "/";
    } else {
        //verifica o formato do mes/ano
        if ( (String(dataSplit[0]).length > 2) || (String(dataSplit[1]).length > 4)) {
            C_CancelaEvento(event);
            return;            
        }
    }
}

/** 
  * Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos 
  */
function CFD_BLR(ctrl) {
    //verifica se o texto existente no campo ï¿½ vï¿½lido
    CFD_verificaValor(ctrl);
}

function CFD_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		C_mostraHint(e, msgKey('label.js.dataInvalida',ctrl.value));
	}
}

function CFD_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CFD_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}

/** 
 * Retorna a data concatenada com o primeiro ou ï¿½ltimo dia do mï¿½s desejado.
 */
function appendDay(valor, dia) {
    if (valor == "") {
        return "";
    }else{
    	var appendDay = "";
    	if(dia == "FIRST"){
    		appendDay = "01/";
    	}else{    	
		    //Pega os valores do dia, mï¿½s e ano
		    dataSplit = CD_getDataSplit(valor);   
		    var mes = Number(dataSplit[0]);
		    var ano = Number(dataSplit[1]);		    
		    // Verifica se ï¿½ ano bissexto
		    var bissexto = ((ano % 4 == 0) && (ano % 100 != 0)) || (ano % 400 == 0);       
		    
		    //verifica se o dia ï¿½ valido
		    if ((mes == 2) && (bissexto)) {
		        appendDay = "29/";
		    }
		    if ((mes == 2) && (!bissexto)) {
		        appendDay = "28/";
		    }
		    if ((mes == 1) || (mes == 3) || (mes == 5) || (mes == 7) || (mes == 8) || (mes == 10) || (mes == 12)) {
		        appendDay = "31/";
		    }
		    if ((mes == 4) || (mes == 6) || (mes == 9) || (mes == 11)) {
		        appendDay = "30/";
		    }		    
	    }
	    return (appendDay + valor);
	    
	}
}
/*
if (this.readOnly && this.style.backgroundColor.toUpperCase() != escurecerCor(corSelecionada)) {
    this.style.backgroundColor = corDesabilitada;
}
*/
function CGRID_BLR(ctrl) {
    if (ctrl.readOnly != true) {
        mudarCorLinha(ctrl, "blur");
        //setLarguraBorda(ctrl, "0px")
    }
}

/**
 * Tratamento do evento OnFocus.
 */
function CGRID_FCS(ctrl) {
    if (ctrl.readOnly != true) {    	
    	mudarCorLinha(ctrl, "focus");
        //setLarguraBorda(ctrl, "2px")    	    	    	        			
    }
}

function CGRID_CHG(ctrl) {
    var grid = getGrid(ctrl);
    var index = getFieldIndex(ctrl.id);
    changeActionGrid(grid, index, "U");
}
	
/**
 * Tratamento do evento OnKeyDown.
 */
function CGRID_KDN(ctrl, event){
    if (ctrl.nodeName == "SELECT"){
        return;
    }
    var tecla = event.keyCode;
    if (tecla == 38) {
        inc = -1
    } else if (tecla == 40) {
        inc = 1
    }
    if (tecla == 40 || tecla == 38) {
        var grid = getGrid(ctrl);
        var objTR = ctrl;
        while(objTR.tagName != 'TR' && objTR != null){
        	objTR = objTR.parentNode;
        }
        var trs = grid.getElementsByTagName('TR');
        j = 0;
        while(trs[j].getAttribute('id') != objTR.getAttribute('id')){
        	j++;
        }
        var trProximo = trs[j+inc];
        var index = new Number(getFieldIndex(trProximo.getAttribute('id')));
        if (index >= 0) {
            var nome = getFieldName(ctrl.getAttribute('id'))
            var internalColName = getInternalColName(ctrl, nome);
            
            index = getFieldIndex(trProximo.getAttribute('id'));
            var idProx = getColumnId(ctrl, internalColName, index);
            var objProximo = document.getElementById(idProx);
            while (objProximo != null) {
                if ((objProximo.readOnly != true) && (objProximo.getAttribute('id').lastIndexOf("_-1") != objProximo.getAttribute('id').length - 3)) {
                    objProximo.focus();
                    return;
                }
                index = index + inc;
                idProx = getColumnId(ctrl, internalColName, index);
                objProximo = document.getElementById(idProx);
            }
        }
    }
}
//Criado para resolver o problema do onchange do firefox.
var oldValueSPW_CH;
var mostraSegundos = false;

/**
 * Retorna a hora como um Array de 3 posiï¿½ï¿½es contendo:
 * [0] = HH, [1] = MM, [2] = SS
 */
function CH_getHoraSplit(texto) {
    var horaSplit = texto.split(":");
    var control = (mostraSegundos ? 3 : 2);
    var numBarrasCompletar = control - horaSplit.length;
    for (nPosHora=0; nPosHora<numBarrasCompletar;nPosHora++) {
        var texto = texto + ":";
    }
    if (numBarrasCompletar > 0) {
    	horaSplit = texto.split(":");
    }
    return horaSplit;
}

/**
 * Retorna a hora formatada. Caso a hora esteja incompleta, retorna a hora
 * de forma completa.
 */
function CH_getValorFormatado(texto) {
    if (texto == "") {
        return "";
    }
    //Inicializa os valores da variï¿½veis de controle
    var hora = 0;
    var minuto = 0;
    var segundo = 0;
    var dataAtual = new Date();
    //Pega os valores da hora, minuto, segundo
    var horaSplit = CH_getHoraSplit(texto);
    //Formata a hora
    hora = Number(horaSplit[0]);
    if(isNaN(hora)){
    	hora = horaSplit[0];
    }
    if (String(hora).length == 1) {
    	hora = "0" + hora;
    }
    //Formata o minuto
    minuto = Number(horaSplit[1]);
    
    if(isNaN(minuto)){
    	hora =  horaSplit[1];
    }
    
    if (minuto == 0) {
    	minuto = "00";
    }
    if (String(minuto).length == 1) {
    	minuto = "0" + minuto;
    }
    
    if (mostraSegundos) {
	    //Formata o segundo
	    segundo = horaSplit[2];
	    
	    if(isNaN(segundo)){
	    	hora =  horaSplit[2];
	    }
	    
	    if (segundo == 0) {
	    	segundo = "00";
	    }
	    if (String(segundo).length == 1) {
	    	segundo = "0" + segundo;
	    }
    }
    return hora + ":" + minuto + (mostraSegundos ? ":" + segundo : "");
}

/** 
 * Retorna uma mensagem de erro caso o formato do campo nï¿½o for vï¿½lido.
 */
function CH_isFormatoValido(textoDigitado) {
    if (textoDigitado == "") {
        return "";
    }
    //Pega os valores da hora, minutos e segundos
    var horaSplit = CH_getHoraSplit(textoDigitado);
    var hora = Number(horaSplit[0]);
    var min = Number(horaSplit[1]);
    //Valida a hora
    if (isNaN(hora) || isNaN(min)) {
        return "A hora digitada ï¿½ invï¿½lida.";
    }

    if (hora < 0 || hora > 23) {
        return "O hora informado deve ser entre 0 e 23.";
    }

    if (min < 0 || min > 60) {
        return "Os minutos devem ser entre 0 e 60.";
    }
    
    if (mostraSegundos) {
    	var seg = Number(horaSplit[2]);
    	if (seg < 0 || seg > 60) {
            return "Os segundos devem ser entre 0 e 60.";
        }
    	
    	if (isNaN(seg)) {
            return "A hora digitada ï¿½ invï¿½lida.";
        }
    }

    return "";
}

/**
  * verifica se o texto exitentes em "ctrl" ï¿½ uma hora vï¿½lida.
  */
function CH_verificaValor(ctrl) {

	mostraSegundos = jQuery('[name='+ctrl.name+']').attr('segundos') == 'TRUE';
    //formata o campo hora    
    var valordigitado = CH_getValorFormatado(ctrl.value);
    ctrl.value = valordigitado;
    //verifica se o texto ï¿½ vï¿½lido
    var msgformato = CH_isFormatoValido(valordigitado);
    //se nï¿½o for vï¿½lido, mostra uma mensagem
    if (msgformato != "") {
        if(ctrl.className.indexOf('erro')==-1){
        	ctrl.className=ctrl.className+' erro';
        }
        return false;
    }
    if(ctrl.className.indexOf('erro')!=-1){
      	ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
    }
    return true;
}

/**
 * trata a entrada de teclas de controle de modificacao de conteudo. ctrl-v, shitf-ins, ctrl-x.
 */
function CH_KDN(ctrl, event){
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
}
/** 
 * Tratamento de digitaï¿½ï¿½o no componente 
 */
function CH_KPS(ctrl, event) {
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
	else//Nas situaï¿½ï¿½es abaixo nï¿½o deve fazer validaï¿½ï¿½o nï¿½o faz nada
		if (C_NaoPodeProcessarOnKeyPress(ctrl, event)) {
			return;
		}
    //inicializa as variï¿½veis de controle
    tecla = C_TeclaDigitada(event);
    //aceita numeros e a barra
    if (!( (tecla >= 48 && tecla <= 57) || tecla == 47)) {        
        C_CancelaEvento(event);
        return;            
    }
    //pega o texto que estï¿½ sendo digitado
    textoDigitado = C_getTextoDigitado(ctrl, String.fromCharCode(tecla));
    //Pega os valores do dia, mï¿½s e ano
    horaSplit = CH_getHoraSplit(textoDigitado);
    //Verifica se nï¿½o existe mais que duas barras
    if (horaSplit.length > 3) {
        C_CancelaEvento(event);
        return;            
    }
    //completa a hora
    pos = C_getPosTextoDigitado(ctrl);
    if ( tecla != 47 && String(textoDigitado).length == pos+1) {
         if (mostraSegundos) {
        	 if ((String(horaSplit[0]).length == 3 || String(horaSplit[1]).length == 3)) {
        		 ctrl.value = ctrl.value + ":";
        	 }
         } else {
        	 if (String(horaSplit[0]).length == 3) {
        		 ctrl.value = ctrl.value + ":";
        	 }
         }
    }
}

/** 
  * Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos 
  */
function CH_BLR(ctrl) {
	var valueBeforeBLR = ctrl.value;
    //verifica se o texto existente no campo ï¿½ vï¿½lido
    CH_verificaValor(ctrl);
    //Adicionado para arrumar o bug de nï¿½o chamar o onchange no firefox.
    if(jQuery.browser.mozilla){    	
    	if(oldValueSPW_CH != ctrl.value && valueBeforeBLR.length != 8){     				    	
    		//Criando o evento onchange pois fazendo sï¿½ o ctrl.onchange() o event ia nulo
			var chgEvent = document.createEvent("HTMLEvents");
			chgEvent.initEvent("change", true, true);
			ctrl.dispatchEvent(chgEvent);
    	}    
    }
}

function CH_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		C_mostraHint(e, msgKey('label.js.horaInvalida',ctrl.value));
	}
}

function CH_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CH_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}

function CH_OFC(ctrl, event){
	oldValueSPW_CH = ctrl.value;
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
		ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
	}
	ctrl.select();
}
//Maisculo = obrigatorio, Minusculo = opcional
mMskAlpha = "L";           // A-Z,a-z 
mMskAlphaOpt = "l";
mMskAlphaNum = "A";        // A-Z,a-z,0-9 
mMskAlphaNumOpt  = "a";
mMskAscii = "C";           // qquer caracter
mMskAsciiOpt = "c";
mMskNumeric = "0";         // 0-9 
mMskNumericOpt = "9";
mMskNumSymOpt = "#";       // + ou - 

/** 
 * Retorna o caracter na posiï¿½ï¿½o "pos" da mï¿½scara se for um literal.
 */
function CM_getIfMaskLiteral(formato, pos) {
    var charDig = formato.charAt(pos);
    if (CM_isLiteralRestrict(charDig)) {
        return charDig;
    }
    return "";
}
/** 
 * Retorna todos caracteres subsequentes a posiï¿½ï¿½o "pos" da mï¿½scara se for um literal.
 */
function CM_getAllMaskLiteral(formato, pos) {
    var charDig = formato.charAt(pos);
    var fullMask = new String("");
    if (CM_isLiteralRestrict(charDig)) {
     do {
      fullMask += charDig;
      pos = pos + 1;
      charDig = formato.charAt(pos);
     } while (CM_isLiteralRestrict(charDig));

     return fullMask;
    }
    return "";
}
function CM_isLiteralRestrict(charDig){
	 return (charDig != mMskAlpha && charDig != mMskAlphaOpt &&
	            charDig != mMskAlphaNum && charDig != mMskAlphaNumOpt &&
	            charDig != mMskAscii && charDig != mMskAsciiOpt &&
	            charDig != mMskNumeric && charDig != mMskNumericOpt &&
	            charDig != mMskNumSymOpt);
}

/** 
 * Retorna TRUE se o caracter "charDig" digitado na posiï¿½ï¿½o "pos" for vï¿½lido.
 */
function CM_isCaracterValido(formato, charDig, pos) {
        var textovalido = false;
        //Verifica se o tamanho do texto ï¿½ vï¿½lido
        if (String(formato).length <= pos) {
            return "O tamanho do texto digitado ï¿½ maior do que o tamanho " +
                "permitido. Tamanho permitido: \"" + 
                String(formato).length + "\".";
        }
        //Verifica se a mï¿½scara ï¿½ vï¿½lida
        
        var mask = formato.charAt(pos);
        if(mask == mMskAsciiOpt || (mask == mMskAscii && charDig != " ")){
        	textovalido = true;
        } else if ((charDig >= "A" && charDig <= "Z") || (charDig >= "a" && charDig <= "z")) {
            textovalido = (mask == mMskAlpha || mask == mMskAlphaOpt || 
                mask == mMskAlphaNum || mask == mMskAlphaNumOpt);
        } else if (charDig >= "0" && charDig <= "9") {
            textovalido = (mask == mMskAlphaNum || mask == mMskAlphaNumOpt ||
                mask == mMskNumeric || mask == mMskNumericOpt);
        } else if (charDig == "+") {
            textovalido = (mask == mMskNumSymOpt);
        } else if (charDig == "-") {
            textovalido = (mask == mMskNumSymOpt || charDig == mask);
        } else if (charDig == " ") {
            textovalido = (mask == mMskAlphaOpt || mask == mMskAlphaNumOpt ||
                mask == mMskNumericOpt || mask == mMskNumSymOpt  || mask == " ");
        } else {
            textovalido = (mask == charDig);
        }
        //Retorna o resultado da verificaï¿½ï¿½o
        if (!textovalido) {
            return "O caracter \"" + charDig + "\" nï¿½o ï¿½ permitido " +
                "na posiï¿½ï¿½o \"" + (pos+1) + "\"";
        } else {
            return "";
        }
}

/** 
 * Retorna o conteï¿½do do campo sem a mï¿½scara.
 */
function CM_getConteudoSemMascara(formato, textodigitado){
	var nTextoSize = String(textodigitado).length;
	var conteudo = "";
	for(var i = 0; i < nTextoSize; i++){
		if(CM_getIfMaskLiteral(formato, i) == ""){
			conteudo = conteudo + textodigitado.charAt(i);
		}
	}
	return conteudo;
}

/** 
 * Aplica a mï¿½scara num conteï¿½do limpo, ou seja, que estï¿½ sem mï¿½scara.
 */
function CM_aplicaMascaraAoConteudo(formato, conteudo){
	var nFormatoSize = String(formato).length;
	var nConteudoSize = String(conteudo).length;
	var nConteudo = 0;
	var valorFinal = "";
	
	for(var i = 0; i < nFormatoSize && nConteudo < nConteudoSize; i++){
		var charLiteral = CM_getIfMaskLiteral(formato, i);
		if(charLiteral == ""){
			valorFinal = valorFinal + conteudo.charAt(nConteudo++);
		}else{
			valorFinal = valorFinal + charLiteral;
		}
	}
	return valorFinal;
}

/** 
 * Aplica o comportamento da propriedade maskAlign.
 */
function CM_ajustaConteudoPeloMaskAlign(ctrl){
	var maskAlign = ctrl.getAttribute("maskAlign");
	var textodigitado = ctrl.value;
	var formato = ctrl.getAttribute("formato");
	var nFormatoSize = String(formato).length;
    var nTextoSize = String(textodigitado).length;
    var dv = ctrl.getAttribute("digitoVerificador");
    
	if(dv && !(nFormatoSize - 2 === nTextoSize) && (nTextoSize > 1)){
		var numeroBase = textodigitado.substring(0, textodigitado.length - 1);
		var digitoVerificador = textodigitado.charAt(textodigitado.length -1); 
		
		ctrl.value = numeroBase + "-" + digitoVerificador;
		
		return;
	}
	
	if(String(maskAlign).toLowerCase() == "right" && textodigitado != ""){		
		var espacos = "";
		for (var i = nTextoSize; i < nFormatoSize; i++){
			espacos = espacos + " ";
		}
		
		textodigitado = espacos + CM_getConteudoSemMascara(formato, textodigitado);
		
		if(nTextoSize > nFormatoSize/2){
			textodigitado = CM_aplicaMascaraAoConteudo(formato, textodigitado);
		}
		
		if(ctrl.value != textodigitado){
			ctrl.value = textodigitado;
		}
	}
}
/*
 * limpa o conteudo de acordo com o formato da mï¿½scara.
 */
function C_limpaConteudoComFormato(formato, conteudo){
	var nConteudoSize = conteudo.length;
	var nConteudo = 0;
	var valorFinal = "";
	
	for(var i = 0; nConteudo < nConteudoSize; ){
		var charAux = conteudo.charAt(nConteudo);
		if(!CM_getIfMaskLiteral(formato, i)){
			if(!CM_isCaracterValido(formato, charAux, i)){
				valorFinal = valorFinal + charAux;
				i++
			}
			nConteudo++;
		}
		else
			i++;
		
	}
	return valorFinal;
}
/** 
 * Retorna TRUE se o formato do "textodigitado" for igual ao formato
 * da mï¿½scara. Esta funï¿½ï¿½o nï¿½o valida a mï¿½scara inteira, somente a parte que o 
 * usuï¿½rio digitou. Se a mï¿½scara exige a digitaï¿½ï¿½o de caracteres ainda nï¿½o digitados
 * esta funï¿½ï¿½o nï¿½o acusa o erro. Para verificar toda a mï¿½scara deve-se usar a 
 * funï¿½ï¿½o CM_isFormatoInteiroValido(formato, textodigitado, maskAlign)
 */
function CM_isFormatoValido(formato, textodigitado) {
    var msgformato = "";
    var nPosTexto = 0;
    while (nPosTexto < String(textodigitado).length && msgformato == "") {
        msgformato = CM_isCaracterValido(formato, textodigitado.charAt(nPosTexto), nPosTexto);
        nPosTexto++;
    }
    return msgformato;  
}

/** 
 * Esta funï¿½ï¿½o deve ser chamada somente pelo onBlur.
 * Ela faz a mesma validaï¿½ï¿½o CM_isFormatoValido faz e adicionalmente tambï¿½m
 * nos caracteres ainda nï¿½o digitados.
 */
function CM_isFormatoInteiroValido(formato, textodigitado, maskAlign) {
	var msgformato = "";
	var nPosTexto = 0;
	var nFormatoSize = String(formato).length;
	var nTextoSize = String(textodigitado).length;
	var i;
	//com o loop abaixo verificando a mascara inteira deve usar este if:
	//if(nFormatoSize > nTextoSize){
	//com o loop abaixo veriricando sï¿½ a mascara digitada deve usar este if:
	if( (nFormatoSize > nTextoSize) && (maskAlign != null && String(maskAlign).toLowerCase() == "right" && nTextoSize > 0)){
		var espacos = "";
		for (var i = nTextoSize; i < nFormatoSize; i++){
			espacos = espacos + " ";
		}
		if(maskAlign == null || String(maskAlign).toLowerCase() != "right"){
			textodigitado = textodigitado + espacos;
		}else{
			textodigitado = espacos + CM_getConteudoSemMascara(formato, textodigitado);
			textodigitado = CM_aplicaMascaraAoConteudo(formato, textodigitado);
		}
	}
	//loop para verificar a mascara inteira
	//while (nPosTexto < nFormatoSize && msgformato == "") {
	//loop para verificar a mascara atï¿½ onde foi digitado (se a condiï¿½ï¿½o deste loop for alterada rever if acima)
    while (nPosTexto < String(textodigitado).length && msgformato == "") {
		msgformato = CM_isCaracterValido(formato, textodigitado.charAt(nPosTexto), nPosTexto);
		nPosTexto++;
	}
	return msgformato;  
}

/**
 * Verifica se valor digitado no campo "ctrl" ï¿½ vï¿½lido.
 */
function CM_verificaValor(ctrl) {
	 var dv = ctrl.getAttribute("digitoVerificador");
	//Trocar para valor da propriedade aceita valor reduzido
	if(dv){
		 if(CM_isFormatoValido(ctrl.getAttribute("formato"), ctrl.value) || ctrl.value.length > 1){
		 	return true;
		 }
	}
	var formato = ctrl.getAttribute("formato");
    //verifica se o texto ï¿½ vï¿½lido
    var msgformato = CM_isFormatoInteiroValido(ctrl.getAttribute("formato"), ctrl.value, ctrl.getAttribute("maskAlign"));
    var valordigitado = ctrl.value;
    var qtdMinCarcteres =  ctrl.getAttribute("minLength");
    
    var textoSemMascara = CM_getConteudoSemMascara(formato, valordigitado);
    
    
    if(formato !== null && formato != ""){
   		 if(ctrl.value != "" && textoSemMascara.length < qtdMinCarcteres){
        	ctrl.className=ctrl.className+' erro';
      	    return false;
     	 }
    }
    
    //se nï¿½o for vï¿½lido, limpa o campo e mostra uma mensagem
    if (msgformato != "") {
        //alert (msgformato + msgKey("label.js.valorDigitado","") + valordigitado + "\".");
        //ctrl.focus();
        if(ctrl.className.indexOf('erro')==-1){
        	ctrl.className=ctrl.className+' erro';
        }
        return false;
    }
    if(ctrl.className.indexOf('erro')!=-1){
      	ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
    }
    return true;
}
    
/** 
 * Tratamento de digitaï¿½ï¿½o no componente.
 */
function CM_KPS(ctrl, event) {
	//Verifica as teclas de controle
    if (C_getDeveInibirTeclasControle(ctrl, event)) {
        C_CancelaEvento(event);
        return;
    }
    if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}else//nas situaï¿½ï¿½es abaixo nï¿½o deve fazer validaï¿½ï¿½o nï¿½o faz nada
    	if (C_NaoPodeProcessarOnKeyPress(ctrl, event)) {
    		return;
    	}
    //pega a tecla que foi digitada
    tecla = C_TeclaDigitada(event);
    //pega posiï¿½ï¿½o do texto digitado.
    pos = C_getPosTextoDigitado(ctrl);
    //pega os dados do texto que estï¿½ sendo digitado
    charDigitado = String.fromCharCode(tecla);
    textoDigitado = C_getTextoDigitado(ctrl, charDigitado);
    formato = ctrl.getAttribute("formato");
    //So permite a digitacao caso esteja no fim do campo
    if (pos < String(formato).length && pos == (String(textoDigitado).length-1)) {
        //Verifica se o formato ï¿½ vï¿½lido
        var msgformato = CM_isFormatoValido(formato, textoDigitado);
        if (msgformato != "") {
            //Verifica se deve completar a mï¿½scara
            var charMask = CM_getAllMaskLiteral(formato, pos);
            if (charMask != "" && C_getSelLength(ctrl) == 0) {
                textoDigitado = ctrl.value + charMask + charDigitado;
                if (CM_isFormatoValido(formato, textoDigitado) == "") {
                    if (jQuery.browser.msie) {
                        range = ctrl.createTextRange();
                        range.move('character', pos);            
                        range.text = charMask;
                    } else {
                        ctrl.value = ctrl.value + charMask;
                        //Sï¿½ permite o onchange se o usuï¿½rio clicou na tecla "TAB"
                        if (ctrl.onchange != null && tecla == 9) {
                            ctrl.onchange(ctrl);
                        }
                    }
                } else {
                  C_CancelaEvento(event);
                  return;
                }
            } else {
                C_CancelaEvento(event);
                return;
            }
        }
    } else {
        //Se nï¿½o tiver uma faixa de seleï¿½ï¿½o ou a posiï¿½ï¿½o do cursor esteja
        //antes do final da mascara, sobrescreve os caracteres
        if (C_getSelLength(ctrl) > 1 || pos > String(formato).length-1) {
            C_CancelaEvento(event);
            return;
        } else {
            textoDigitado = ctrl.value.substr(0, pos) + charDigitado + 
                ctrl.value.substr(pos+1);
            if (CM_isFormatoValido(formato, textoDigitado) == "") {
                if (jQuery.browser.msie) {
                    range = ctrl.createTextRange();
                    range.move('character', pos);            
                    range.moveEnd('character', 1);
                    range.select();
                } else {
                    ctrl.selectionEnd = pos+1;
                }
            } else {
                C_CancelaEvento(event);
                return;
            }
        }
    }
}

/** 
 * Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos 
 */
function CM_BLR(ctrl) {
	//Verifica se o formato do campo ï¿½ vï¿½lido
	CM_ajustaConteudoPeloMaskAlign(ctrl);
	CM_verificaValor(ctrl);
}

/**
 * Trata a digitaï¿½ï¿½o no campo.
 */
function CM_KDN(ctrl, event) {
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
    if (C_getDeveInibirTeclasControle(ctrl, event)) {
        C_CancelaEvento(event);
        return;
    }
}

/**
 * Passa o foco para o prï¿½ximo campo.
 */
function CM_KUP(ctrl, event) {
    focoProxCampo = ctrl.getAttribute("focoProxCampo");
    //Pula para o prï¿½ximo controle
    if (focoProxCampo != null) {
        formato = ctrl.getAttribute("formato");
        pos = C_getPosTextoDigitado(ctrl);
        if (formato.length == ctrl.value.length &&
           pos == ctrl.value.length) {
            ctrlFoco = FF_GetProxCtrl(ctrl);
            if (ctrlFoco != null) {
                ctrlFoco.focus();
            }
        }
    }
}

function CM_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		C_mostraHint(e, msgKey('label.js.valorInvalido',ctrl.value));
	}
}

function CM_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CM_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}
var oldValueSPW_CN;
/** 
 * Retorna o nï¿½mero de casas vï¿½lidas antes da vï¿½rgula.
 */
function CN_getFormatoInt(formato) {
    var formatoInt = formato.replace("," , ".").replace("$","");
    var nPosPonto = formatoInt.indexOf(".");
    if (nPosPonto < 0) {
        return Math.abs(new Number(formatoInt));
    } else {
        return Math.abs(new Number(formatoInt.substr(0, nPosPonto)));
    }
}

/** 
 * Retorna o nï¿½mero de casas vï¿½lidas depois da vï¿½rgula.
 */
function CN_getFormatoDec(formato) {
    var formatoDec = formato.replace("," , ".");
    var nPosPonto = formatoDec.indexOf(".");
    if (nPosPonto < 0) {
        return 0;
    } else {
        return Math.abs(new Number(formatoDec.substr(nPosPonto+1)));
    }
}
    
/** 
 * Retorna o valor mï¿½ximo que pode ser digitado.
 */
function CN_getValorMaximoPermitido(max) {
    max = new Number(max);
    if (isNaN(max)) {
        max = 0;
    }
    return max;
}

function CN_getValorMinimoPermitido(min) {
	min = new Number(min);
    if (isNaN(min)) {
    	min = 0;
    }
    return min;
}
    
/** 
 * Retorna uma flag que indica se pode aceitar valores negativos.
 */
function CN_getPermiteNegativo(formato) {
    return (formato.indexOf("-") == 0);
}

/** 
 * Retorna uma flag que indica se o formato ï¿½ de moeda.
 */
function CN_getFormatarComoMoeda(formato) {
    var posDolar = formato.indexOf("$");
    return (posDolar == 0 || posDolar == 1);
}

/** 
 * Retorna o texto do campo sem formato.
 */
function CN_getValorDesformatado(texto) {
    return texto.replace(/\./g,"");
}

/** 
 * Retorna o texto do campo sem formato.
 */
function CN_getValorDesformatadoDouble(texto) {
    return texto.replace(/\./g,"").replace(",", ".");
}

/** 
 * Retorna o texto do campo formatado.
 */
function CN_getValorFormatado(formato, texto) {
    //Pega o texto sem formataï¿½ï¿½o
    texto = CN_getValorDesformatado(texto);
    if (texto == "" || texto == ",") {
        return "";
    }
    //Pega o formato do campo
    var nuDec = CN_getFormatoDec(formato);
    //Formata como moeda
    if (CN_getFormatarComoMoeda(formato)) {
        if (texto.indexOf(",") >= 0) {
            var posVirg = texto.indexOf(",");
            var nuAntesVirg = texto.substr(0, posVirg);
            var nuTamTextoAntesVirg = String(nuAntesVirg).length;
            var nuDepoisVirg = texto.substr(posVirg);
        } else {
            var nuAntesVirg = texto;
            var nuTamTextoAntesVirg = String(nuAntesVirg).length;
            var nuDepoisVirg = "";
        }
        var textoComPonto = "";
        for (nPosTextoPonto=nuTamTextoAntesVirg-1; nPosTextoPonto >=0 ; nPosTextoPonto--) {
            textoComPonto = nuAntesVirg.charAt(nPosTextoPonto) + textoComPonto;
            posPonto = nuTamTextoAntesVirg-nPosTextoPonto; 
            if ((posPonto < nuTamTextoAntesVirg) && (posPonto % 3 == 0)) {
                textoComPonto = "." + textoComPonto;
            }
        }
        textoComPonto = textoComPonto.replace("-.","-");
        texto = textoComPonto + nuDepoisVirg;
    }
    //Completa as virgulas       
    if (nuDec > 0) {
        posVirg = texto.indexOf(",");
        if (posVirg < 0) {
            texto = texto + ",";
            nuCasasComp = nuDec;
        } else {
            nuCasasComp = nuDec - String(texto.substr(posVirg+1)).length;
        }
        for (nCasa=0;nCasa < nuCasasComp;nCasa++) {
            texto = texto + "0";
        }
    }
    
    //retira os espaï¿½os em branco do inicio e final do numero
    texto = jQuery.trim(texto);
    
    return texto;
}
    
/** 
 * Retorna uma mensagem de erro caso o formato do campo nï¿½o for vï¿½lido.
 */
function CN_isFormatoValido(formato, min, max, allowZero, textoDigitado) {
	//retira os espaï¿½os em branco do inicio e final do numero
	textoDigitado = jQuery.trim(textoDigitado);
	
    //Pega o texto sem formataï¿½ï¿½o
    textoDigitado = CN_getValorDesformatado(textoDigitado);
    if (textoDigitado == "") {
        return "";
    }
    //tira o sinal de negativo para verificar os tamanhos
    if (textoDigitado.indexOf("-") == 0) {
        textoDigitado = textoDigitado.substr(1);
    }
    // se for sï¿½ vï¿½rgula considera como nï¿½mero vï¿½lido
    if(textoDigitado == ","){
        textoDigitado = "0" + textoDigitado;
    }
    
    //Verifica se ï¿½ um nï¿½mero vï¿½lido
    var valor = Number(textoDigitado.replace(",","."));
    if (isNaN(valor)) {
        return "O valor digitado nï¿½o ï¿½ um nï¿½mero vï¿½lido.";
    }        
    //Pega o formato do campo
    var nuInt = CN_getFormatoInt(formato);
    var nuDec = CN_getFormatoDec(formato);

    //pega a posiï¿½ï¿½o da virgura e o tamanho do texto
    var posVirg = textoDigitado.indexOf(",") + 1;
    var tamTexto = String(textoDigitado).length;
    if ((nuDec == 0) && (posVirg > 0)) {
        return "O nï¿½mero nï¿½o pode conter casas decimais";
    }
    //valida as casas decimais
    if ((nuDec > 0) && (posVirg > 0) && ((tamTexto - posVirg) > nuDec)) {
        return "O nï¿½mero de casas decimais ï¿½ invalido. O nï¿½mero pode conter apenas " + nuDec + 
          " casas decimais.";            
    }
    //valida a parte inteira
    if ((nuInt > 0) && ( ((posVirg <= 0) && (tamTexto >  nuInt)) || ((posVirg > 0) && (posVirg-1 > nuInt)) )) {
        return "O nï¿½mero de digitos inteiros ï¿½ invï¿½lido. O nï¿½mero pode conter apenas " + nuInt + 
          " digitos inteiros.";            
    }
    //Pega o valor mï¿½nimo
    var valorMinimoPermitido = CN_getValorMinimoPermitido(min);
    //Verifica se o valor do campo nï¿½o ï¿½ menor que o mï¿½nimo permitido
    if ((valorMinimoPermitido > 0) && (valor < valorMinimoPermitido)) {
        return "O nï¿½mero digitado nï¿½o pode ser menor que \"" + valorMinimoPermitido + "\".";
    }
    //Pega o valor mï¿½ximo
    var valorMaximoPermitido = CN_getValorMaximoPermitido(max);
    //Verifica se o valor do campo nï¿½o ï¿½ maior que o mï¿½ximo permitido
    if ((valorMaximoPermitido > 0) && (valor > valorMaximoPermitido)) {
        return "O nï¿½mero digitado nï¿½o pode ser maior que \"" + valorMaximoPermitido + "\".";
    }
    //Verifica se pode valor = 0
    if (allowZero != null && allowZero.toUpperCase() == "False".toUpperCase() && valor == 0) {
        return "O nï¿½mero digitado deve ser diferente de zero.";
    }            
    return "";
}

function CN_verificaValor(ctrl) {
    //verifica se o texto ? v?lido
    var formato = ctrl.getAttribute("formato");
    var min = ctrl.getAttribute("min");
    var max = ctrl.getAttribute("max");
    var allowZero = ctrl.getAttribute("allowZero"); 
    var msgformato = CN_isFormatoValido(formato, min, max, allowZero, ctrl.value);
    var valordigitado = CN_getValorDesformatado(ctrl.value);
    //se n?o for v?lido, limpa o campo e mostra uma mensagem
    if (msgformato != "") {
        //alert (msgformato + msgKey("label.js.valorDigitado", "") + valordigitado + "\".");
        //ctrl.focus();
        if(ctrl.className.indexOf('erro')==-1){
        	ctrl.className=ctrl.className+' erro';
        }
        return false;
    } else {
    //Sen?o, formata o campo    	
        ctrl.value = CN_getValorFormatado(formato, ctrl.value);
        if(ctrl.className.indexOf('erro')!=-1){
      		ctrl.className=ctrl.className.substring(0,ctrl.className.indexOf('erro'));
    	}
    }
    return true;
}
/**
 * trata a entrada de teclas de controle de modificacao de conteudo. ctrl-v, shitf-ins, ctrl-x.
 */
function CN_KDN(ctrl, event){
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
}
    
/** Tratamento de digita??o no componente **/
function CN_KPS(ctrl, event) {
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
	else//Nas situaï¿½ï¿½es abaixo nï¿½o deve fazer validaï¿½ï¿½o nï¿½o faz nada
	    if (C_NaoPodeProcessarOnKeyPress(ctrl, event)) {
	        return;
	    }
    //inicializa as vari?veis de controle
    var tecla = C_TeclaDigitada(event);
    var formato = ctrl.getAttribute("formato");
    var permiteNegativo = CN_getPermiteNegativo(formato);
    var min = ctrl.getAttribute("min");
    var max = ctrl.getAttribute("max");
    //aceita numeros e virgula
    if (!((tecla >= 48 && tecla <= 57) || tecla == 44 || tecla == 45)) {       
        C_CancelaEvento(event);
        return;            
    }
    var virgulaInSel = false;
    if (F_isIExplorer()) {
        var range = document.selection.createRange();
        var virgulaInSel = range.text.indexOf(",") >= 0;
    } else {
        if(ctrl.selectionEnd > ctrl.selectionStart){ 
		    var pos = ctrl.selectionStart;
		    var len = ctrl.selectionEnd - ctrl.selectionStart;
		    var sel = new String(ctrl.value).substr(pos, len);
		    virgulaInSel = sel.indexOf(",") >= 0;
		}
	}
    
    
    //se permitido, deixa teclar somente uma virgula
    if ((tecla == 44) && (ctrl.value.indexOf(",") >= 0) && !virgulaInSel) {
        C_CancelaEvento(event);
        return;            
    }
    //se permitido, deixa teclar somente um sinal de negativo
    if ( (tecla == 45) && ((ctrl.value.indexOf("-") >= 0) || !(permiteNegativo)) ) {
        C_CancelaEvento(event);
        return;            
    }
    //pega o texto que estï¿½ sendo digitado
    textoDigitado = C_getTextoDigitado(ctrl, String.fromCharCode(tecla));
    //sinal de negativo sï¿½ no comeï¿½o
    if ((tecla == 45) && (textoDigitado.indexOf("-") > 0)) {
        C_CancelaEvento(event);
        return;            
    }
    //Passa "true" para o allowZero para que seja possï¿½vel digitar "0.XXX"
    msgformato = CN_isFormatoValido(formato, 0, max, "true", textoDigitado);
    if (msgformato != "") {
    	if (!isValorMinimoPermitido(min, ctrl.value)) {
    		return;
    	}
        C_CancelaEvento(event);
        return;            
    }
}

function isValorMinimoPermitido(min, valor) {
	var valorMinimoPermitido = CN_getValorMinimoPermitido(min);
    //Verifica se o valor do campo nï¿½o ï¿½ menor que o mï¿½nimo permitido
    if ((valorMinimoPermitido > 0) && (valor < valorMinimoPermitido)) {
        return false;
    } else {
    	return true;
    }
}

/** Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores inv?lidos **/
function CN_BLR(ctrl, event) {
	if(ctrl.selectionEnd != ctrl.selectionStart){
		ctrl.selectionStart = ctrl.selectionEnd;
	}
    
    //verifica se o texto existente no campo ï¿½ vï¿½lido
    CN_verificaValor(ctrl);
}

function CN_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		var min = ctrl.getAttribute("min");
		if(!isValorMinimoPermitido(min, ctrl.value)){
			C_mostraHint(e, msgKey('label.js.valorMenorPermitido',ctrl.value));
		} else {
			C_mostraHint(e, msgKey('label.js.valorInvalido',ctrl.value));
		}
	}
}

function CN_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CN_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}

function CN_OFC(ctrl, event){
	C_OFC(ctrl, event);
	ctrl.select();
	oldValueSPW_CN = ctrl.value;
}
function CampoTelefone(id) {
  	
  	this.id = null;
  	
  	this.campoNuTelefone = null;
  	this.campoNuDDD = null;
  	
  	this.checkBoxMascara = null;
  	
  	this.formato = null;
  	this.formatoOriginal = null;
  	this.minLength = null;
  	this.maxlengthWithoutMask = null;
  	this.maxlengthOriginal = null;
  	
  	this.setId(id);
	
	this.registerEvents(this);
}

CampoTelefone.prototype.registerEvents = function (campoTelefone) {
	if(jQuery.browser.msie) {
		this.checkBoxMascara.bind('click', function() {campoTelefone.oncheck()});
	} else {
		this.checkBoxMascara.bind('change', function() {campoTelefone.oncheck()});
	}
	
	this.campoNuTelefone.bind('keypress', function(event) {return campoTelefone.campoNuTelefoneOnkeypress(event)});
	this.campoNuTelefone.bind('blur', function(event) {return campoTelefone.campoNuTelefoneOnblur(event)});
	this.campoNuTelefone.bind('mouseover', function(event) {return campoTelefone.campoNuTelefoneOnmouseover(event)});
	this.campoNuTelefone.bind('mouseout', function(event) {return campoTelefone.campoNuTelefoneOnmouseout(event)});
	this.campoNuTelefone.bind('mousemove', function(event) {return campoTelefone.campoNuTelefoneOnmousemove(event)});
	this.campoNuTelefone.bind('focus', function(event) {return campoTelefone.campoNuTelefoneOnfocus(event)});
	
	this.campoNuDDD.bind('focus', function(event) {return campoTelefone.campoNuDDDOnfocus(event)});
}

CampoTelefone.prototype.setId = function (id) {
	this.id = id;
	this.campoNuTelefone = jQuery('#'+this.id+'_nuTelefone');
	this.campoNuDDD = jQuery('#'+this.id+'_nuDDD');
	this.checkBoxMascara = jQuery('#'+this.id+'checkDesabilitarMascara');
	
	this.formato = this.campoNuTelefone.attr("formato");
	this.minLength = this.campoNuTelefone.attr("minLength");
	this.maxlengthWithoutMask = this.campoNuTelefone.attr("maxlengthWithoutMask");
	this.maxlengthOriginal = this.campoNuTelefone.attr("maxlength");
	
	this.formatoOriginal = this.formato;
}

CampoTelefone.prototype.campoNuDDDOnfocus = function(event) {
	this.campoNuDDD[0].select();
}

/**
*	Evento de marcar ou desmarcar o checkbox
**/
CampoTelefone.prototype.oncheck = function () {
	this.campoNuDDD[0].disabled = this.checkBoxMascara[0].checked;
	if(this.isMascaraHabilitada()) {
		this.formato = this.formatoOriginal;
		this.campoNuTelefone.attr("maxlength",this.maxlengthOriginal);
		this.campoNuDDD.removeClass('campoDddDesabilitado');
		this.campoNuTelefoneOnblur();
	} else {
		this.formato = null;
		this.campoNuTelefone.attr("maxlength",this.maxlengthWithoutMask);
		this.campoNuTelefone.removeClass("erro");
		this.campoNuDDD.addClass('campoDddDesabilitado');
	}
}

/** 
 * Tratamento de digitaï¿½ï¿½o no componente.
 */
CampoTelefone.prototype.campoNuTelefoneOnkeypress = function(event) {
	if(this.isMascaraHabilitada()) {
		var campoNuTelefone = this.campoNuTelefone[0];
		event = event.originalEvent;
		
	    //Nas situaï¿½ï¿½es abaixo nï¿½o deve fazer validaï¿½ï¿½o nï¿½o faz nada
	    if (C_NaoPodeProcessarOnKeyPress(campoNuTelefone, event)) {
	        return;
	    }
	    //pega a tecla que foi digitada
	    var tecla = C_TeclaDigitada(event);
	    //pega os dados do texto que estï¿½ sendo digitado
	    var pos = C_getPosTextoDigitado(campoNuTelefone);
	    var charDigitado = String.fromCharCode(tecla);
	    var textoDigitado = C_getTextoDigitado(campoNuTelefone, charDigitado);
	    
	    var msgformato = CM_isFormatoValido(this.formato, textoDigitado);
	    if (msgformato != "") {
	        //Verifica se deve completar a mï¿½scara
	        var charMask = CM_getIfMaskLiteral(this.formato, pos);
	        if (charMask != "" && C_getSelLength(campoNuTelefone) == 0) {
	            textoDigitado = campoNuTelefone.value + charMask + charDigitado;
	            if (CM_isFormatoValido(this.formato, textoDigitado) == "") {
	                if (jQuery.browser.msie) {
	                    range = campoNuTelefone.createTextRange();
	                    range.move('character', pos);            
	                    range.text = charMask;
	                } else {
	                    campoNuTelefone.value = campoNuTelefone.value + charMask;
	                    //Sï¿½ permite o onchange se o usuï¿½rio clicou na tecla "TAB"
	                    if (campoNuTelefone.onchange != null && tecla == 9) {
	                        campoNuTelefone.onchange(campoNuTelefone);
	                    }
	                }
	            } else {
	              return;
	            }
	        } else {
	            return;
	        }
	    } 
	}
}

/** 
 * Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos 
 */
CampoTelefone.prototype.campoNuTelefoneOnblur = function () {
	//Verifica se o formato do campo ï¿½ vï¿½lido
	if(this.isMascaraHabilitada() && this.campoNuTelefone.val() != '') {
		this.ajustaConteudoPeloMaskAlign();
		this.verificaSeRespeitaMascara();
	}
}

CampoTelefone.prototype.campoNuTelefoneOnmouseover = function (event){
	if(this.campoNuTelefone.hasClass('erro')){
		C_mostraHint(event, msgKey('label.js.valorInvalido',this.campoNuTelefone.val()));
	}
}

CampoTelefone.prototype.campoNuTelefoneOnmousemove = function (event){
	if(this.campoNuTelefone.hasClass('erro')){
		C_moveHint(event);
	}
}

CampoTelefone.prototype.campoNuTelefoneOnmouseout = function (event){
	if(this.campoNuTelefone.hasClass('erro')){
		C_escondeHint();
	}
}

CampoTelefone.prototype.campoNuTelefoneOnfocus = function (event){
	if(this.campoNuTelefone.hasClass('erro')){
		this.campoNuTelefone.removeClass('erro');
		C_escondeHint();
	}
	this.campoNuTelefone[0].select();
}

/** 
 * Aplica o comportamento da propriedade maskAlign.
 */
CampoTelefone.prototype.ajustaConteudoPeloMaskAlign = function (){
	var campoNuTelefone = this.campoNuTelefone[0];
	
	var textodigitado = campoNuTelefone.value;
	var nFormatoSize = String(this.formato).length;
    var nTextoSize = String(textodigitado).length;
    	
	if(textodigitado != ""){
		var espacos = "";
		
		var caracteresFaltantes = this.getQtdeCaracteresSeparadoresDoFormato() - this.getQtdeCaracteresSeparadoresNoTexto(textodigitado);
		if(caracteresFaltantes < 0) caracteresFaltantes = 0;
		
		for (var i = nTextoSize; i < nFormatoSize - caracteresFaltantes; i++){
			espacos = espacos + " ";
		}
		
		textodigitado = espacos + this.getConteudoSemMascara(this.formato, textodigitado);
		
		if(nTextoSize > nFormatoSize/2){
			textodigitado = this.aplicaMascara(this.formato, textodigitado);
		}
		
		if(campoNuTelefone.value != textodigitado){
			campoNuTelefone.value = textodigitado.trim();
		}
	}
}

/** 
 * Retorna o conteï¿½do do campo sem a mï¿½scara.
 */
CampoTelefone.prototype.getConteudoSemMascara = function (formato, textodigitado){
	var nTextoSize = String(textodigitado).length;
	for(var i = 0; i < nTextoSize; i++){
		var charMask = CM_getIfMaskLiteral(formato, i);
		if(charMask != ""){
			textodigitado = replaceAll(textodigitado, charMask, "");
		}
	}
	return textodigitado;
}

/**
 * Verifica se valor digitado no campo "ctrl" ï¿½ vï¿½lido.
 */
CampoTelefone.prototype.verificaSeRespeitaMascara = function (){
	if(this.isMascaraHabilitada() && this.campoNuTelefone.val() != '') {
		var campoNuTelefone = this.campoNuTelefone[0];
		
	    //verifica se o texto ï¿½ vï¿½lido
	    var msgformato = this.verificaSeRespeitaFormato(this.formato, campoNuTelefone.value, "right");
	    var valordigitado = campoNuTelefone.value;
	    var qtdMinCarcteres =  this.minLength;
	    
	    var textoSemMascara = this.getConteudoSemMascara(this.formato, valordigitado);
	    
	    
	    if(this.formato !== null && this.formato != ""){
	   		 if(campoNuTelefone.value != "" && textoSemMascara.length < qtdMinCarcteres){
	        	this.campoNuTelefone.addClass('erro');
	      	    return false;
	     	 }
	    }
	    
	    if (msgformato != "") {
	        if(!this.campoNuTelefone.hasClass('erro')){
	        	this.campoNuTelefone.addClass('erro');
	        }
	        return false;
	    }
	    if(this.campoNuTelefone.hasClass('erro')){
			this.campoNuTelefone.removeClass('erro');
		}
	}
    return true;
}


CampoTelefone.prototype.verificaSeRespeitaFormato = function (formato, textodigitado){
	var msgformato = "";
	var nPosTexto = 0;
	var nFormatoSize = String(formato).length;
	var nTextoSize = String(textodigitado).length;
	
	if(nFormatoSize > nTextoSize) {
		var espacos = "";
		for (var i = nTextoSize; i < nFormatoSize; i++){
			espacos = espacos + " ";
		}
		textodigitado = espacos + textodigitado;
	}
	
    while (nPosTexto < String(textodigitado).length && msgformato == "") {
		msgformato = CM_isCaracterValido(formato, textodigitado.charAt(nPosTexto), nPosTexto);
		nPosTexto++;
	}
	return msgformato;  
}

/** 
 * Aplica a mï¿½scara num conteï¿½do limpo, ou seja, que estï¿½ sem mï¿½scara.
 */
CampoTelefone.prototype.aplicaMascara = function (formato, textodigitado){
	var nFormatoSize = String(formato).length;
	var nConteudoSize = String(textodigitado).length;
	var nConteudo = 0;
	var valorFinal = "";
	
	
	
	for(var i = 0; i < nFormatoSize && nConteudo <= nConteudoSize && valorFinal.length < nFormatoSize; i++){
		var charLiteral = CM_getIfMaskLiteral(this.formato, i);
		if(charLiteral == ""){
			valorFinal = valorFinal + textodigitado.charAt(nConteudo++);
		}else{
			valorFinal = valorFinal + charLiteral + textodigitado.charAt(nConteudo++);
		}
	}
	return valorFinal;
}

CampoTelefone.prototype.getQtdeCaracteresSeparadoresDoFormato = function() {
	return this.getCaracteresSeparadoresDoFormato().length;
}

CampoTelefone.prototype.getQtdeCaracteresSeparadoresNoTexto = function(textoDigitado) {
	var caracteres = this.getCaracteresSeparadoresDoFormato();
	var count = 0; 
	for(var i = 0; i < textoDigitado.length; i++) {
		var charAt = textoDigitado.charAt(i);
		var caracteresLength = caracteres.length;
		for (var j = 0; j < caracteresLength; j++) {
			if (charAt === caracteres[j]) {
				count++;
			}
		}
	}
	return count;
}
CampoTelefone.prototype.getCaracteresSeparadoresDoFormato = function() {
	var formatoLength = this.formato.length;
	var caracteres = new Array();
	for(var i = 0; i < formatoLength; i++ ) {
		var charLiteral = CM_getIfMaskLiteral(this.formato, i);
		if(charLiteral != "") {
			caracteres[caracteres.length] = charLiteral;
		}
	}
	return caracteres;
}

CampoTelefone.prototype.isMascaraHabilitada = function() {
	return !(this.checkBoxMascara[0].checked);
}
/**
 * Retorna o nï¿½mero mï¿½ximo de caracteres que pode ser digitado no campo.
 */
function CT_getTamanhoMaximo(formato) {
    tamanhoMax = new Number(formato);
    if (isNaN(tamanhoMax) || tamanhoMax == 0) {
        return 999999;
    } else {
        return tamanhoMax;
    }
}
   
/** 
 * Retorna uma mensagem de erro caso o formato do campo nï¿½o for vï¿½lido.
 */
function CT_isFormatoValido(formato, textoDigitado) {
    tamanhoMax = CT_getTamanhoMaximo(formato);
    if (String(textoDigitado).length > tamanhoMax) {
        return "O campo nï¿½o pode conter mais que \"" + tamanhoMax + "\" caracteres.";
    }
    return "";
}

/**
 * Verifica se o valor digitado no campo texto estï¿½ correto
 */
function CT_verificaValor(ctrl) {
    msgformato = CT_isFormatoValido(ctrl.getAttribute("formato"), ctrl.value);
    //se nï¿½o for vï¿½lido, limpa o campo e mostra uma mensagem
    if (msgformato != "") {
        alert (msgformato + msgKey("label.js.valorDigitado","") + ctrl.value + "\".");
        //ctrl.focus();
        return false;
    }
    return true;
}
/**
 * trata a entrada de teclas de controle de modificacao de conteudo. ctrl-v, shitf-ins, ctrl-x.
 */
function CT_KDN(ctrl, event){
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}
}

/** 
 * Trata a digitaï¿½ï¿½o no campo para nï¿½o permitir que o campo fique com 
 * valores invï¿½lidos.
 */
function CT_KPS(ctrl, event) {
	if(C_isTeclasControle(ctrl, event)){
	    return C_valorTeclasControleHandler(ctrl, event);
	}else//Nas situaï¿½ï¿½es abaixo nï¿½o deve fazer validaï¿½ï¿½o nï¿½o faz nada
	    if (C_NaoPodeProcessarOnKeyPress(ctrl, event)) {
	        return;
	    }
    //pega a tecla que foi digitada
    tecla = C_TeclaDigitada(event);
    //pega o texto que estï¿½ sendo digitado
    textoDigitado = C_getTextoDigitado(ctrl, String.fromCharCode(tecla));
    //Adiciona o caracter estï¿½ sendo digitado e verifica se o formato ï¿½ vï¿½lido
    if (CT_isFormatoValido(ctrl.getAttribute("formato"), textoDigitado) != "") {
        C_CancelaEvento(event);
        return;            
    }
}
    
/** Trata a saï¿½da do campo para nï¿½o permitir que o campo fique com valores invï¿½lidos **/
function CT_BLR(ctrl) {
    //verifica se o texto existente no campo ï¿½ vï¿½lido
    CT_verificaValor(ctrl);
}

function CT_MOV(ctrl, e){
	if(ctrl.className.indexOf('erro')!= -1){
		C_mostraHint(e, msgKey('label.js.valorInvalido',ctrl.value));
	}
}

function CT_MMOV(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_moveHint(event);
	}
}

function CT_MOUT(ctrl, event){
	if(ctrl.className.indexOf('erro')!= -1){
		C_escondeHint();
	}
}
var played = false;

(function($) {
        $.reloadCaptcha = function (width, height) {
            var timestamp = new Date().getTime();
            $('#ImgCaptcha').attr('src','captchaImage.do?timestamp=' + timestamp + '&width=' + width + '&height=' + height);
        };

        $.playCaptcha = function() {
        	if (!played) {
            	$('#divPlayerCaptcha').html("<span id=\"PlayerCaptcha\"></span>");
            }
            
            $("#PlayerCaptcha").jPlayer({
                ready: function () {
            	  	if (!played) {
            	  		this.onSoundComplete(function() { played = false; });
            	  		played = true;
            			this.element.jPlayer("setFile", "captchaSound.do").jPlayer("play");
            	  	}
                },
                swfPath: "js/jPlayer/"
            });
        };
    })(jQuery);function CH_check(checkbox){
	checkbox.checked = !(checkbox.checked);
	CH_updateHiddenValue(checkbox);
}

function CH_updateHiddenValue(checkbox){
	if(checkbox.checked){
		CH_getInputSibling(checkbox).value = checkbox.getAttribute('value');
	} else {
		CH_getInputSibling(checkbox).value = checkbox.getAttribute('uncheckedValue');
	}
}

function CH_getInputSibling(obj){
	if ( obj.name == '' ) {
		return jQuery(obj).parent().find('input[type=hidden][id='+obj.id+']')[0];
	} else {
		return jQuery(obj).parent().find('input[type=hidden][name='+obj.name+']')[0];
	}
}
var CMD_comboTarget

// fired in event onChange
// Ex: onChange="CMD_find(formCad['usuario.id'],'spwPopula.htm?param=1')"
function CMD_find(combo, url){
	CMD_comboTarget = combo;
	iframe = document.createElement("IFRAME");
	iframe.src = url;
	iframe.id = "CMD_iframe";
	iframe.style.display = "none";
	objBody = document.getElementsByTagName("BODY")[0];
	objBody.appendChild(iframe);
}

function CMD_populate(arrayDados) {
	combo = parent.CMD_comboTarget;
	
	//remove itens
	qtChild = combo.childNodes.length;
	for(i = 0; i < qtChild; i++){
		combo.removeChild(combo.childNodes[0]);
	}
	
	//add itens
	for(i = 0; i < arrayDados.length; i++){
		option = parent.document.createElement("OPTION");
		option.value = arrayDados[i][1];
		text = parent.document.createTextNode(arrayDados[i][0]);
		option.appendChild(text);
		combo.appendChild(option);
	}	
	
	//delete iframe
	iframe = parent.document.getElementById("CMD_iframe");
	iframe.parentNode.removeChild(iframe);
}

/**
 * Exibe a layer e coloca a altura do layer com scroll
 * */
function ajustaScrollSearchGrid(){

	//
	var objLayer = document.getElementById("laConsulta");
	var tableParent = objLayer.parentNode.parentNode.parentNode.parentNode;
	objLayer.style.height = (F_getBrowserHeight() - tableParent.offsetHeight) + "px";
	objLayer.style.display = "";
}

/**
 * Verifica se contï¿½m algum iframe da search
 * */
function verificaIframeDiv(){
	var divs = document.getElementsByTagName("DIV");
	for(var i = 0; i < divs.length; i++){
		if(String(divs[i].getAttribute("id")).indexOf("spwConsulta") != -1){
			return true;
		}
	}
	return false;

}
/** Cria a caixa de consulta **/
function abrirConsulta(obj, url, largura, altura, titulo){
	if(obj == null || obj.tagName != 'A' || (obj.tagName == 'A' && IMG_isEnabled(obj))){
		
		//
		var haveDoctype = F_haveDoctype();
	    var alturaTitulo = 18;
	    
		//verifica se a consulta ja esta aberta(default -> spwConsulta e caso nï¿½o tenha verifica quaquer div que contenha spwConsulta)
		if(document.getElementById("spwConsulta") != null || verificaIframeDiv()) {
			return;
		}

		//pega dados da pag
		var objBody = document.getElementsByTagName("BODY")[0];
		var alturaPag = F_getBrowserHeight();
		var larguraPag = F_getBrowserWidth();
		var posScroll = document.body.scrollTop;
		// var posScroll = 0;		

		//cria a layer
		var laConsulta = document.createElement("DIV");
		laConsulta.id = "spwConsulta";
		if(haveDoctype){
			laConsulta.style.position = "fixed";
			var posScroll = 0;
		}else{
			laConsulta.style.position = "absolute";
		}
		laConsulta.style.width = largura + "px";
		laConsulta.style.height = altura + "px";
		laConsulta.style.left = ((larguraPag - largura) / 2) +"px";
		laConsulta.style.top = ((alturaPag - altura) / 2 + posScroll) + "px";
		laConsulta.className = "spwTabelaGrid";
		laConsulta.style.backgroundColor = "#ffffff";
		/**/
		var sk = getURLImagesSkin();
		laConsulta.style.backgroundImage = "url("+sk+"bgGridSearchTL.png)";
		laConsulta.style.backgroundPosition = "top left";				
		/**/
		laConsulta.style.zIndex = 99;
		objBody.appendChild(laConsulta);
		objBody.setAttribute('idDivConsulta',laConsulta.id);

		//cria a tabela superior
		tabelaCons = document.createElement("TABLE");
		tabelaCons.cellPadding = 0;
		tabelaCons.cellSpacing = 0;
		tabelaCons.style.width = '100%';
		/**/
		tabelaCons.style.backgroundImage = "url("+sk+"bgGridSearchTR.png)";
		tabelaCons.style.backgroundPosition = "top right";
		tabelaCons.style.backgroundRepeat = "no-repeat";
		tabelaCons.style.backgroundColor = "transparent";
		tabelaCons.style.fontSize = "13px";
		tabelaCons.style.color = "#FFFFFF";
		tabelaCons.style.lineHeight = "27px";
		/**/
		tabelaCons.className = "spwTituloGrid";
		cabCons = document.createElement("TBODY");
		tabelaCons.appendChild(cabCons);

		//cria a linha da tabela
		linhaCons = document.createElement("TR");
		cabCons.appendChild(linhaCons);

		//cria a primeira celula
		celula1Cons = document.createElement("TD");
		celula1Cons.height = alturaTitulo;
		/**/
		celula1Cons.style.paddingLeft = "5px"; 
		celula1Cons.style.paddingRight = "5px";				
		/**/
		celula1Cons.setAttribute('idDivConsulta',laConsulta.id);
		linhaCons.appendChild(celula1Cons);
		texto1 = document.createTextNode(titulo);
		celula1Cons.appendChild(texto1);
		objBody.onmousemove = moverLayer;
		celula1Cons.onmousedown = iniciaMover;
		objBody.onmouseup = terminaMover;

		//cria a segunda celula
		celula2Cons = document.createElement("TD");
		/**/
		celula2Cons.style.paddingLeft = "5px"; 
		celula2Cons.style.paddingRight = "5px";
		/**/
		linhaCons.appendChild(celula2Cons);

		celula2Cons.style.width = '20px';
		laConsulta.appendChild(tabelaCons);

	    /*botaoFechar = document.createElement("BUTTON");
	    botaoFechar.className = "spwBotaoGrid";
	    if (!jQuery.browser.msie) {      	    	      
	      botaoFechar.style.width="100%";
	      botaoFechar.style.height="100%";
	      botaoFechar.type="button";
	    }*/
        var botaoFechar = document.createElement("a");
        botaoFechar.className = "spwBotaoFecharJanela";
        botaoFechar.appendChild(document.createTextNode('X'));
        botaoFechar.onclick = fecharConsulta;
        celula2Cons.appendChild(botaoFechar);             
	    /*
	    botaoFechar.style.width="16px";
	    botaoFechar.style.height="16px";
	    botaoFechar.style.lineHeight = "16px";
	    botaoFechar.style.background = "url(imagens/base/botFechar.png)";
	    botaoFechar.style.backgroundRepeat = "no-repeat";
	    botaoFechar.style.border = "0px";
	    botaoFechar.style.overflow = "hidden";	        
	    */
	    botaoFechar.onclick = fecharConsulta;	    	    
		celula2Cons.appendChild(botaoFechar);

		//cria tabela para conter o iframe
		tabelaIframe = document.createElement("TABLE");	
		linhaIframe = document.createElement("TR");
		celulaIframe = document.createElement("TD");
		tabelaIframe.id = "tabelaIframe";

	    //Atualiza os parï¿½metros
	    prmIdObjRetorno="idObjRetorno="+obj.id;
	    grid = getGrid(obj);

	    if (grid != null && gridIsMultiselection(grid)) {
	        prmMultiSelection="multiselection=true&contador=0&gotInputParam=false&contadorMaior=0";
	    } else {
	        prmMultiSelection="multiselection=false";
	    }

		url = insertParamUrlAntesConsulta(url,obj.id);

	    if (url.indexOf("?") < 0) {
	        url=url+"?";
	    } else {
	        url=url+"&";
	    }

	    var desabilitaSel = obj.getAttribute('desabilitarSelecionados');	    	    
	    if((new String(desabilitaSel)).toLowerCase() != "false" && (new String(desabilitaSel)).toLowerCase() != "true"){
	    	desabilitaSel = false;
	    }

	    url=url+prmIdObjRetorno+"&"+prmMultiSelection+"&height="+(altura-alturaTitulo)+"&desabilitarSelecionados="+desabilitaSel+'&width='+largura;

		//cria o iframe
		// if( navigator.appName == "Netscape" ) {
			iframeConsulta = document.createElement("iframe");
			iframeConsulta.src = url;
			iframeConsulta.width = "100%";
			iframeConsulta.height = altura - alturaTitulo;
			iframeConsulta.frameBorder = "0";
	        iframeConsulta.id = "layerFormConsulta";
			laConsulta.appendChild(iframeConsulta);
		/*} else {
	        htmlIframe = "<iframe id='layerFormConsulta' frameBorder='0' style='width:100%; height:" + (altura - alturaTitulo) + "px' src='"+url+"'></iframe>";
			document.getElementById("spwConsulta").insertAdjacentHTML("beforeEnd", htmlIframe);
		}*/
		//inseri a div spwModalContent depois da tag form. Utilizado para o modal!	
		jQuery('form').after("<div id='spwModalContent'></div>");
		//prepara todos os js resposnï¿½veis para o modal	
		spwModalScripts(laConsulta.id);
	}
}

function getURLImagesSkin() {
	var sk = "";
	if (jQuery('#imagensSkin', top.document).val() != undefined) {
		sk = jQuery('#imagensSkin', top.document).val();
	} else if(top.imagensSkinURL != undefined) {
		sk = top.imagensSkinURL;
	} else if (jQuery('#imagensSkin').val() != undefined) {
		sk = jQuery('#imagensSkin').val();
	}
	return sk;
}

function insertParamUrlAntesConsulta(url,sender){
	return url;
}


/** desabilita a selecao do texto quando esta movendo **/
document.onselectstart = doc_selstart;
function doc_selstart(aEvent) {
    var theEvent = aEvent ? aEvent : window.event;
    if (movendo){
        theEvent.returnValue = false;
    }
}

/** Faz com que o ESC feche a tela **/
document.onkeydown = doc_keydown;
function doc_keydown(aEvent){
    var theEvent = aEvent ? aEvent : window.event;
    if (theEvent.keyCode == 27) {
        fecharConsulta();
        try{
  			procuraFechaIFrame();
  		}catch(e){
  		   //Nï¿½o realiza nenhuma aï¿½ï¿½o, iframe nï¿½o existente
  		}
    }
}

/**
 * Fecha o primeiro iframe encontrado e que contenha "spwConsulta" no seu id
 * */
function procuraFechaIFrame(){
	var iframes = parent.document.getElementsByTagName('IFRAME');
  	var doc = parent.document;
	if(iframes != null && iframes[0] != null){
	    var pai = iframes[0].parentNode;
	    while(pai != null && String(pai.nodeName) != "DIV"){
			pai = pai.parentNode;
		}
		if(pai != null){
			var id = pai.getAttribute('id');
			if(id != null && String(id).indexOf('spwConsulta') != -1){
				pai.parentNode.removeChild(pai);
				objBody = doc.getElementsByTagName("BODY")[0];
		  		objBody.onmouseup = null;
		  		objBody.onmousemove = null;
		    }
		}
    }else{
    	iframes = document.getElementsByTagName('IFRAME');
    	doc = document;
    	if(iframes != null && iframes[0] != null){
	    	var pai = iframes[0].parentNode;
	    	while(pai != null && String(pai.nodeName) != "DIV"){
				pai = pai.parentNode;
			}
			if(pai != null){
				var id = pai.getAttribute('id');
				if(id != null && String(id).indexOf('spwConsulta') != -1){
					pai.parentNode.removeChild(pai);
					objBody = doc.getElementsByTagName("BODY")[0];
			  		objBody.onmouseup = null;
			  		objBody.onmousemove = null;
			    }
			}
		}
   	}
}

function fecharConsulta(){
	fecharConsultaById('');
}

/** Fecha a caixa de consulta **/
function fecharConsultaById(id) {
	onclosewindow();
	var idIframe;
	if ((id != null) && (id != undefined) && (id != "")) {
		idIframe = jQuery.trim(("spwConsulta"+id));
	} else {
		idIframe = getIdIframe();
	}
	
	layerCon = parent.document.getElementById(idIframe);
    var doc = parent.document;
    if (layerCon == null) {
       layerCon = document.getElementById(idIframe);
       doc = document;
    }
    removeSpwModal(doc);
    if (layerCon != null) {
      layerCon.parentNode.removeChild(layerCon);
      objBody = doc.getElementsByTagName("BODY")[0];
      objBody.onmouseup = null;
      objBody.onmousemove = null;
    }
}

function getIdIframe() {
	if (document.getElementById('idObjRetorno')) {
		var objRetornoValue = document.getElementById('idObjRetorno').value;
		var objTable = parent.document.getElementById(objRetornoValue);

		if ( objTable != null ) {
			idIframeAttribute = objTable.getAttribute('idIframe');
			if (idIframeAttribute) {
				idIframe = jQuery.trim("spwConsulta"+idIframeAttribute);
				return idIframe;
			} 
		} 
	} 
	idIframe = "spwConsulta";
	return idIframe;
}

function removeSpwModal(doc){
	//Recuperamos navamente todas as variaveis, pois pelo botï¿½o fechar e selecionar elas estavam indefinidas	
	var $idFrameMural = jQuery('#idFrameMural',top.document);				
	var $rootHtml = $idFrameMural.parents("html:last");							
														
	var $divHolderConteudo1 = jQuery("#holderConteudo1");	
	if($divHolderConteudo1 != null && $divHolderConteudo1.size()){
    	$divHolderConteudo1.unbind('scroll');
    }
    jQuery(window).unbind('resize');
    
    var $divSlider = $rootHtml.find("div.ui-layout-resizer:last");
    if($divSlider != null && $divSlider.size() > 0){    	   	    	
    	$divSlider.fadeTo(0, 1, function() {
			$divSlider.show();			        
		});			
		$divSlider.removeClass("spwModalDefault");
    }
    
    var $divSpwModalFooter = $rootHtml.find("#spwModalFooter");
    if($divSpwModalFooter != null && $divSpwModalFooter.size() > 0){
    	$divSpwModalFooter.hide();
    } 
    
    var $divSpwModalContent = jQuery('#spwModalContent',doc);
    if($divSpwModalContent != null && $divSpwModalContent.size() > 0){
    	$divSpwModalContent.remove();
    }       
}

function converteNumero(texto) {
    texto = new String(texto);
    numero = "";
    for (i = 0; i < texto.length; i++) {
        carac = texto.substr(i,1);
        if(!isNaN(carac) || carac == "." || carac == ","){
            numero += carac;
        }
    }
    return new Number(numero);
}

var posXinicial;
var posYinicial;
var movendo = false;
var posXlayer;
var posYlayer;

/** seta as variaveis quando clicado no titulo da consulta **/
function iniciaMover(aEvent){
    var theEvent = aEvent ? aEvent : window.event;
    movendo = true;
    posXinicial = new Number(theEvent.clientX + document.body.scrollLeft);
    posYinicial = new Number(theEvent.clientY + document.body.scrollTop);
    layerConsulta = document.getElementById("spwConsulta");
    if (layerConsulta === null) {
    	layerConsulta = document.getElementById(_idIframeConcat);
    }
    posXlayer = converteNumero(layerConsulta.style.left);
    posYlayer = converteNumero(layerConsulta.style.top);
}

/** exibe o conteudo da consulta quanto termina de mover **/
function terminaMover(){
	document.getElementById("layerFormConsulta").style.display = "";
	movendo = false;
}

/** move a layer **/
function moverLayer(aEvent){
    var theEvent = aEvent ? aEvent : window.event;
    if (movendo == true) {
        document.getElementById("layerFormConsulta").style.display = "none";
        currentX = new Number(theEvent.clientX + document.body.scrollLeft);
        currentY = new Number(theEvent.clientY + document.body.scrollTop);
        layerConsulta = document.getElementById("spwConsulta");
        if (layerConsulta === null) {
        	layerConsulta = document.getElementById(_idIframeConcat);
        }
        layerConsulta.style.left = posXlayer + (currentX - posXinicial);
        layerConsulta.style.top = posYlayer + (currentY - posYinicial);
    }
}

//limpa o grid de pesquisa
function limparGrid() {
	tabela = getTBody(document.getElementById("tabelaResultado"));
	if(tabela != null){
		grid = getGrid(tabela);
		nmGrid = getNomeGrid(grid);
		qtFilhos = tabela.childNodes.length;
		for (var i = 0; i < qtFilhos; i++) {
			tabela.removeChild( tabela.lastChild );
		}
    	document.getElementById("textQtLinhas"+nmGrid).childNodes[0].nodeValue = "0";
    }
}

//limpa a tabela referente aos dados da paginaï¿½ï¿½o
function limparDadosPaginacao(){
	if(jQuery('#painelNavegacao')[0]) {
		jQuery('#painelNavegacao')[0].style.display = 'none';
	}
	if(jQuery('#infoExibindo')[0]) {
		jQuery('#infoExibindo')[0].style.display = 'none';
	}
}

//limpa o conteï¿½do dos filtros de pesquisa
function limparFiltros( theForm ) {
    objForm = document.forms[0];
    var length = objForm.length;
	for (i = 0; i < length; i++) {
    	if (objForm[i].name != "" && objForm[i].type != "button" && objForm[i].type != "submit" && objForm[i].type != "hidden") {
            if (objForm[i].type == "checkbox") {
                objForm[i].checked = false;
            } else {
                objForm[i].value = "";
            }
        }
	}
}

//verifica se existe pelo menos um filtro de pesquisa preenchido
function filtroPesquisaValido( form ) {
    //Comentado a pedido da salt 31003.
    /*ok = false;
    for( i = 0; i < form.length; i++ ) {
        if( form[i].type == "text" || form[i].type == "select" ) {
            if( form[i].value != "" ) {
                ok = true;
            }
        }
    }
    if( !ok ) {
        alert("ï¿½ necessï¿½rio informar algum filtro para a pesquisa.");
    }
    return ok;*/
    return true;
}

function verificaCamposObrigatorios(form){
	var length = form.length;
	for( i = 0; i < length; i++ ) {
        if( form[i].type == "text" && form[i].getAttribute('obrigatorio') != null && (form[i].getAttribute('obrigatorio')).toUpperCase() == "TRUE") {
            if(!C_verificaObrigatorio(form[i])) {
                return false;
            }
        }
    }

    return true;
}

function executePesquisaDB( form ) {
	if(!isSearchFilterValid()){
		document.getElementById('pbProcurar').disabled = false;
    	return;
	}

    if (filtroPesquisaValido( form )) {
    	if(verificaCamposObrigatorios(form)){
        	IS_restauraEstadoSelecao();
        	/* Foi comentado devido a salt 33604, aguardando cliente SAJ
            var formURL = document.getElementById("requesterUrl");
            if(formURL) {
                var valorCampo = formURL.value;
                if(valorCampo) {
                    var index = valorCampo.indexOf('/search/');
                    if(index > 0) {
                        formURL.value = valorCampo.substr(index);
                    }
                }
            }*/
        	form.submit();
    	}else{
    		document.getElementById('pbProcurar').disabled = false;
    		return false;
    	}
    }
}

function selecionarRegistros() {
	var selecionados = pegaSelecionados( document.forms[0] );
	var objRetorno = parent.document.getElementById(idObjRetorno);
	var idIframe = '';
    if(isInputSelect(objRetorno)){
    	idIframe = objRetorno.getAttribute('idIframe');
    	if(selecionados.length == 0) {
    		if(objRetorno.getAttribute('multiplaSelecao') == 'true'){
    			copiarParaInputSelect(objRetorno,selecionados);
    		} else {
    			copiarParaForm(selecionados);
    		}
    		parent.desabilitaInputsFilhos(objRetorno, parent.document);
    		fecharConsultaById(idIframe);
    		return;
    	} else if(objRetorno.getAttribute('multiplaSelecao') == 'true'){
    		copiarParaInputSelect(objRetorno,selecionados);
    	} else {
    		copiarParaForm(selecionados);
    	}
    	parent.setOldValueInputSelect(objRetorno.id);
		if(temFilho(objRetorno)){
			parent.habilitaInputsFilhos(objRetorno, parent.document);
			parent.carregaISFilho(idObjRetorno, true);
		}
		if (objRetorno.getAttribute('multiplaselecao') === "false") {
			var input = parent.jQuery(objRetorno).find('input').get(1);
			if (input) {
				if(input.style.display.toString() == '') {
					try {
						input.focus();
					} catch (e) {}
				}
			}
		}
    }else{
	    grid = getGrid(objRetorno);
	    if (grid != null) {
	        var selecionadosList = IS_getInputParamValue(document,idObjRetorno);
	        if (selecionadosList == null || selecionadosList == "") {
		        if(selecionados.length == 0) {
		        	alert(msgKey("label.js.selecaoVazia",""));
			        return;
		        }else{
		        	copiarParaGrid(grid,objRetorno,selecionados);
		        }
			}
	        copiarParaGridSearchPaginada(grid, objRetorno);
	    } else {
	    	if (selecionados.length == 0) {
		        alert(msgKey("label.js.selecaoVazia",""));
		        return;
			}
	        copiarParaForm(selecionados);
	    }
	}
//Funciona como um evento para que possa ser "sobrescrito" na pï¿½gina
//Deve ficar antes de fechar a consulta senï¿½o o script nï¿½o funciona, pois
//o iFrame ï¿½ destruï¿½do antes de chegar na executar da funï¿½ï¿½o
    parent.depoisSelecionarRegistros(idObjRetorno);
//Fecha a tela de consulta
    if (objRetorno) {
    	try {
    		objRetorno.focus();
    	    objRetorno.blur();
    	} catch(e) {}
    }
    
    fecharConsultaById(idIframe);
}

//Copia os registros para um inputSelect..
function copiarParaInputSelect(objRetorno,selecionados){
	var parentDoc = parent.document;
	var contador = getContadorValue(document,'');
	var inputs = objRetorno.getElementsByTagName('INPUT');
	parent.limparInputSelectWithoutDivsMult(objRetorno.id);
	if(contador == 0){
		habilitaInputSelect(objRetorno, parent.document);
	} else if(contador == 1){
		habilitaInputSelect(objRetorno, parent.document);
		if(selecionados.length > 0){
			copiarParaCampos(selecionados);
		}else{
			var registro = IS_inputParamToArray(document, objRetorno.id)[0];
			registro = registro.substring(registro.indexOf('^')+1);
			var linha = document.getElementById( "linha_0");
	        var nodosRef = pegaReferencias( linha );
	        for( j = 0; j < nodosRef.length; j++ ) {
				var propriedadeValor = "";

				if(registro.indexOf('^') != -1) {
					propriedadeValor = registro.substring(0,registro.indexOf('^'));
				} else {
					propriedadeValor = registro.substring(0,registro.indexOf('$'));;
				}

				var valor = propriedadeValor.substring(propriedadeValor.indexOf('=')+1);

		       	var pageReference = getAttribute(nodosRef[j], 'pageReference');
		        copiaValorColunaParaForm(getAttribute(nodosRef[j], 'reference'), valor, pageReference);

				if(registro.indexOf('^') != -1) {
					registro = registro.substring(registro.indexOf('^')+1);
				} else {
					registro = null;
				}
			}
		}
	} else{
		var c = -1;
		for(var i = inputs.length -1; i >= 0; i--){
			if(inputs[i].type!='hidden'){
				parent.disable(inputs[i]);
				if(inputs[i].offsetHeight != 0 && c == -1){
					c = i;
				}
			}
		}
		inputs[c].value=contador+' Registros selecionados';

	}

	var inputParamArray = IS_inputParamToArray(document, objRetorno.id);
	var divsExistentes = objRetorno.getElementsByTagName('DIV');
	for(var k = 0; k < divsExistentes.length; k++){
		if(divsExistentes[k].getAttribute('multSelecao') == 'true' && !opcaoSelecionada(inputParamArray, divsExistentes[k])){
			divsExistentes[k].parentNode.removeChild(divsExistentes[k]);
			k--;
		}
	}

	//cria os selecionados
	for(var i = 0; i < inputParamArray.length; i++) {
		var divMetadado = inputParamArray[i];
		if (parentDoc.getElementById(divMetadado.substring(0,divMetadado.indexOf('^'))) == null) {
			var div = createDivFromMetadata(parentDoc,divMetadado);
			jQuery(objRetorno).append(div);
		}
	}
	
	
	jQuery(objRetorno).find(':input[type=text]').focus();
	var parentContador = parentDoc.getElementById('contador'+objRetorno.id);
	parentContador.value = document.getElementById('contador').value;
	var parentInputParam = parentDoc.getElementById(objRetorno.id+'SelectedEntitiesList');
	parentInputParam.value = document.getElementById(objRetorno.id+'SelectedEntitiesList').value;
	var parentContadorMaior = parentDoc.getElementById('contadorMaior'+objRetorno.id);
	parentContadorMaior.value = document.getElementById('contadorMaior').value;

}

/**
 * Verifica se a div que jï¿½ existe foi selecionada
 */
function opcaoSelecionada(inputParamArray, div) {
	for(var i = 0; i < inputParamArray.length; i++) {
		var divMetadado = inputParamArray[i];
		if (divMetadado.substring(0,divMetadado.indexOf('^')) == div.id) {
			return true;
		}
	}
	
	return false;
}

function createDivFromMetadata(doc,metadata){
	var divId = metadata.substring(0,metadata.indexOf('^'));
	var novoDiv = doc.createElement("DIV");
	novoDiv.id = divId;
	novoDiv.style.display = 'none';
	novoDiv.setAttribute('multSelecao','true');
	
	var resto = metadata.substring(metadata.indexOf('^') + 1);
	while(resto != null && resto != ''){
		var indexChapeu = resto.indexOf('^');
		var input = '';
		if(indexChapeu != -1) {
			input = resto.substring(0,indexChapeu);
			resto = resto.substring(resto.indexOf('^')+1);
		} else {
			input = resto.substring(0,resto.indexOf('$'));
			resto = null;
		}
		var name = input.substring(0,input.indexOf('='));
		var value = url_decode(input.substring(input.indexOf('=')+1));							 

		var novoInput = criaElemento(doc,'INPUT','HIDDEN',name,name, value,name);
		novoDiv.appendChild(novoInput);
	}
	
	return novoDiv;
}

function getSelectedDivs(doc,objId){
	var divs = IS_getDivTemp(doc,objId).getElementsByTagName('DIV');
	var divArray = new Array();
	for(var j = 0; j < divs.length; j++){
		if(divs[j].getAttribute('multSelecao') == 'true'){
			divArray[divArray.length] = divs[j];
		}
	}
	return divArray;
}

function cloneDiv(doc, div){
	var novoDiv = doc.createElement("DIV");
	novoDiv.id = div.id;
	cloneInputsHidden(doc,div,novoDiv);
	novoDiv.style.display = 'none';
	novoDiv.setAttribute('multSelecao','true');
	return novoDiv;
}

function cloneInputsHidden(doc, divFonte, divAlvo){
	for(var i = 0; i < divFonte.childNodes.length; i++){
		if(divFonte.childNodes[i].nodeName == 'INPUT'){
			var input = divFonte.childNodes[i];
			var novoInput = criaElemento(doc,'INPUT','HIDDEN',input.name,input.id,input.value,input.getAttribute('property'));
			novoInput.setAttribute('remover',input.getAttribute('remover'));
			divAlvo.appendChild(novoInput);
		}
	}
}

//Copia uma linha do form de consulta para o form que o chamou
function copiarParaCampos(selecionados) {
    for( i = 0; i < selecionados.length; i++ ) {
        linhaSel = document.getElementById( "linha_" + selecionados[ i ] );
        nodosRef = pegaReferencias( linhaSel );
        for( j = 0; j < nodosRef.length; j++ ) {
       	    var valorRetorno = url_decode(SR_getValorCelulaSearch(nodosRef[j]));
       	    var pageReference = getAttribute(nodosRef[j], 'pageReference');
            copiaValorColunaParaCampos(getAttribute(nodosRef[j], 'reference'), valorRetorno, pageReference);
        }
    }
}

//copia o valor de uma coluna da tela de consulta para um campo do form que o chamou
function copiaValorColunaParaCampos(coluna, valor, pageReference) {
    var idDoElemento;
    if(pageReference == null || pageReference == "false"){
	    idDoElemento = parent.nomeCampoEquivalenteInputSelect(idObjRetorno, coluna);
	} else {
		idDoElemento = coluna;
	}
    if ((idDoElemento != null) && (idDoElemento != "")) {
      obj = parent.IS_getInputFromInputSelect(idObjRetorno, idDoElemento);
      if(obj != null){
	      obj.value = valor;
	  }
    }
}


//Copia uma linha do form de consulta para o form que o chamou
function copiarParaForm(selecionados) {
    for( i = 0; i < selecionados.length; i++ ) {
        linhaSel = document.getElementById( "linha_" + selecionados[ i ] );
        nodosRef = pegaReferencias( linhaSel );
        for( j = 0; j < nodosRef.length; j++ ) {
       	    var valorRetorno = url_decode(SR_getValorCelulaSearch(nodosRef[j]));
       	    var pageReference = getAttribute(nodosRef[j], 'pageReference');
            copiaValorColunaParaForm(getAttribute(nodosRef[j], 'reference'), valorRetorno, pageReference);
        }
    }
}

//copia o valor de uma coluna da tela de consulta para um campo do form que o chamou
function copiaValorColunaParaForm(coluna, valor, pageReference) {
	var idDoElemento;
	var objRetorno = parent.document.getElementById(idObjRetorno);
	var bindings = objRetorno.getAttribute('bindings');
	if(bindings == null || bindings == ''){
	    idDoElemento = parent.nomeCampoEquivalenteForm(idObjRetorno, coluna);
	} else {
		if(pageReference == null || pageReference == "false"){
			return;
		}
		idDoElemento = coluna;
	}
    if ((idDoElemento != null) && (idDoElemento != "")) {
    	if(isInputSelect(objRetorno)) {
			var obj = parent.IS_getInputFromInputSelect(idObjRetorno, idDoElemento);
			if(obj != null){
	      		// obj.value = url_decode(valor);
				obj.value = valor;
	  		}
    	} else {
      		var obj = F_getElementByNameOrId(parent.document, idDoElemento);
      		if(obj != null){
	      		// obj.value = url_decode(valor);
      			obj.value = valor;
	  		}
	  	}
    }
}


//Mï¿½todo pode ser "sobrescrito" para modificar os nomes das colunas correspondentes
function nomeCampoEquivalenteForm(sender, coluna) {
	return coluna;
}

//copia uma linha do form de consulta para o grid
function copiarParaGrid(grid, objRetorno, selecionados) {
    var nmGrid = getNomeGrid(grid);
    var nuLinhaNova = new Number( parent.document.getElementById("textQtLinhas"+nmGrid).childNodes[0].nodeValue );
    for( i = 0; i < selecionados.length; i++ ) {
       var linhaSel = document.getElementById( "linha_" + selecionados[ i ] );
	   if(String(linhaSel.getAttribute('disabled')) == 'true') {
       		continue;
       }
       var nodosRef = pegaReferencias( linhaSel );
       var linha = parent.criarLinha(objRetorno, i == selecionados.length-1, false );
       var actionChanged = false;
       for( j = 0; j < nodosRef.length; j++ ) {
       	    var valorRetorno = url_decode(SR_getValorCelulaSearch(nodosRef[j]));
       	    var pageReference = getAttribute(nodosRef[j], 'pageReference');
       	    var obj = copiaValorColunaParaGrid(grid, nuLinhaNova, references[j], valorRetorno, pageReference);
            if(obj != null && !(actionChanged)){
	       	    parent.changeActionGridInsert(grid,nuLinhaNova);
	       	    actionChanged = true;
       	    }
        }
        linha.style.display = '';
        nuLinhaNova++;
    }
}

function copiarParaGridSearchPaginada(grid, objRetorno) {
    var nmGrid = getNomeGrid(grid);
    var nuLinhaNova = new Number( parent.document.getElementById("textQtLinhas"+nmGrid).childNodes[0].nodeValue );
    var inputParamArray = IS_inputParamToArray(document, objRetorno.id);
    for( var i = 0; i < inputParamArray.length; i++) {
	   var registroSelecionado = inputParamArray[i];
       var valoresSelecionados = getValoresSelecionados(registroSelecionado);

       if(isToCopy(idObjRetorno, nmGrid, registroSelecionado)){
	       var linha = parent.criarLinha(objRetorno, i == inputParamArray.length-1 ,false);
	       var actionChanged = false;
	       for( j = 0; j < valoresSelecionados.length; j++ ) {
	       	    var valor = valoresSelecionados[j];
	       	    var pageReference = pageReferences[j];
	       	    var obj = copiaValorColunaParaGrid(grid, nuLinhaNova, references[j], valor, pageReference);
	       	    if(obj != null && !(actionChanged)){
		       	    parent.changeActionGridInsert(grid,nuLinhaNova);
		       	    actionChanged = true;
	       	    }
	       	}
	       	linha.style.display = '';
	       	
	       	
	       	
	       	
	       	/*Testes 1 */
	       	var linhaJQuery = jQuery(linha);
	       	var isTrEven = linhaJQuery.is('tr:nth-child(even)');    
		    if(isTrEven){
		    	linhaJQuery.find('td').css('background-color',corLinhaPar);
		    	linhaJQuery.find(':input[type!=radio][type!=checkbox]').css('background-color',corLinhaPar);
		    	linha.style.backgroundColor = corLinhaPar;
		    }else{
		    	linhaJQuery.find('td').css('background-color',corLinhaImpar);
		    	linhaJQuery.find(':input[type!=radio][type!=checkbox]').css('background-color',corLinhaImpar);
		    	linha.style.backgroundColor = corLinhaImpar;		    	
		    }
		    
		    /*Testes para readyonly
		    var linhaJQuery = jQuery(linha);
		    var isTrEven = linhaJQuery.is('tr:nth-child(even)');	
		    var lastDesc = getLastDesc(linha);
		    var currentNode = linha;
			if (lastDesc != null && currentNode != null) {
				do {
					currentNode = nextNode(currentNode);
					if (currentNode.nodeName == "TD" || 
								currentNode.tagName == "INPUT" || 
								currentNode.tagName == "SELECT" ||
								currentNode.tagName == "TEXTAREA"  
								) {
						if (currentNode.readOnly == true || currentNode.className.indexOf("disabled") != -1) {							
							if(isTrEven){
								currentNode.style.backgroundColor = corDesabilitadaPar;
								//linha.style.backgroundColor = corDesabilitadaPar
							}else{
								currentNode.style.backgroundColor = corDesabilitadaImPar;
								//linha.style.backgroundColor = corDesabilitadaImPar
							}							
						} else {
							if(isTrEven){					
								currentNode.style.backgroundColor = corLinhaPar;
								//linha.style.backgroundColor = corLinhaPar
							}else{
								currentNode.style.backgroundColor = corLinhaImpar;
								//linha.style.backgroundColor = corLinhaImpar;
							}						
						}
					} 
				} while (lastDesc != currentNode);
		    }
		    linhaJQuery.find('td').css('background-color',corDesabilitadaPar); 
		    */      	 
	        nuLinhaNova++;
        }
    }
}

function isToCopy(sender, nmGrid, registroSelecionado){
	var handler = new GridHandler(nmGrid,parent.document);
    var gridSize = handler.size();
    var existe = false;

    if(gridSize > 0){
	   	var linhaSel = document.getElementById( "linha_0" );
	    var nodosRef = pegaReferencias( linhaSel );
	    var camposChave = getCamposChaveSearch(nodosRef);
		var searchKeys = camposChave.keys();
	   	var searchKeysLength = searchKeys.length;

	    var keys = "";
	    for(var k = 0; k < searchKeysLength; k++ ) {
			if(k+1 == searchKeysLength){
				keys += searchKeys[k];
			}else{
				keys += searchKeys[k]+";";
			}
		}

		existe = isCamposDuplicadosGridParent(nmGrid,keys,registroSelecionado);
    }

	return (!existe);
}

//copia o valor de uma coluna da tela de consulta para uma coluna da grid
function copiaValorColunaParaGrid(grid, nuLinhaNova, coluna, valor, pageReference) {
	var inputId;
	if(pageReference == null || pageReference == "false"){
		inputId = parent.nomeCampoEquivalenteGrid(idObjRetorno, coluna);
	} else {
		inputId = coluna;
	}
    if( inputId != null) {
        var idDoElemento = getColumnId(grid, inputId, nuLinhaNova);
       var obj = parent.document.getElementById( idDoElemento );
        if(obj != null){
        	obj.value = url_decode(url_decode(valor));
        	return obj;
        }
    }
    return null;
}

function getValoresSelecionados(registro){
	var valores = new Array();
	var resto = registro.substring(registro.indexOf('^') + 1);
	while(resto != null && resto != ''){
		var indexChapeu = resto.indexOf('^');
		var input = '';
		if(indexChapeu != -1) {
			input = resto.substring(0,indexChapeu);
			resto = resto.substring(resto.indexOf('^')+1);
		} else {
			input = resto.substring(0,resto.indexOf('$'));
			resto = null;
		}
		valores[valores.length] = input.substring(input.indexOf('=')+1);
	}
	return valores;

}

//Mï¿½todo pode ser "sobrescrito" para modificar os nomes das colunas correspondentes
function nomeCampoEquivalenteGrid(sender, coluna) {
	return coluna;
}

//referencias das colunas para os campos no grid
function pegaReferencias( linha ) {
    referencias = new Array();
    count = 0;
    for( j = 0; j < linha.childNodes.length; j++ ) {
        if((!isTextNode(linha.childNodes[j])) && (getAttribute(linha.childNodes[j], 'property') != null)) {
            referencias[count] = linha.childNodes[j];
            count++;
        }
    }
    return referencias;
}

//retorna os itens selecionados do grid de pesquisa
function pegaSelecionados( form ) {
    checados = new Array();
    if (form.rowSelect != null) {
        max = form.rowSelect.length;
        cont = 0;
        if (max!=null) {
            for( i = 0; i < max; i++) {
                if (form.rowSelect[i].checked == true) {
                    checados[cont] = form.rowSelect[i].value;
                    cont++;
                }
            }
        } else {
            if (form.rowSelect.checked == true) {
                  checados[0] = form.rowSelect.value;
            }
        }
    }
    return checados;
}

function mudarSelecaoTodos( form, marcado, multSelecao ) {
    if (form.rowSelect != null) {
        var max = form.rowSelect.length;
        if (max!=null) {
            for( var i = 0; i < max; i++) {
               if(form.rowSelect[i].checked != marcado && form.rowSelect[i].disabled == false){
               		form.rowSelect[i].checked = marcado;
               		if(multSelecao){
               			onClickMultiplaSelecao(form.rowSelect[i]);
               		}
               }
            }
        } else {
             if(form.rowSelect.checked != marcado && form.rowSelect.disabled == false){
             	form.rowSelect.checked = marcado;
		        if(multSelecao){
		           	onClickMultiplaSelecao(form.rowSelect);
		        }
             }
        }
    }
}

function getIndexRow(objTR){
	var idObjTr = objTR.getAttribute('id');
	var table = objTR.parentNode;
	while(table.nodeName != 'TABLE'){
		table = table.parentNode;
	}
	var filhos = table.childNodes;
	for(var i = 0; i < filhos.length; i++){
		filho = filhos[i];
		if(filho.getAttribute('id') == idObjTr){
			return i;
		}
	}
	return null;
}

function mudarSelecaoRegistroAtual(objTR) {
    if (objTR != null) {
		var objRadio = objTR.getElementsByTagName('INPUT')[0];
       	objRadio.checked = true;
       	var grid = getGrid(objTR);
       	grid.setAttribute('selected', objTR.getAttribute('id'));
    }
}

function alterneSelecaoRegistroAtual(objTD, doc, isInputSelect) {
    if (objTD != null) {
    	var objTR = objTD.parentNode;
		var objCheck = objTR.getElementsByTagName('INPUT')[0];
       	objCheck.checked = !objCheck.checked;
       	if(isInputSelect){
       		onClickMultiplaSelecao(objCheck);
       	}
    }
}

function alterneSelecaoRegistroAtualDoubleClick(objTD, doc) {
    if (objTD != null) {
    	var objTR = objTD.parentNode;
		var objCheck = objTR.getElementsByTagName('INPUT')[0];
		//objCheck.checked = true;
       	onClickMultiplaSelecao(objCheck);
    }
}

function selecionarRegistroAtual(objTR) {
	mudarSelecaoRegistroAtual(objTR);
	selecionarRegistros();
}

/** Chamado qdo for selecionado um registro de uma searchGrid **/
function depoisSelecionarRegistros(sender) {
}

// SR_ para funï¿½ï¿½es relacionadas a search
function SR_getSearchInputs(vassoura){
	var objTable = vassoura;
	while(objTable.nodeName != "TABLE"){
		objTable = objTable.parentNode;
	}
	return objTable.getElementsByTagName("INPUT");
}

function SR_antesLimparCampos(vassoura){
	return true;
}

function SR_depoisLimparCampos(vassoura){
}

function SR_getBotaoProcurar(searchId){
	return document.getElementById(searchId);
}

function SR_getBotaoLimpar(searchId){
	return document.getElementById(searchId + '_limpar');
}

function SR_habilitaBotaoLimpar(searchId, habilitado){
	IMG_enable(SR_getBotaoLimpar(searchId), habilitado);
}

function SR_habilitaBotaoProcurar(searchId, habilitado){
	IMG_enable(SR_getBotaoProcurar(searchId), habilitado);
}

function SR_habilitaBotoes(searchId, habilitado){
	SR_habilitaBotaoLimpar(searchId, habilitado);
	SR_habilitaBotaoProcurar(searchId, habilitado);
}

function limpaCampos(obj){
	if(IMG_isEnabled(obj)){
		if(SR_antesLimparCampos(obj)){
			var arrayInput = SR_getSearchInputs(obj);
			for(i = 0; i < arrayInput.length; i++){
				arrayInput[i].value = "";
			}
			SR_depoisLimparCampos(obj);
		}
	}
}

/** Mï¿½todo para ser sobrescrito para tratar o evento de fechamento da janela de consulta **/
function onclosewindow(){
}

function SR_limparConsulta(){
	limparGrid();
	limparDadosPaginacao();
	limparFiltros(document.forms[0]);
    FF_desabilitaBotoes(document.forms[0]);

    var btProcurar = document.getElementById('pbProcurar');
    var btLimpar = document.getElementById('pbLimpar');
    var btFechar = document.getElementById('pbFechar');

    btProcurar.disabled = false;
    if(btProcurar.getAttribute('oldClassName') != null){
		btProcurar.className = btProcurar.getAttribute('oldClassName');
	}

	btLimpar.disabled = false;
    if(btLimpar.getAttribute('oldClassName') != null){
		btLimpar.className = btLimpar.getAttribute('oldClassName');
	}

	btFechar.disabled = false;
    if(btFechar.getAttribute('oldClassName') != null){
		btFechar.className = btFechar.getAttribute('oldClassName');
	}
}

function SR_getValorCelulaSearch(celula){
	var valorRetorno = "";
   	var isOculto = getAttribute(celula, 'oculto');
   	if(isOculto != null && isOculto == "true") {
    	valorRetorno = getAttribute(celula, 'beanValue');
   	} else {
       	if(celula && celula.childNodes[0]){
	  	    valorRetorno = celula.childNodes[0].nodeValue;
	   	}
   	}
   	//alert(valorRetorno +" - "+ url_encode(valorRetorno));
   	return url_encode(jQuery.trim(valorRetorno));
}

function SR_getValorCelulaSearchDoPadrao(celula){
	var valorRetorno = "";
   	var isOculto = getAttribute(celula, 'oculto');
   	if(isOculto != null && isOculto == "true") {
    	valorRetorno = getAttribute(celula, 'beanValue');
   	} else {
       	if(celula && celula.childNodes[0]){
	  	    valorRetorno = celula.childNodes[0].nodeValue;
	   	}
   	}
   	if (valorRetorno === null) {
   		return valorRetorno;
   	}
   	//alert(valorRetorno +" - "+ url_encode(valorRetorno));
   	return url_encode(url_encode((valorRetorno)));
}

function SR_selecionarTodosLimite() {
	alert(resourceMap.getResource('label.js.search.limiteSelecionarTodos'));
}

var reqMarcarTodosAjax;
var selecionarItens;
function SR_selecionaTodosAjax(selecionar){

	FF_desabilitaBotoes(document.forms[0]);
	selecionarItens = selecionar;
	var url = getSelecionarTodosServletUrl();

	if (window.XMLHttpRequest) {
		reqMarcarTodosAjax = new XMLHttpRequest();
	} else if (window.ActiveXObject) {
		reqMarcarTodosAjax = new ActiveXObject("Microsoft.XMLHTTP");
	}
	reqMarcarTodosAjax.open("GET", url, true);
	reqMarcarTodosAjax.onreadystatechange = SR_selecionaTodosAjaxResponse;
	reqMarcarTodosAjax.send(null);
}

function SR_limparSelecaoTotal() {
	var	idObjRetorno = document.getElementById('idObjRetorno').value;
	IS_clearInputParamValue(document,idObjRetorno);
	IS_zeraContadorSelecionados(document,"");
	mudarSelecaoTodos(document.forms[0], false, false);
}


function SR_selecionaTodosAjaxResponse(){
	if (reqMarcarTodosAjax.readyState == 4) {
		if (reqMarcarTodosAjax.status == 200) {
		    if( !exceptionTagPresent(reqMarcarTodosAjax) ) {
		      	var entidades = reqMarcarTodosAjax.responseXML.getElementsByTagName('isr')[0].childNodes[0];
				if(entidades && entidades.childNodes.length != 0){
					var	idObjRetorno = document.getElementById('idObjRetorno').value;
					var registrosSelecionados = IS_getInputParamValue(document,idObjRetorno);
					var entidadesChildNodesLength = entidades.childNodes.length;
					var parentDocument = parent.document;
					var ehInputSelect = isInputSelect(parentDocument.getElementById(idObjRetorno));
					var adicionarNoInputParam = [];
					for(var i = 0; i < entidadesChildNodesLength; i++){
						var registro = entidades.childNodes[i];
						var chave = "";
						var atributos = "";
						var registroChildNodesLength = registro.childNodes.length;
						for(var j = 0; j < registroChildNodesLength; j++) {
							var atributo = registro.childNodes[j];
							var nome = atributo.getAttribute('n');
							if(ehInputSelect){
								var property = document.getElementById('multSelecaoProperty').value;
								var indice = getContadorMaiorValue(document,'');
								nome = property+'['+indice+'].'+nome;
							}
							var valor = atributo.getAttribute('v');
							var pk = atributo.getAttribute('pk');
							if(pk != null && pk == 'true'){
								chave += url_encode(url_encode(valor)) + ";";
							}
							atributos += "^" + nome + "=" + url_encode(valor);
						}
						var divId = IS_createMultSelecaoDivId(idObjRetorno,chave);
						if(selecionarItens){
							if(registrosSelecionados == null || registrosSelecionados.indexOf(divId) == -1) {
								adicionarNoInputParam.push('DivID='+divId+atributos+"$");
								incrementaContadorSelecionados(document,'');
							}
						} else {
							if(registrosSelecionados != null && registrosSelecionados.indexOf(divId) != -1) {
								var posicao = registrosSelecionados.indexOf("DivID="+divId+'^');
								if(posicao > -1){
									var subV = registrosSelecionados.substring(posicao,registrosSelecionados.length);
									var resto = subV.substring(subV.indexOf('$')+1,subV.length);
									registrosSelecionados = registrosSelecionados.substring(0,posicao) + resto;
								}
								decrementaContadorSelecionados(document,'');
							}
						}
					}
					if(selecionarItens){
						addToInputParam(document,idObjRetorno,adicionarNoInputParam.join(""));
					} else {
						 var inputParam = document.getElementById(idObjRetorno+'SelectedEntitiesList');

						 if ( registrosSelecionados != null ) {
                            inputParam.value = registrosSelecionados;
                        }
					}
					mudarSelecaoTodos(document.forms[0], selecionarItens, false);
					FF_habilitaBotoes(document.forms[0]);
				}
			}
		}
	}
}

function desabilitarRegistrosSelecionados() {
	var idObjRetorno = document.getElementById('idObjRetorno');
	var objRetorno = parent.document.getElementById(idObjRetorno.value);
    var grid = getGrid(objRetorno);

    if(grid == null) {
    	return;
    }

    var idGrid = grid.id.substring(0,1).toLowerCase() + grid.id.substring(1);

  	//Cria um gridHandler para a grid de retorno
    var handler = new GridHandler(idGrid, parent.document);
    if(handler.size() > 0 && document.forms[0].rowSelect) {

		var gridSize = handler.size();
		//Pega os campos da linha 0
		var fields = handler.getRowFields(0);
		//Pega as properties dos campos
		var keys = fields.keys();
		var fieldsSize = fields.size();


    	var searchCount = document.forms[0].rowSelect.length;
        if (!searchCount) {
        	searchCount = 1;
        }

       	var linhaSel = document.getElementById( "linha_0" );
        var nodosRef = pegaReferencias( linhaSel );
	    var camposChave = getCamposChaveSearch(nodosRef);
		var searchKeys = camposChave.keys();
       	var searchKeysLength = searchKeys.length;

		var fnSort = function(a,b) {
			if (a.c>b.c) return 1;
			if (a.c<b.c) return -1;
			return 0;
		};

        if(searchCount < gridSize) {
        	var arrayChavesGridRetorno = new Array();
			for(var j = 0; j < gridSize; j++) {
				var idRegistroGridRetorno = "";
				for(var k = 0; k < searchKeysLength; k++ ) {
					var valorGridRetorno = handler.getFieldData(j,searchKeys[k]);
					idRegistroGridRetorno = idRegistroGridRetorno + valorGridRetorno + ";";
				}
				var reg = new Registro(idRegistroGridRetorno,j);
				arrayChavesGridRetorno.add(reg);
			}

			arrayChavesGridRetorno.sort(fnSort);

	        for( i = 0; i < searchCount; i++) {
	            var linhaSel = document.getElementById( "linha_" + i );
		        var nodosRef = pegaReferencias( linhaSel );
			    var camposChave = getCamposChaveSearch(nodosRef);
				var searchKeys = camposChave.keys();

				var idRegistroGridSearch = "";
				for(var k = 0; k < searchKeysLength; k++ ) {
					var valorGridSearch = camposChave.get(searchKeys[k]);
					idRegistroGridSearch = idRegistroGridSearch + valorGridSearch + ";";
				}

				var resultadoBusca = buscaBinaria(arrayChavesGridRetorno, idRegistroGridSearch, false);

				if(resultadoBusca != -1) {
					desabilitarLinhaSearch(linhaSel);
				}
			}
		} else {
			var arrayChavesGridSearch = new Array();
			for( i = 0; i < searchCount; i++) {
	            linhaSel = document.getElementById( "linha_" + i );
		        nodosRef = pegaReferencias( linhaSel );
			    camposChave = getCamposChaveSearch(nodosRef);

				var idRegistroGridSearch = "";
				for(var k = 0; k < searchKeysLength; k++ ) {
					var valorGridSearch = camposChave.get(searchKeys[k]);
					idRegistroGridSearch = idRegistroGridSearch + valorGridSearch + ";";
				}
				var reg = new Registro(idRegistroGridSearch,i);
				arrayChavesGridSearch.add(reg);
			}

			arrayChavesGridSearch.sort(fnSort);

			for(var j = 0; j < gridSize; j++) {
				var idRegistroGridRetorno = "";
				for(var k = 0; k < searchKeysLength; k++ ) {
					var valorGridRetorno = handler.getFieldData(j,searchKeys[k]);
					idRegistroGridRetorno = idRegistroGridRetorno + valorGridRetorno + ";";
				}
				var resultadoBusca = buscaBinaria(arrayChavesGridSearch, idRegistroGridRetorno, false);

				if(resultadoBusca != -1) {
					var registro = arrayChavesGridSearch[resultadoBusca];
					desabilitarLinhaSearch(document.getElementById( "linha_" + registro.i ));
				}
		    }
		}
	}
}

function Registro(chave,index){
	this.c = chave;
	this.i = index;
}

function buscaBinaria(o, v, i) {
    var h = o.length, l = -1, m;
    while(h - l > 1)
        if(url_decode(o[m = h + l >> 1].c) < url_decode(v)) l = m;
        else h = m;


        var vl = o[h];
        if((vl != undefined) && (vl != "undefined")){
    		return url_decode(vl.c) != url_decode(v) ? i ? h : -1 : h;
    	}else{
    		return -1;
    	}
}

function desabilitarLinhaSearch(linhaSel) {
	linhaSel.onmouseover = '';
	linhaSel.onmouseout = '';
	linhaSel.setAttribute('disabled', 'true');
	jQuery('#'+linhaSel.id).removeAttr('style');
	jQuery('#'+linhaSel.id).addClass('corFonteDesabilitada');
	var tdsSelecionados = jQuery('#'+linhaSel.id + ' td');
	tdsSelecionados.each( function() {
		this.onclick = '';
		this.ondblclick = '';
		this.setAttribute('title','Este registro jï¿½ estï¿½ selecionado');
	});
	var checksSelecionados = jQuery('#'+linhaSel.id + ' input');
	checksSelecionados.each( function() {
		this.disabled = true;
		if(this.getAttribute('type') == 'checkbox') {
			this.checked = 'true';
		}
	});
}


function getCamposChaveSearch(tds){
	var chaves = new Hash();
	var chavesCandidatas = new Hash();
	for( j = 0; j < tds.length; j++ ) {
		var valorRetorno = SR_getValorCelulaSearch(tds[j]);
		if(ehChave(tds[j])) {
			chaves.put(getAttribute(tds[j], 'reference'),valorRetorno);
		} else {
			var property = getAttribute(tds[j], 'property');
			if(ehChaveCandidata(property)){
				chavesCandidatas.put(getAttribute(tds[j], 'reference'),valorRetorno);
			}
		}
	}
	if(chaves.size() == 0){
		chaves = chavesCandidatas;
	}

	return chaves;
}

function renderizaAlturaSearch(searchGridId) {
	var $laConsulta = jQuery('#laConsulta');
	$laConsulta.css('display', 'none');
	var $layerFormConsulta = jQuery('#layerFormConsulta', parent.document);
	var $searchGrid = $layerFormConsulta.contents().find('#' + searchGridId);
	var altura = $searchGrid.height();
	var alturaIframe = $layerFormConsulta.height();
	var larguraIframe = $layerFormConsulta.width();
	if (jQuery.browser.msie && (jQuery.browser.version == "7.0")) {
		$laConsulta.css('height', (alturaIframe-altura-8)+"px");
	} else {
		$laConsulta.css('height', (alturaIframe-altura)+"px");
	}
	$laConsulta.css('width', (larguraIframe)+"px");
	$laConsulta.css('overflow-y', 'scroll');
	$laConsulta.css('overflow-x', 'hidden');
	$laConsulta.css('display', '');
}

function SPWUtil() { }


/** Popula os campos definidos em mapForm os valores de map
 *  map: map com atributo e valor
 *  mapForm: map com atributo e nome do campo
**/
SPWUtil.setValues = function(map, mapForm) {
  for (var property in map) {
      var propertyId = mapForm[property];
      if(propertyId !== null){
      	DWRUtil.setValue(propertyId, map[property]);
      }      
  }
};


/** Popula os campos de uma grid definidos em mapForm os valores de map
 *  map: map com atributo e valor
 *  mapForm: map com atributo e nome do campo
 *  row: numero da linha criada
**/
SPWUtil.setValuesRow = function(map, mapForm, row) {
  for (var property in map) {
      var propertyId = mapForm[property];
      if(typeof propertyId == "string" || propertyId instanceof String) {
      	propertyId = propertyId.replace("\?", row) + "_" + row;
      	DWRUtil.setValue(propertyId, map[property]);
      }      
  }
};
/**
 * 
 */
function F_getBrowserHeight() {
  var test1 = document.body.clientHeight;
  var test2 = document.documentElement.clientHeight;
  if(F_haveDoctype()) {
    return test2;
  }
  else {
    return test1;
  }
}

/**
 * 
 */
function F_getBrowserWidth() {
  var test1 = document.body.clientWidth;
  var test2 = document.documentElement.clientWidth;
  if(F_haveDoctype()) {
    return test2;
  }
  else {
    return test1;
  }
}

/**
 * 
 */
function F_haveDoctype(){
	if(jQuery.browser.msie){
		var doctype = null;
		if (document.all[0].text) 
			doctype = (document.all[0].text.indexOf('<!DOCTYPE') == 0);
		
		if (doctype == false || doctype == null) {
			var metaTag = jQuery('meta[http-equiv=X-UA-Compatible]');
			if (metaTag.length != 0) {
				return true;
			}
		}
		if(doctype){
			return true;	
		}else{
			return false;	
		}
	}else{
		if(document.doctype){
			return true;	
		}else{
			return false;	
		}
	}
}


/**
 * Retorna TRUE se o browser for Internet Explorer.
 */
function F_isIExplorer() {
    return (navigator.appName != "Netscape");
}

/** Pega o valor de um atributo do objeto * */
function getAttribute(obj, attrName) {
	if(obj == null) return null;
	if(obj.attributes) return obj.getAttribute(attrName);
	return null;
}

function getTBody(obj) {
  if(obj != null){		
	  nTBody = obj.childNodes.length;
	  for (iTBody = 0; iTBody < nTBody; iTBody++) {
	      if (obj.childNodes[iTBody].nodeName == 'TBODY') {
	         return obj.childNodes[iTBody];
	      }
	  }
  }
  return null;
}

function isTextNode(node) {
  return (node.nodeName == '#text');
}

function F_openPage(url){
	// contexto absoluto
	if(url.indexOf("/") == 0 || url.indexOf("http://") == 0){
		document.location.href = url
		return
	}
	
	// verifica se existe a tag "base"
	arrayBase = document.getElementsByTagName("BASE")
	if(arrayBase == null || arrayBase[0] == null){
		document.location.href = url
	}else{
		objBase = arrayBase[0]
		hrefBase = new String(objBase.href)
		posBarra = hrefBase.lastIndexOf("/")
		hrefBase = hrefBase.substring(0, posBarra + 1)
		document.location.href = hrefBase + url
	}
}

function F_getElementByNameOrId(doc,nameOrId){
	var obj = doc.getElementById(nameOrId);
	if(obj == null){
		var objs = doc.getElementsByName(nameOrId);
		if((objs==null)||(objs.childNodes)){
			return null;
		}
		return jQuery(objs).filter('input:first').get(0);
	}
	return obj;
}
function F_strPad(string,size,fill) {
	if (!fill) { fill = '0'; }
	while (string.length < size) {
		string += fill;
	}
	return string;
};

var alternarMostrarEsconder = function() {
	if (jQuery(this).parents('div.subTitulo').next('div').is(':visible')) {
		divEsconder();
	} else {
		divMostrar();
	}
}/** Retorna < 0 se a "data1" for menor que a "data2".
    Retorna == 0 se a "data1" for igual a "data2".
    Retorna > 0 se a "data2 for maior que a "data2" **/
function comparaData(data1, data2) {

    dataSplit1 = data1.split("/");
    dateObj1 = new Date(dataSplit1[2], Number(dataSplit1[1])-1, dataSplit1[0]);

    dataSplit2 = data2.split("/");
    dateObj2 = new Date(dataSplit2[2], Number(dataSplit2[1])-1, dataSplit2[0]);

    return dateObj1.getTime() - dateObj2.getTime();

}
/**
 * Procura o prï¿½ximo campo da tela e dï¿½ o foco para ele.
 */
function FF_GetProxCtrl(ctrlAtual) {
	if (jQuery.browser.msie) {
		nProxCtrl = ctrlAtual.sourceIndex+1;
		proxCtrl = document.all[nProxCtrl];
		while (proxCtrl != null) {
			if (proxCtrl.nodeName == "INPUT") {
				return proxCtrl;
			}
			nProxCtrl++;
			proxCtrl = document.all[nProxCtrl];
		}
	} else {
		var elements = ctrlAtual.form.elements; 
		var length = elements.length;
		for (nProxCtrl=0; nProxCtrl < length; nProxCtrl++) {
			if (ctrlAtual == elements[nProxCtrl] &&	(nProxCtrl+1) <= length) {
				return elements[nProxCtrl+1];
			}
		}
	}
	return null;
}    

/**
 * Procura o prï¿½ximo campo da tela e dï¿½ o foco para ele.
 */
function FF_GetForm(ctr) {
	while (ctr != null && ctr.tagName != "FORM") {
		ctr = ctr.parentNode;
	}
	return ctr;
}

/**
 * Varre o formulï¿½rio, e desabilita todos os inputs, checkboxes, textareas, combos,
 * e radios acrescentando tambï¿½m o estilo "d" (desabilitado) ao campo quando possï¿½vel.
 * Tambï¿½m esconde botï¿½es de grids.
 * Caso haja necessidade de algum controle especï¿½fico ficar habilitado ou visï¿½vel
 * crie um atributo no controle alwaysEnabled="true" ou alwaysVisible="true".
 */
function FF_desabilitaForm(objForm) {
	var length = objForm.length;
	for (var i = 0; i < length; i++) {
		var obj = objForm[i];
		var alwaysVisible = false;
		var alwaysEnabled = false;
		var objAlwaysVisible = obj.getAttribute('alwaysVisible');
		var objAlwaysEnabled = obj.getAttribute('alwaysEnabled');
		var objType = obj.type;
		var objReadOnly = obj.readOnly;
		var objNodeName = obj.nodeName;
		var objClassName = obj.className;
		var objDisabled = obj.disabled;
		
		if (objAlwaysVisible != null)
			alwaysVisible = new String(objAlwaysVisible).toUpperCase() == "TRUE";
		if (objAlwaysEnabled != null) 
			alwaysEnabled = new String(objAlwaysEnabled).toUpperCase() == "TRUE";
		if (objNodeName == "INPUT" && objType == "text" && !obj.readOnly && !alwaysEnabled) {
			disable(obj);
		} else if (objNodeName == "INPUT" && objType == "checkbox" && !objDisabled && !alwaysEnabled) {
			obj.disabled = true;
		} else if (objNodeName == "TEXTAREA" && !objReadOnly && !alwaysEnabled) {
			disable(obj);
		} else if (objNodeName == "SELECT" && !objDisabled && !alwaysEnabled) {
			disable(obj);
			obj.disabled = true;				
		} else if (objNodeName == "INPUT" && objType == "button" && objClassName == "spwBotaoGrid" && !alwaysVisible) {
			obj.style.visibility = "hidden";
		} else if (objNodeName == "INPUT" && objType == "radio") {
			obj.disabled = true;
		}
	}
}

function FF_desabilitaBotoes(objForm) {
	var length = objForm.length;
	for (var i = 0; i < length; i++) {
		var obj = objForm[i];
		B_desabilitaBotao(obj);
	}
}

function FF_habilitaBotoes(objForm) {
	var length = objForm.length;
	for (var i = 0; i < length; i++) {
		if (objForm[i].nodeName == "INPUT" && (objForm[i].type == "button" || objForm[i].type=="submit")) {
			objForm[i].disabled = false;
			if(objForm[i].getAttribute('oldClassName') != null){
				objForm[i].className = objForm[i].getAttribute('oldClassName');
			}           
		} 
	}
}

function FF_desabilitaGridListPaginada(objForm){
	var length = objForm.length;
	for (var i = 0; i < length; i++) {
		var obj = objForm[i];
		if(new String(obj.getAttribute('desabilitaOnSubmit')).toUpperCase() == "TRUE"){
			obj.disabled = true;
		}				
	}
}
/** Faz um trim em uma determinada string **/
function trim(str) {
	if(str != null){
		return str.replace(/(^\s*)|(\s*$)/g, "");
	}else{
		return null;
	}
}

function replaceAll(str,token1, token2){
	while(str.indexOf(token1) != -1){
		str = str.replace(token1, token2);
	}
	return str;
}


function parseStrToFloat(str){
    if(isNaN(parseFloat(str.replace(/\./g,"").replace(/\,/g,".")))){
        return parseFloat(0.0);   
    } else {
        return parseFloat(str.replace(/\./g,"").replace(/\,/g,"."));       
    }   
}

function parseFloatToStr(num,casas){
    if(isNaN(num)){
        return CN_getValorFormatado("-$."+casas,"0");   
    } else {       
        num = num.toFixed(casas);
        return CN_getValorFormatado("-$."+casas,num.toString().replace(/\./g,","));
    }
}

function FS_startsWith(str, begin){
	return str.indexOf(begin) == 0;
}

function FS_endsWith(str, end){
	if(str == end){
		return true;
	}
	if(end.length >= str.length){
		return false;
	}
	var last = str.substring(str.length - end.length );
	return (last == end);
}
/** Aplica um XSL a um XML e retorna o texto da transformaï¿½ï¿½o **/
function aplicaXSL(localXML, localXSL) {

    // Carrega o XML
    var xml = new ActiveXObject("Microsoft.XMLDOM");
    xml.async = false;
    xml.load(localXML);
    
    // Carrega o XSL
    var xsl = new ActiveXObject("Microsoft.XMLDOM");
    xsl.async = false;
    xsl.load(localXSL);
    
    // Retorna o documento transformado
    return xml.transformNode(xsl);
    
}

/** Troca os caracteres especias do HTML pelas TAGS correspondentes **/
function ajustaConteudoHTML(conteudo) {
    
    //Troca os caracteres "<" e ">" de html para ASC e escreve o documento
    splitTexto = conteudo.split(String.fromCharCode(13));
    conteudoAjustado = "";
    for (i=0;i<splitTexto.length;i++) {
        splitTexto[i] = splitTexto[i].replace(/&LT;/gi,"<");
        splitTexto[i] = splitTexto[i].replace(/&GT;/gi,">");
        conteudoAjustado = conteudoAjustado + splitTexto[i];
    }
    return conteudoAjustado;
    
}    

corExcluir = "#FFAEAE";
corSelecionada = "#FFFFCC";
corAntiga = "";
corDesabilitada = "#DADADA";
//testes readonly
//corDesabilitadaPar = "#DADADA";
//corDesabilitadaImPar = "#F2F2F2";
corLinhaPar = "#F2F2F2";
corLinhaImpar = "#FFFFFF";
rgbCorExcluir = "rgb(255, 174, 174)";

/** Retorna o diretorio da imagem **/
function getFolder(obj) {
	srcObj = new String(obj.src);
	posBarra = srcObj.lastIndexOf("/");
	return srcObj.substr(0, posBarra);
}

/** Retorna o ultimo filho da cadeia do obj **/
function getLastDesc(obj){
	last = obj.lastChild;
	while (last != null && last.lastChild != null) {
		last = last.lastChild;
	}
	return last;
}

/** Retorna o proximo node **/
function nextNode(node){
	currentNode = node;
	if (currentNode.hasChildNodes()) {
		return currentNode.childNodes[0];
	} else {
		if (currentNode.nextSibling == null) {
			pai = currentNode.parentNode;
			while (pai.nextSibling == null) {
				pai = pai.parentNode;
			}
			return pai.nextSibling;
		} else {
			return currentNode.nextSibling;
		}
	}
}

/** Seta a largura da borda do componente **/
function setLarguraBorda(obj, largura){
	obj.style.borderBottomWidth = largura;
	obj.style.borderTopWidth = largura;
	obj.style.borderLeftWidth = largura;
	obj.style.borderRightWidth = largura;
}

/** Retorna o nome do grid**/
function getNomeGrid(grid){
    return getAttribute(grid, 'nmGrid');
}

/** Retorna o tipo da grid**/
function getTipoGrid(grid){
    return getAttribute(grid, 'tipoGrid');
}

/** Retorna o objeto da grid, passando como parametro qualquer objeto dentro da grid **/
function getGrid(obj){
	while (obj != null && getNomeGrid(obj) == null) {
		obj = obj.parentNode;
	}
	return obj;
}

/** Retorna TRUE se a grid for indexada **/
function gridIsIndexed(grid) {
    return (getAttribute(grid, 'indexed') == "true");
}

/** Retorna TRUE se a grid utilizar um MAP **/
function gridIsMapped(grid) {
    return (getAttribute(grid, 'mapped') == "true");
}

/** Retorna TRUE se for multiselecaoo **/
function gridIsMultiselection(grid){
    return (getAttribute(grid, 'multiselection') == "true"); 
}

function isLinhaGrid(obj) {
    return (getAttribute(obj, 'linha') == "true");
}

/** Funcao para retornar a linha da grid **/
function getLineGrid(obj){
	//procura pelos parents do obj ate achar um que tenha atributo linha=true
	linhaSel = obj;
	while (!isLinhaGrid(linhaSel)) {
		if (linhaSel.nodeName == "BODY") {
			return null;
		}
		linhaSel = linhaSel.parentNode;
	}
	return linhaSel;
}

/** Funcao para retornar o texto antes do _ **/
function getFieldName(idNode){
  	idNode = new String(idNode);
  	posTraco = idNode.lastIndexOf("_");
    if (posTraco < 0) {
        return idNode;
    } else {
    	if(FS_endsWith(idNode,"_inputCheckBox")) {
    		idNode = idNode.substring(0, idNode.indexOf("_inputCheckBox"));
    	}
    	var indice = parseInt(getFieldIndex(idNode));
    	if(isNaN(indice)) {
	    	return idNode;
	    } else {
	      	return idNode.substr(0, posTraco);
	    }
    }
}

/** Funcao para retornar o texto depois do _ **/
function getFieldIndex(idNode){
   	idNode = new String(idNode);
    posTraco = idNode.lastIndexOf("_");
  	return idNode.substr(posTraco + 1);
}

/** Funcao para pegar o nome da grid como profixo dos campos **/
function getPrefixColGridName(pGrid) {
    nm = new String(getNomeGrid(pGrid));
    if (nm.length < 2) {
        return nm.toLowerCase();
    } else {
        return nm.substr(0,1).toLowerCase() + nm.substr(1);
    }
}

/** Funcao para retornar o ID do campo **/
function getColumnId(obj, colname, index) {
    var grid = getGrid(obj);
    gridname = getPrefixColGridName(grid);
    id = "";
    if (gridIsIndexed(grid)) {
        id=id+gridname+"["+index+"].";
    }
    if (gridIsMapped(grid)) {
        id=id+"value("+colname+")";
    } else {
        id=id+colname;
    }
    return id+"_"+index;
}

/** Funcao para retornar o ID do campo **/
function getColumnIdIndexed(gridname, colname, index) {  
	return gridname.substring(0,1).toLowerCase()+gridname.substring(1)+"["+index+"]."+colname+"_"+index;
}

/** Funcao para retornar o nome do novo campo criado **/
function getNewFieldName(obj, fieldname, index){
    var grid = getGrid(obj);
    gridname = getPrefixColGridName(grid);
    id = getFieldName(fieldname);
	if(grid.getAttribute("paginada") == "true"){
		posPonto = id.lastIndexOf(".");
		id = gridname+"["+index+"]."+id.substring(posPonto+1);
	}else if (gridIsIndexed(grid)) {
		posPonto = id.indexOf(".");
		id = gridname+"["+index+"]."+id.substring(posPonto+1);
   	}
    return id+"_"+index;
}

/** Funcao para retorna apenas o nome do campo,
    como se no fosse "mapped" e "indexed"  **/
function getInternalColName(obj, colname) {
    var grid = getGrid(obj);
    if (gridIsIndexed(grid)) {
        colname = colname.substr(colname.indexOf(".")+1);
    }
    if (gridIsMapped(grid)) {
        lenValue = new String("value(").length;
        colname = colname.substr(lenValue, colname.length-lenValue-1);
    }
    return colname;
}

/** Funcao para pegar o nro de linha na grid **/
function getNuLinhas(doc, gridname) {
	textQtLinhas = doc.getElementById("textQtLinhas"+gridname).childNodes[0];
	return new Number(textQtLinhas.nodeValue);
}

/** Funcao para escurecer uma cor **/
function escurecerCor(cor) {
	fatorEsc = 2;
	if(cor == "") {
		return "";
    } else {
    	caracHex = "0123456789ABCDEF";
        novaCor = "#";
    	for (i = 1; i < cor.length; i++) {
        	posCarac = caracHex.indexOf(cor.substr(i,1).toUpperCase());
            if (posCarac - fatorEsc < 0) {
    			novaCor += "0";
        	} else {
    			novaCor += caracHex.substr(posCarac - fatorEsc, 1);
        	}
    	}
    }
	return novaCor;
}

//muda a cor de todos os objetos text dentro da hierarquia do "obj"
function mudarCorLinha(obj, nmEvento){
    var ehBotaoDel = (obj.className == "spwImagemExcluirGrid" || nmEvento == 'del');
	var ehNovaLinha = (nmEvento == "new");
    var linhaSel = getLineGrid(obj);    
    //Seta a cor antiga de acordo com o indice da linha. Tem que pegar o indice do tr em relacao a tabela
    //e nao o indice do row, pois em caso de ordenacao vai falhar
    var linhaJQuery = jQuery(linhaSel);    
    var isTrEven = linhaJQuery.is('tr:nth-child(even)');    
    if(isTrEven){
    	corAntiga = corLinhaPar;
    }else{
    	corAntiga = corLinhaImpar;
    }
    var cor;
    if (ehNovaLinha) {
		cor = corAntiga;
	} else if (ehBotaoDel) {
        var grid = getGrid(obj);
        var index = getFieldIndex(obj.id);        
        var idAcao = getColumnId(grid, "status", index);   
        var acaoLinha = document.getElementById(idAcao);
        if (new String(acaoLinha.value).charAt(0) == 'D') {
            cor = corExcluir;
        } else {
            cor = corAntiga;
        }
    } else {
    	if (nmEvento == "focus") {
            cor = corSelecionada;
        } else {
        	var grid = getGrid(obj);
        	var index = getFieldIndex(obj.id);	       
	        var idAcao = getColumnId(grid, "status", index);   
	        var acaoLinha = document.getElementById(idAcao);
            if (new String(acaoLinha.value).charAt(0) == 'D') {
	            cor = corExcluir;
	        } else {
	            cor = corAntiga;
	        }
	        corAntiga = "";
        }
    }
    // linhaSel.style.backgroundColor = cor;
    //Varre todas os campos da linha mudando a cor
    var lastDesc = getLastDesc(linhaSel);
    var currentNode = linhaSel;
    if (lastDesc != null && currentNode != null) {
		do {
			currentNode = nextNode(currentNode);
			if (currentNode.nodeName == "TD" || 
						currentNode.tagName == "INPUT" || 
						currentNode.tagName == "SELECT" ||
						currentNode.tagName == "TEXTAREA"  
						) {
				if (cor == corExcluir) {
					jQuery(currentNode).removeClass('spwLinhaSelecao')
						.addClass(' spwLinhaExcluir ');
				} else if (cor == corSelecionada) {
					jQuery(currentNode).removeClass('spwLinhaExcluir')
						.addClass(' spwLinhaSelecao ');
				} else if (cor == corLinhaPar) {
					jQuery(currentNode).removeClass('spwLinhaSelecao')
						.removeClass('spwLinhaExcluir');
				} else if (cor == corLinhaImpar) {
					jQuery(currentNode).removeClass('spwLinhaSelecao')
						.removeClass('spwLinhaExcluir');
				}
			} 
		} while (lastDesc != currentNode);
	}
	//linhaJQuery.find('td').css('background-color',cor); testes para readonly
    //Muda o fundo do objeto selecionado
    /*if (!ehBotaoDel && obj.style.backgroundColor.toUpperCase() != corExcluir && nmEvento != 'blur') {
        obj.style.backgroundColor = "#FFFFFF";
    }*/
}

/** Copia a linha e percorre todos os seus filhos para alterar seus atributos **/
function novaLinha(obj, index, nmGrid, linhaVisivel){
    //Faz o clone do objeto "obj"
    var objNovo = obj.cloneNode(true);
    objNovo.id = "linha"+nmGrid+"_"+index;
    if(linhaVisivel == false){
	    objNovo.style.display = "none";
    }else{
    	objNovo.style.display = "";
    }

	var grid = getGrid(obj);
    configuraInputs(grid,index,objNovo.getElementsByTagName('INPUT'));
    configuraImg(grid,index,objNovo.getElementsByTagName('A'));
    configuraSelects(grid,index,objNovo.getElementsByTagName('SELECT'));
    configuraDiv(grid,index,objNovo.getElementsByTagName('DIV'));
    configuraTextArea(grid,index,objNovo.getElementsByTagName('TEXTAREA'));
	return objNovo;
}

function configuraInputs(grid,index,componentes){
	for(var i = 0; i < componentes.length; i++) {
		var componente = componentes[i];
		
		if(grid.getAttribute("paginada") == "true"){
			componente.setAttribute("readonly","true");
		}
		if((componente.type == "text" || componente.type == "hidden") && !(componente.getAttribute('inputcheckbox') == "true")){
			componente.value = "";
		}
		if (componente.type == 'checkbox' && componente.getAttribute('uncheckedValue') != null) {
			CH_updateHiddenValue(componente);
		}
		
		configuraComponente(grid,index,componente);
		if (componente.id == getColumnId(grid, "status", index)) {
			componente.value = "I";
		}
	}
}

function configuraSelects(grid, index, componentes){
	for(var i = 0; i < componentes.length; i++) {
		var componente = componentes[i];
		if(grid.getAttribute("paginada") == "true"){
			componente.setAttribute("disabled",true);
		}
		configuraComponente(grid,index,componente);
	}
}

function configuraDiv(grid, index, componentes){
	for(var i = 0; i < componentes.length; i++) {
		var componente = componentes[i];
		configuraComponente(grid,index,componente);
	}
}

function configuraTextArea(grid, index, componentes){
	for(var i = 0; i < componentes.length; i++) {
		var componente = componentes[i];
		configuraComponente(grid,index,componente);
		componente.value = "";
	}
}

function configuraImg(grid, index, componentes){
	for(var i = 0; i < componentes.length; i++) {
		var componente = componentes[i];
		configuraComponente(grid,index,componente);
		var nmGrid = getNomeGrid(grid);
		if (componente.id == getColumnId(grid, "estado"+nmGrid, index)) {
			componente.className = "spwGridEstadoI";
			componente.title = "Novo";
			if(new String(componente.getAttribute("disableOnCreate")).toUpperCase() == "TRUE"){
				componente.onclick = null;
				componente.onmouseover = null;
				componente.onmouseout = null;
				IMG_enable(componente,false);
			}
		}
		/*
		 * Implementar o "disabled" para os botï¿½es de excluir e editar a Grid.
		 */
		if ( componente.className == "spwImagemExcluirGrid" ) {
			componente.valor = "";
			var srcNode = new String(componente.src);
			var posBarra = srcNode.lastIndexOf("/");
			componente.src = srcNode.substr(0, posBarra) + "/" + "botExcluirGrid.png";
			if(new String(componente.getAttribute("disableOnCreate")).toUpperCase() == "TRUE"){
				componente.onclick = null;
				componente.onmouseover = null;
				componente.onmouseout = null;
				IMG_enable(componente,false);
			}
		}
		if ( componente.className == "spwImagemEditarGrid" ) {
			if(new String(componente.getAttribute("disableOnCreate")).toUpperCase() == "TRUE"){
				componente.onclick = null;
				componente.onmouseover = null;
				componente.onmouseout = null;
				IMG_enable(componente,false);
			}
		}
	}
}

function configuraComponente(grid,index,componente){
	var nmNode = componente.id;
	if(jQuery.trim(nmNode) == "" || nmNode == null){
		nmNode = componente.getAttribute("name");
	}
	var newId = getNewFieldName(grid,nmNode,index);
	componente.id = newId;
	componente.name = getFieldName(newId);

	if (new String(componente.id).substr(0, 8) == "spwCheck" ) {
		componente.value = "false";
	}
}

/** Cria uma linha da grid **/
function criarLinha(obj, canfocus, linhaVisivel){
    return criarNovaLinha(obj, canfocus,linhaVisivel);
}

/** Cria uma linha da grid **/
function criarNovaLinha(obj, canfocus, linhaVisivel){
	var grid = getGrid(obj);
	
	nmGrid = getNomeGrid(grid);
	nuLinha = getNuLinhas(document, nmGrid);
	
	//pega a tabela principal que contem a linha a ser duplicada
	TBprincipal = document.getElementById("tabela"+nmGrid).lastChild;
	TRprincipal = document.getElementById("linha"+nmGrid+"_-1");
    TRWidthBase = document.getElementById("trWidthBase"+nmGrid);

	//copia a linha 
	TRcopia = novaLinha(TRprincipal, nuLinha, nmGrid,linhaVisivel);
	
	jQuery(TRcopia).find('td').removeClass(' spwLinhaGridImpar ');
	jQuery(TRcopia).find('td').addClass((nuLinha % 2 == 0 ? ' spwLinhaGridPar ' : ' spwLinhaGridImpar ' ));
	
	//TBprincipal.appendChild(TRcopia);
    TBprincipal.insertBefore(TRcopia, TRWidthBase);
    //mudarCorLinha(TRcopia, "new");
    

	//coloca o foco
	if(canfocus){
        fieldFocus = getAttribute(obj, "fieldFocus");
        if (fieldFocus != null) {
            objFocus = document.getElementById(getNewFieldName(obj, fieldFocus, nuLinha));
            if (objFocus != null && !objFocus.readOnly && !objFocus.disabled && objFocus.offsetHeight != 0) {
                objFocus.focus();
                mudarCorLinha(objFocus, "focus");
            }
        }
	}
    
    //Seta o numero de linhas da grid
	textQtLinhas.nodeValue = nuLinha+1;
	depoisCriarLinha(grid, TRcopia);
	return TRcopia;
}

/**
 * Este mï¿½todo pode ser sobrescrito para adicionar um comportamento ao final
 * da criaï¿½ï¿½o da linha.
 */
function depoisCriarLinha(grid, novaLinha) {
}

function changeAction(obj, acao) {
    var grid = getGrid(obj);
    index = getFieldIndex(obj.id);
    changeActionGrid(grid, index, acao);
}

/** Coloca o "name" em  todos campos da linha do obj baseado nos seus id's **/
function changeActionGrid(grid, index, acao) {
    nmGrid = getNomeGrid(grid);
	idAcao = getColumnId(grid, "status", index);   
	acaoLinha = document.getElementById(idAcao);
    acaoOld = acaoLinha.value;
	
	idEstado = getColumnId(grid, "estado"+nmGrid, index);  
	estadoLinha = document.getElementById(idEstado);
	dirEstado = getFolder(estadoLinha);
	var hintEstado = "";
    if (acao == "U" && acaoOld == "I") { 
        acao = "I"; 
    } else if ((acao == "D" && acaoOld == "U") || 
               (acao == "U" && (acaoOld == "DU" || acaoOld == "D"))) { 
        acao = "DU";
        hintEstado = "Excluido";
    } else if (acao == "D" && acaoOld == "D") { 
        acao = "";
    } else if (acao == "D" && acaoOld == "DU") { 
        acao = "U";
    } else if ((acao == "D" && acaoOld == "I") || 
               (acao == "U" && acaoOld == "DI")) {
        acao = "DI";
        hintEstado = "Excluido";
    } else if (acao == "D" && acaoOld == "DI") {
        acao = "I";
	}
	if(acao == "U"){
		hintEstado = "Alterado";
	}else if (acao == "D"){
		hintEstado = "Excluido";
	}else if (acao == "I"){
		hintEstado = "Novo";
	}
	estadoLinha.className = "spwGridEstado" + acao;
    estadoLinha.title = hintEstado;
	acaoLinha.value = acao;

	//percorre todo os objetos da linha, alterando o "name" deles
	linhaSel = getLineGrid(estadoLinha);
    lastDesc = getLastDesc(linhaSel);
    currentNode = linhaSel;
	if (lastDesc != null && currentNode != null) {
		do {
			currentNode = nextNode(currentNode);
			//verifica se o node corrente  um input e troca seus atributos
			if (currentNode.nodeName == "INPUT" || 
					currentNode.nodeName == "SELECT" ||
					currentNode.nodeName == "TEXTAREA") {
				if ((acao == "" || acao == "DI") && (grid.getAttribute('postAllRows') != "true")) {
					currentNode.name = "";
				} else {
					currentNode.name = getFieldName(currentNode.id);
				}
			}		
		} while (lastDesc != currentNode);
	}
}

/** Implementado para melhorar performance da grid associative 
	Nï¿½o altera o name dos componentes. Espera que o name jï¿½ esteja setado.
**/
function changeActionGridInsert(grid, index) {
    var nmGrid = getNomeGrid(grid);
	var idAcao = getColumnId(grid, "status", index);   
	var acaoLinha = document.getElementById(idAcao);
    var acaoOld = acaoLinha.value;
	
	var idEstado = getColumnId(grid, "estado"+nmGrid, index);  
	var estadoLinha = document.getElementById(idEstado);
	var dirEstado = getFolder(estadoLinha);
	
	estadoLinha.className = "spwGridEstadoI";
    estadoLinha.title = "Novo";
	acaoLinha.value = "I";
}

function excluirRegistro(link) {
    if (confirm(msgKey("label.js.confirmeExclusao"),"")) {
        window.location.href = link;
    }
}

function focoNoObjId(id) {
    obj = document.getElementById(id);
    obj.focus();
}


/** Verifica se os dados da grid foram modificados **/
function dadosModificados(doc, gridname) {
    nuLinhas = getNuLinhas(doc, gridname);
    modificou = false;
    for (i = 0; i < nuLinhas; i++) {
        modificou = modificou || 
            !((doc.getElementById(getColumnIdIndexed(gridname,'status',i)).value == "") ||
            (doc.getElementById(getColumnIdIndexed(gridname,'status',i)).value == "DI"));
    }
    return modificou;
}

/** Verifica se a grid possui alguma linha que nao esta excluda **/
function possuiAlgumaLinhaNaoExcluida(doc, gridname) {
    nuLinhas = getNuLinhas(doc, gridname);
    for (i = 0; i < nuLinhas; i++) {
        if ((doc.getElementById(getColumnIdIndexed(gridname,'status',i)).value.indexOf("D") == -1)) {
            return true;
        }
    }
    return false;
}

/** Verifica se existem linhas com cdigo duplicado na grid.
    Os campos podem ser separados por ponto e virgula. **/
function validaCamposDuplicadosGrid(gridname, campos) {
    nuLinhas = getNuLinhas(document, gridname);
    chaves = "";
    sep = "%";
    arCamposChave = campos.split(";");
    //alert(campos + " - " + arCamposChave);
    for (iLinhaGrid = 0; iLinhaGrid < nuLinhas; iLinhaGrid++) {
    	//Se tiver com estados DI no deve considerar a validao
    	//pois a linha no ser aplicada pois o registro est cancelado
    	var status = getColumnIdIndexed(gridname,'status',iLinhaGrid).value;
    	if ((status != "D") && (status != "DI") && (status != "DU")) {
	    	valorAtual = "";
    		for (iCamposChave = 0; iCamposChave < arCamposChave.length; iCamposChave++) {
    			//alert(grid+"["+iLinhaGrid+"]."+arCamposChave[iCamposChave]+"_"+iLinhaGrid);
        		valorAtual = valorAtual + document.getElementById(getColumnIdIndexed(gridname,arCamposChave[iCamposChave],iLinhaGrid)).value + ";";
	    	}
    		valorAtual = sep + valorAtual + sep;
  			//alert(valorAtual + " - " + chaves);
	    	//--
    	    if (chaves.indexOf(valorAtual) != -1) {
        		return false;
	        } else {
		    	chaves = chaves + valorAtual;
        	}
    	}
    }
    return true;
}

/** Verifica se existem linhas com codigo duplicado na grid do parent.
    Os campos podem ser separados por ponto e virgula. **/
function isCamposDuplicadosGridParent(gridname, campos, registroSelecionado) {
    var nuLinhas = getNuLinhas(parent.document, gridname);    
    var valorAtual = ""; 
    var campoAtual = null;
    var arCamposChave = campos.split(";");
    var countExiste = 0;
    
    for (iLinhaGrid = 0; iLinhaGrid < nuLinhas; iLinhaGrid++) {    	
    	if (parent.document.getElementById(getColumnIdIndexed(gridname,'status',iLinhaGrid)).value != "DI") {
	    	valorAtual = "";
	    	countExiste = 0;
	    	var camposChaveSize = arCamposChave.length;
	    	
    		for (iCamposChave = 0; iCamposChave < camposChaveSize; iCamposChave++) {
    			campoAtual = parent.document.getElementById(getColumnIdIndexed(gridname,arCamposChave[iCamposChave],iLinhaGrid));
       			
    			if(campoAtual != null && campoAtual != ""){
	    			valorAtual = campoAtual.value;      		    		       			        			       			
	     			var valoresSelecionados = getValoresSelecionados(registroSelecionado);
	     			var pageReference = pageReferences[j];
	     			
	     			for( j = 0; j < valoresSelecionados.length; j++ ) {      		       	    
	     	   			var inputId;	        		
		        		if(pageReference == null || pageReference == "false"){
							inputId = parent.nomeCampoEquivalenteGrid(idObjRetorno, references[j]);
						} else {
							inputId = references[j];
						}
						
	     	   			if( inputId != null && (arCamposChave[iCamposChave] == inputId)) {       	   				
	      	   				var valor = url_decode(valoresSelecionados[j]);
	       					if(valor == valorAtual){
	       						countExiste++;
	       					}        				
	      				}
	      			} 
    			}
       		}       			  
	    	
	    	if(countExiste == camposChaveSize){
       			return true;
       		}  		
    	}
    }
    return false;
}

/** Marca todos os campos no grid **/
function selecionaTodosNaGrid(ctrl, inputName, checked) {
    var grid = getGrid(ctrl);
    nuLinhas = getNuLinhas(document, getNomeGrid(grid));
    for (iFld30734=0; iFld30734 < nuLinhas; iFld30734++) {
        colid = getColumnId(grid, inputName, iFld30734);
        col = document.getElementById(colid);
        if (col.nodeName.toUpperCase() == "INPUT") {
            if (col.type.toUpperCase() == "CHECKBOX") {
                col.checked = checked;
            } else {
                col.value = checked;
            }
        }
        changeActionGrid(grid, iFld30734, "U"); 
    }
}

function scrollHoriz(obj, idCab){
	var divCab = document.getElementById(idCab);
	divCab.scrollLeft = obj.scrollLeft;
}    /**
     * Funï¿½ï¿½o responsï¿½vel por marcar ou desmarcar todos os checkboxes de uma lista. 
     * @param status Se param for true marca, senï¿½o desmarca.
     */
    function marcarChecks( status, type ) {
        var checkboxes = document.getElementsByTagName("input");
        var textareas = document.getElementsByTagName("textarea");
        var i = 1;
        for (var a = 0; a < checkboxes.length; a++) {
            if (checkboxes[a].type == "checkbox") {
                if (checkboxes[a].id != 'row[-1].membro_-1') {
                    checkboxes[a].checked = status;
                    if (textareas[i].value == 'true') {
                        changeAction(checkboxes[a], status == true ? "" : ( type == 'PU' ? "U" : "D" ));
                    } 
                    else {
                        changeAction(checkboxes[a], status == true ? ( type == 'PU' ? "U" : "I" ) : "");
                    }
                    i++;
                }
            }
        }
    }

    function check( obj, type ) {
        var textareas = document.getElementsByTagName("textarea");
        for (var p = 0; p < textareas.length; p++) {
            if (textareas[p].id == obj.id) {
                if (obj.checked == true) {
                    if (textareas[p].value == 'true') {
                        changeAction(obj,"");
                    }
                    else {
                        changeAction(obj, type == 'PU' ? "U" : "I");
                    }
                }
                else {
                    if(textareas[p].value == 'true'){
                        changeAction(obj, type == 'PU' ? "U" : "D");
                    }
                    else {
                        changeAction(obj,"");
                    }
                }
                break;
            }
        }
    }
    function newLine(obj){
	var nmGrid = getNomeGrid(obj);
	var lineGridNew = criarLinha(obj);
	selectLine(lineGridNew)
	eval("document.line" + nmGrid + "Sel = lineGridNew");
	var obj2 = obj;
	openFolder(obj2, "detalhes");
}

/** **/
function openFolder(obj, tipo){

	//pega os objetos da grid
	var grid = getGrid(obj);
	var nmGrid = getNomeGrid(grid);
	var cabecalho = document.getElementById("cabecalho" + nmGrid);
	var cabecalho2 = document.getElementById("cabecalho2" + nmGrid);
	var tabela = document.getElementById("tabela" + nmGrid);
	var formulario = document.getElementById("form" + nmGrid);
	var pasta1 = document.getElementById("pasta" + nmGrid + "_1");
	var nmImagem1 = new String(pasta1.src);
	var pasta2 = document.getElementById("pasta" + nmGrid + "_2");
	var nmImagem2 = new String(pasta2.src);
	
	if(tipo == "detalhes"){
		
		//troca a imagem das pastas		
		pasta1.className = "bH";
		var posBarra1 = nmImagem1.lastIndexOf("/");
		pasta1.src = nmImagem1.substr(0, posBarra1) + "/abaTabelaDes.gif";
		pasta2.className = "";
		var posBarra2 = nmImagem2.lastIndexOf("/");
		pasta2.src = nmImagem2.substr(0, posBarra2) + "/abaDetalhes.gif";
	
		// esconde e mostra
		cabecalho.style.display = "none";
		cabecalho2.style.display = "";
		tabela.style.display = "none";
		formulario.style.display = "";
		
		//pega a linha clicada ou a corrente
		
		if(getLineGrid(obj) == null){
			var linhaSel = eval("document.line" + nmGrid + "Sel");
		}
		else{
			var linhaSel = getLineGrid(obj);
			selectLine(obj);
			eval("document.line" + nmGrid + "Sel = linhaSel");
		}
		
		//popula o form
		var nuLinha = getFieldIndex(linhaSel.id);
		var cabForm = formulario.lastChild;
		
		var tamanhoChildNodes = linhaSel.childNodes.length;
		
		for(var i = 0; i < linhaSel.childNodes.length ; i++){
			var texto = linhaSel.childNodes[i].childNodes[0].nodeValue;
			if(texto != null){
				var campoForm = cabForm.childNodes[i].childNodes[1].childNodes[0];
				campoForm.value = texto;
				campoForm.id = "campo_" + nuLinha;
			}
		}
		

	}
	if(tipo == "tabela"){
	
		//troca a imagem das pastas		
		pasta1.className = "";
		posBarra1 = nmImagem1.lastIndexOf("/");
		pasta1.src = nmImagem1.substr(0, posBarra1) + "/abaTabela.gif";
		pasta2.className = "spwImagemAceso";
		posBarra2 = nmImagem2.lastIndexOf("/");
		pasta2.src = nmImagem2.substr(0, posBarra2) + "/abaDetalhesDes.gif";
		
		//some e aparece
		cabecalho.style.display = "";
		cabecalho2.style.display = "none";
		tabela.style.display = "";
		formulario.style.display = "none";
				
		//
		var cabForm = formulario.lastChild;
		var linhaSel = eval("document.line" + nmGrid + "Sel");
		
		var cabFormChildTamanho = cabForm.childNodes.length;
		
		for(var i = 0; i < cabFormChildTamanho; i++){
			var texto = cabForm.childNodes[i].childNodes[1].childNodes[0].value;
			if(texto != null){;
				//alert(linhaSel.childNodes[i].childNodes[0].nodeName)
				linhaSel.childNodes[i].childNodes[0].nodeValue = texto;
			}
		}
		
	}
	
}

/** **/
function startGridEdit(nmGrid){
	var linha1 = document.getElementById("linha" + nmGrid + "_1");
	eval("document.line" + nmGrid + "Sel = linha1");
	mudarCorCampo(linha1, corSelecionada, "");
}


/** Seleciona a linha **/
function selectLine(obj){
	var objLinha = getLineGrid(obj);
	var idLinha = new String(objLinha.id);
	var nmGrid = idLinha.substr(5);
	var posTraco = nmGrid.indexOf("_");
	var nmGrid = nmGrid.substr(0, posTraco);

	mudarCorCampo(eval("document.line" + nmGrid + "Sel"), "", "");
	mudarCorCampo(objLinha, corSelecionada, "");
	
	eval("document.line" + nmGrid + "Sel = objLinha");

}



//Armazena o indice do registro editado no GF. ï¿½ utilizado para atualizar apenas a cor da linha necessï¿½ria.
var indexRegistroOld_GF = null;

var isGFChangeValues;
function GF_abrirGridForm(idGrid) {
	idGrid = jQuery.upperFirstLetter(jQuery.string(idGrid).str);//transforma a primeira letra em maiï¿½sculo - salt 33423
	var form = jQuery('#' + idGrid + "Form").get(0);
	if (form.style.display == "none") {
		GF_toggle(document.getElementById(form.id + "Toggle"));
	}
	GF_novoRegistro(idGrid);
}
function GF_getInputs(idGrid) {
	return jQuery("#"+idGrid+"Form [isInput=true]").not('[type=file]').get()
	
}
function GF_antesInserirRegistro(idGrid) {
	return true;
}
function GF_depoisInserirRegistro(idGrid) {
}
function GF_desabilitaInputSelect(gridForm) {
	var tabelas = gridForm.getElementsByTagName("TABLE");
	for (var i = 0; i < tabelas.length; i++) {
		var tabela = tabelas[i];
		if (isInputSelect(tabela)) {
			limparInputSelect(tabela.id);
			if (temFilho(tabela)) {
				desabilitaInputsFilhos(tabela, document);
			}
		}
	}
}

function waitToSubmit(){
	while(!IS_enableSubmit){
    	setTimeout('', 100);
    }
    
	return true;	
}

function GF_inserirNovaLinha(idGrid) {
	var grid = document.getElementById(idGrid);
	var form = document.getElementById(idGrid + "Form");
	var inputsText = GF_getInputs(idGrid);
	
	if(waitToSubmit()){	
		if (GF_validaCampos(inputsText) && GF_antesInserirRegistro(idGrid)) {
			var ids = new Array();
			var values = new Array();
			var input;
			for (var i = 0; i < inputsText.length; i++) {
				input = inputsText[i];
				if (input.getAttribute("inputCheckBox") != null && input.getAttribute("inputCheckBox") == "true") {
					continue;
				}
				ids[i] = input.id;
				if (input.type == "checkbox") {
					if (input.checked) {
						values[i] = input.value;
					} else {
						var uncheckedValue = input.getAttribute("uncheckedValue");
						if (uncheckedValue == null) {
							values[i] = "";
						} else {
							values[i] = uncheckedValue;
						}
					}
				} else {
					if (input.type == "radio") {
						if (input.checked) {
							values[i] = input.value;
						} else {
							ids[i] = "";
						}
					} else {
						values[i] = input.value;
					}
				}
				input.setAttribute("gf_oldValue", values[i]);
			}
			var linha;
			if (GF_isModoEdicao(idGrid)) {
				linha = form.getAttribute("edit");
				changeActionGrid(grid, linha, "U");
			} else {
				criarNovaLinha(grid, false);
				var rowCount = getNuLinhas(document, idGrid);
				linha = rowCount - 1;
			}
			for (var i = 0; i < ids.length; i++) {
				try {
					if (ids[i] != "") {
						var componente = getComponente(idGrid, ids[i], linha);
						if (componente.type == "checkbox") {
							componente.checked = (values[i] == componente.getAttribute("value"));
							CH_updateHiddenValue(componente);
						} else {
							componente.value = values[i];
						}
					}
				}
				catch (err) {
					//campo nao existe
				}
			}
			if (!GF_isModoEdicao(idGrid)) {
				GF_novoRegistro(idGrid);
				GF_scrollFimGrid(idGrid);
				//GF_atualizaCoresLinhas(idGrid, null);
				GF_desabilitaInputSelect(form);
			}
			GF_depoisInserirRegistro(idGrid);
		}
	}
}
function GF_isModoEdicao(idGrid) {
	var form = document.getElementById(idGrid + "Form");
	var edit = form.getAttribute("edit");
	return edit != null && edit != "";
}
function GF_scrollFimGrid(idGrid) {
	document.getElementById("la" + idGrid).scrollTop = document.getElementById("la" + idGrid).scrollHeight;
}
function GF_atualizaCoresLinhas(idGrid, index) {
	var trs = document.getElementById("tabela" + idGrid).getElementsByTagName("TR");
	for (var i = 0; i < trs.length; i++) {
		var currentIndex = getFieldIndex(trs[i].id);
		if((index != null && currentIndex == index) || (indexRegistroOld_GF != null && currentIndex == indexRegistroOld_GF)){
			if (trs[i].getAttribute("linha") == "true") {
				var grid = getGrid(trs[i]);
				var idAcao = getColumnId(grid, "status", i - 1);
				var acaoLinha = document.getElementById(idAcao);
				if (new String(acaoLinha.value).charAt(0) != "D") {
					mudarCorLinha(trs[i], "new");
				} else {
					mudarCorLinha(trs[i], "del");
				}
			}
		}
	}
}
function GF_validaCampos(campos) {
	for (var j = 0; j < campos.length; j++) {
		var campo = campos[j];
		var temErro = campo.className;
		if (new String(campo.getAttribute("disabled")).toUpperCase() != "TRUE") {
			if (!C_verificaValor(campo)) {
				formatType = campo.getAttribute("formatType");
				iCampo = campo.id;
				exibeMensagem(formatType, campo);
				campo.focus();
				return false;
			}
			if (new String(campo.getAttribute("obrigatorio")).toUpperCase() == "TRUE") {
				if (!C_verificaObrigatorio(campo)) {
					return false;
				}
			}
			
			if (temErro.search('erro') != -1) {
            	alert(msgKey("label.js.campoInvalido",campo.getAttribute('rotulo')));
            	campo.value = '';
            	campo.focus();
            	return false;
            }
		}
	}
	return true;
}
function GF_depoisNovoRegistro(idGrid) {
}
function GF_novoRegistro(idGrid) {
	GF_atualizaCoresLinhas(idGrid, null);
	GF_limpaCamposForm(idGrid);
	var form = document.getElementById(idGrid + "Form");
	form.setAttribute("edit", "");
	GF_setFocusCampo(idGrid, 0);
	GF_depoisNovoRegistro(idGrid);
}
function GF_limpaCamposForm(idGrid) {
	var inputs = GF_getInputs(idGrid);
	var form = document.getElementById(idGrid + "Form");
	var selects = form.getElementsByTagName("SELECT");
	if (GF_existeCampoAlterado(idGrid)) {
		if (confirm(msgKey("label.js.confirmaFormularioAlterado"))) {
			GF_inserirNovaLinha(idGrid);
		}
	}
	for (var m = 0; m < inputs.length; m++) {
		var input = inputs[m];
		if (input.getAttribute("input-select") != null) {
			limparInputSelect(input.getAttribute("input-select"));
		} else {
			if (input.type == "checkbox") {
				input.checked = false;
			} else {
				if (input.type == "radio") {
					input.checked = false;
				} else {
					inputs[m].value = "";
				}
			}
		}
		input.setAttribute("gf_oldValue", "");
		input.setAttribute("modified", "false");
	}
	for (var j = 0; j < selects.length; j++) {
		var select = selects[j];
		select.selectedIndex = 0;
		select.setAttribute("modified", "false");
	}
}
function GF_existeCampoAlterado(idGrid) {
	var inputs = GF_getInputs(idGrid);
	var form = document.getElementById(idGrid + "Form");
	if (GF_isModoEdicao(idGrid)) {
		for (var m = 0; m < inputs.length; m++) {
			var input = inputs[m];
			if (input.type == "checkbox" || input.type == "radio") {
				if (input.checked && input.getAttribute("gf_oldValue") != input.value) {
					return true;
				} else {
					if (!input.checked && input.getAttribute("gf_oldValue") == input.value) {
						return true;
					}
				}
			} else {
				if (input.getAttribute("gf_oldValue") != input.value) {
					return true;
				}
			}
		}
	}
	return false;
}
function GF_antesEditarRegistro(idGrid, index) {
	return true;
}
function GF_depoisEditarRegistro(idGrid) {
}
function GF_marcaInputsComoNaoModificados(grid) {
	var inputs = GF_getInputs(grid.id);
	for (var m = 0; m < inputs.length; m++) {
		var input = inputs[m];
		try {
			input.setAttribute("modified", "false");
		}
		catch (err) {
			//campo nao existe..
		}
	}
}
function GF_editaRegistro(obj, posicionarFoco) {
	var grid = getGrid(obj);
	var idGrid = grid.id;
	var index = getFieldIndex(obj.id);
	var idGridForm = idGrid + "Form";
	var form = document.getElementById(idGridForm);
	if (form.getAttribute("editable") != "false") {
		if (GF_antesEditarRegistro(idGrid, index)) { 
			var form = document.getElementById(idGridForm);
			var objLinha = obj;
			while (objLinha != null && objLinha.nodeName != "TR") {
				objLinha = objLinha.parentNode;
			}
			if (posicionarFoco) {
				GF_abrirGridForm(idGrid);
			}
			
			GF_atualizaCoresLinhas(idGrid, index);			
			indexRegistroOld_GF = getFieldIndex(obj.id);
			
			if (obj.readOnly) {
				mudarCorLinha(objLinha, "focus");
			} else {
				mudarCorLinha(obj, "focus");
			}
			GF_limpaCamposForm(idGrid);						
			var idObjLinha = objLinha.id; 
			var linha = idObjLinha.substring(idObjLinha.indexOf("_") + 1);
			form.setAttribute("edit", linha);
			var inputs = GF_getInputs(idGrid);
			for (var m = 0; m < inputs.length; m++) {
				var input = inputs[m];
				try {
					var inputType = input.type;					
					if (inputType == "checkbox" || inputType == "radio") {
						var componente = getComponente(idGrid, input.id, linha);
						var componenteType = componente.type;						
						if (componenteType == "checkbox" || componenteType == "radio") {
							if (componente.checked) {
								input.checked = true;
								input.setAttribute("gf_oldValue", input.value);
							} else {
								input.checked = false;
								var uncheckedValue = input.getAttribute("uncheckedValue");
								if (uncheckedValue == null) {
									input.setAttribute("gf_oldValue", "");
								} else {
									input.setAttribute("gf_oldValue", uncheckedValue);
								}
							}
							if (inputType == "checkbox") {
								CH_updateHiddenValue(input);
							}
						} else {
							var componenteValue = componente.value;
							if (componenteValue == input.value) {
								input.checked = true;
								input.setAttribute("gf_oldValue", input.value);
							} else {
								input.checked = false;
								input.setAttribute("gf_oldValue", "");
							}
						}
					} else {
						var inputDaGrid = getComponente(idGrid, input.id, linha);
						
						if (input.tagName == "SELECT" && inputDaGrid.value == "") {
							input.selectedIndex = 0;
						} else {
							input.value = inputDaGrid.value;
						}
						input.setAttribute("gf_oldValue", input.value);
						//Responsavel por copiar o formato da linha da grid para o grid:gridForm
						if (inputDaGrid.getAttribute("formato")) {
							input.setAttribute("formato", inputDaGrid.getAttribute("formato"));
						}
					}
				}
				catch (err) {
					//campo nao existe..
				}
			}
			if (posicionarFoco) {
				GF_setFocusCampo(idGrid, 0);
			}
			GF_marcaInputsComoNaoModificados(grid);
			GF_depoisEditarRegistro(idGrid);
		} else {
			//se for false ele permite somente a alteraï¿½ï¿½o de cores das linhas selecionadas.
			var objLinha = obj;
			while (objLinha != null && objLinha.nodeName != "TR") {
				objLinha = objLinha.parentNode;
			}
			if (posicionarFoco) {
				GF_abrirGridForm(idGrid);
			}
			GF_atualizaCoresLinhas(idGrid, index);
			if (obj.readOnly) {
				mudarCorLinha(objLinha, "focus");
			} else {
				mudarCorLinha(obj, "focus");
			}
		}
	}
}

function GF_doEvent(event) {
	if ((window.event ? event.keyCode : event.which) == 13) {
		var grid;
		if (jQuery.browser.msie) {
			grid = getGrid(event.srcElement);
		} else {
			grid = getGrid(event.target);
		}
		C_CancelaEvento(event);
		GF_inserirNovaLinha(grid.id);
	}
}
function GF_setFocusCampo(idGrid, index) {
	try {
		GF_getInputs(idGrid)[index].focus();
	}
	catch (err) {
		//campo nao existe..
	}
}
function GF_onfocus(linha, event) {
	if (jQuery.browser.mozilla) {
		isGFChangeValues = false;
	}
	GF_editaRegistro(linha, false);
	isGFChangeValues = true;
}
function GF_onchange(campo) {
	campo.setAttribute("modified", true);
}
function GF_onblur(obj) {
	var grid = getGrid(obj);
	var form = document.getElementById(grid.id + "Form");
	if (form.getAttribute("editable") != "false") {
		var objLinha = obj;
		while (objLinha != null && objLinha.nodeName != "TR") {
			objLinha = objLinha.parentNode;
		}
		mudarCorLinha(objLinha, "focus");	
		//GF_editaRegistro(objLinha,false);
		if (!jQuery.browser.mozilla || isGFChangeValues) {
			GF_changeValuesFromGridToGridForm(objLinha);
		}
	}
}

//cï¿½digo replicado de spwImageHigh para que alteraï¿½ï¿½es em tal arquivo nï¿½o reflitam no gridForm.
function GF_toggle(obj) {
	var div = jQuery('#' + obj.getAttribute("divId")).get(0);
	if (obj != null) {
		if (div.style.display == "none") {
			div.style.display = "";
			IH_mOver(obj);
			obj.src = obj.src.substring(0, obj.src.indexOf("-c")) + obj.src.substring(obj.src.indexOf("-c") + 2, obj.src.length);
			IH_mOver(obj);
		} else {
			div.style.display = "none";
			IH_mOver(obj);
			obj.src = obj.src.substring(0, obj.src.length - 4) + "-c" + obj.src.substring(obj.src.length - 4, obj.src.length);
			IH_mOver(obj);
		}
	}
}
function GF_changeValuesFromGridToGridForm(obj) {
	var grid = getGrid(obj);
	var linha = getFieldIndex(obj.id);
	//condiï¿½ï¿½o acrescentada para se o mï¿½todo GF_antesEditarRegistro for sobreescrito retornando false,
	//nï¿½o jogue os valores da grid para os campos do gridForm
	if (GF_antesEditarRegistro(grid.id, linha)) {
		var objLinha = obj;
		while (objLinha != null && objLinha.nodeName != "TR") {
			objLinha = objLinha.parentNode;
		}
		var linha = objLinha.id.substring(objLinha.id.indexOf("_") + 1);
		var inputs = GF_getInputs(grid.id);
		for (var m = 0; m < inputs.length; m++) {
			var input = inputs[m];
			try {
				if (input.type == "checkbox" || input.type == "radio") {
					var componente = getComponente(grid.id, input.id, linha);
					if (componente.type == "checkbox" || componente.type == "radio") {
						if (componente.checked) {
							input.checked = true;
							input.setAttribute("gf_oldValue", input.value);
						} else {
							input.checked = false;
							var uncheckedValue = input.getAttribute("uncheckedValue");
							if (uncheckedValue == null) {
								input.setAttribute("gf_oldValue", "");
							} else {
								input.setAttribute("gf_oldValue", uncheckedValue);
							}
						}
						if (input.type == "checkbox") {
							CH_updateHiddenValue(input);
						}
					} else {
						var componenteValue = componente.value;
						if (componenteValue == input.value) {
							input.checked = true;
							input.setAttribute("gf_oldValue", input.value);
						} else {
							input.checked = false;
							input.setAttribute("gf_oldValue", "");
						}
					}
				} else {
					var inputDaGrid = getComponente(grid.id, input.id, linha);
					if (input.tagName == "SELECT" && inputDaGrid.value == "") {
						input.selectedIndex = 0;
					} else {
						input.value = inputDaGrid.value;
					}
					input.setAttribute("gf_oldValue", input.value);
					//Responsavel por copiar o formato da linha da grid para o grid:gridForm
					if (inputDaGrid.getAttribute("formato")) {
						input.setAttribute("formato", inputDaGrid.getAttribute("formato"));
					}
				}
			}
			catch (err) {
				//campo nao existe..
			}
		}
	}
}

function getComponente(gridId, inputId, linha){ 
	return document.getElementById(getColumnIdIndexed(gridId, inputId, linha));
}

//Variï¿½vel que armazena o objeto utilizado pelo inputSelect para copiar os valores e guarda a velha para alterar a cor
var tableItemMenuObjNew;
var tableItemMenuObjOld;

//Abre o gridForm do itemMenu
function GF_abrirGridFormItemMenu(idGrid, obj) {
	tableItemMenuObjOld = tableItemMenuObjNew;
	tableItemMenuObjNew = obj;
	mudaCoresTds(tableItemMenuObjOld, "");
	mudaCoresTds(tableItemMenuObjNew, "#FFFFCC");
	limparInputSelect("consTela");
	idGrid = jQuery.upperFirstLetter(jQuery.string(idGrid).str);
	var form = document.getElementById(idGrid + "Form");
	form.style.display = "";
}

function paginar(orientacao,form,action,numRegs,objName,nuMaxPags,
		orderByProperty,coluna,orderBySelected){
	
	if(!isSearchFilterValid()){
		return;
	}	
		
	FF_desabilitaBotoes(form);	
	var target = document.getElementById(objName);
	var orderBy = orderByProperty;
	var orderByAntigo = target.getAttribute('orderBy'); 
	var proxima = null;
	
	if(orderBy == 'null'){
		orderBy = orderByAntigo;
		if(orderBy == 'null'){
			orderBy = '';
		}
	}
	if(orderBy != ''){
		if(orderByAntigo.indexOf(orderByProperty) != -1){
			if(orderByAntigo.indexOf('asc') != -1){
				orderBy = orderByProperty + ' desc';
				refreshEstilosColunas(coluna,'desc');
			} else {
				orderBy = orderByProperty + ' asc';
				refreshEstilosColunas(coluna,'asc');
			}
		} else if(orderBy.indexOf('asc') == -1 && orderBy.indexOf('desc') == -1){
			orderBy = orderBy + ' asc';
			refreshEstilosColunas(coluna,'asc');
		}
	}
	if(orientacao == 'primeiro'){
		if(orderByProperty == 'null' && target.value == '0' && orderBySelected == null){
			return;
		}
		target.value = '0';
	} else if(orientacao == 'ultimo'){
		if(target.value == nuMaxPags){
			return;
		}
		target.value = nuMaxPags;
	} else if(orientacao == 'proximo'){
		if(target.value == nuMaxPags){
			return;
		}
		proxima = new Number(target.value) + 1;
		if(nuMaxPags >= proxima){
			target.value = proxima;
		} else {
			alert(msgKey('label.js.paginaLimite',nuMaxPags+1));
			return;
		}
	} else if(orientacao == 'anterior'){
		if(target.value == '0'){
			return;
		}
		target.value = new Number(target.value) - 1;
		if(target.value < 0){
			target.value = '0';
			alert(msgKey('label.js.paginaNegativa',''));
			return;
		}
	} else if(orientacao == 'estaPosicao'){
		if(target.value < 0){
			target.value = '0';
			alert(msgKey('label.js.paginaNegativa',''));
			return;
		} else if (target.value > nuMaxPags){
			alert(msgKey('label.js.paginaLimite',nuMaxPags+1));
			return;
		}
	}	
	var formAction = jQuery(form).attr('action');
	if(formAction.indexOf("?") == -1){
		formAction = formAction + '?';
	} else {
		formAction = formAction + '&';
	}
	
	formAction = formAction+objName+'GridPageSize=' + numRegs +
	 '&'+objName+'GridPage=' + target.value+'&'+objName+
	 'GridPageOrderBy='+orderBy+
	 "&gridPaginadaName="+objName;
	
	 if(document.getElementById("multiselectinputselect") != null){
		var contador = document.getElementById('contador').value;
	 	formAction += "&contador="+contador;
	 }
	 
	 if(orderBySelected != 'false' && orderBy.indexOf('checkboxes')!=-1){
	 	formAction += "&orderBySelected=true";
	 	if(contador == '0' || contador == ''){
	 		return;
	 	}
	 } else {
	 	formAction += "&orderBySelected=false";
	 }
	 
	 jQuery(form).attr('action', formAction);
	 
	 action = formAction;
	 
	 jQuery(form).submit();
}

function executePesquisaPaginada( form, action, objName ) {
	if(!isSearchFilterValid()){
		document.getElementById('pbProcurar').disabled = false;
		return;
	}
	
	//Limpar os inputParans, pois em determinados casos, a cada pesquisa estava mantendo os jï¿½ valores selecionados
	cleanOldInputParans();
    if(verificaCamposObrigatorios(form)){
	    var formAction = jQuery(form).attr('action');
		if(formAction.indexOf("?") == -1){
			formAction = formAction + '?';
		} else {
			formAction = formAction + '&';
		}
		IS_restauraEstadoSelecao();
	 	formAction = formAction+objName+'GridPage=0';
	 	
	 	// jQuery(formAction).attr('action', formAction);
	 	jQuery(form).attr('action', formAction);
	 	
	 	/* Foi comentado devido a salt 37561
	 	 * Pois este trecho estï¿½ obrigando que a jsp de search esteja na raiz do WebRoot na pasta search
        var formURL = document.getElementById("requesterUrl");
        if(formURL) {
            var valorCampo = formURL.value;
            if(valorCampo) {
                var index = valorCampo.indexOf('/search/');
                if(index > 0) {
                    formURL.value = valorCampo.substr(index);
                }
            }
        }*/
    	form.submit();
    } else {
    	document.getElementById('pbProcurar').disabled = false;
    }   
}

function refreshEstilosColunas(obj,estilo){
	if(obj == ''){
		return;
	}
	var objTR = obj.parentNode;
	var tds = objTR.childNodes;
	
	var tdsTamanho = tds.length;
	
	for(var i = 0; i < tdsTamanho; i++){
		if(tds[i].tagName == 'TD'){
			tds[i].className = tds[i].className.substring(0,(tds[i].className.indexOf(' spwCabecalhoAsc') != -1? tds[i].className.indexOf(' spwCabecalhoAsc'):tds[i].className.length));
			tds[i].className = tds[i].className.substring(0,(tds[i].className.indexOf(' spwCabecalhoDesc') != -1? tds[i].className.indexOf(' spwCabecalhoDesc'):tds[i].className.length));
			tds[i].setAttribute('ord', null);
		}
	}
	if(estilo == 'asc'){
		obj.setAttribute('ord', 'asc');
		obj.className = obj.className + ' spwCabecalhoAsc';
	} else if(estilo == 'desc'){
		obj.setAttribute('ord', 'des');
		obj.className = obj.className + ' spwCabecalhoDesc';
	}
	
}

function getParamNaLinhaGrid(obj,property,nomeGrid){
    var objTr = obj;
    while(objTr.nodeName != 'TR' && objTr != null){
        objTr = objTr.parentNode;
    }
    var id = objTr.getAttribute('id');
    var index = id.substring(id.indexOf('_')+1,id.length);
    var finalDoNome = property.substring(property.lastIndexOf('.'),property.length)+'_'+index;
    if(finalDoNome.substring(0,1)!= '.'){
       finalDoNome = '.'+finalDoNome;
    }
    var nomeComp = nomeGrid+'['+index+']'+ finalDoNome;    
    return url_encode(new String(document.getElementById(nomeComp).value));
} 

function habilitaBotao(botaoId){
	var botao = document.getElementById(botaoId);
	botao.disabled = false;
	indice = botao.className.indexOf('-');
	if(indice != -1){
		botao.className = botao.className.substring(botao.className, indice);
	}
}

function desabilitaBotao(botaoId){
	var botao = document.getElementById(botaoId);
	botao.disabled = true;
	var indice = botao.className.indexOf('-');
	if(indice == -1){
		botao.className = botao.className + '-d';
	}
}

function depoisPaginarGrid(sender){
}/** Marca todos os itens na grid Paginada Checkbox **/
function selecionaTodosNaGridPaginadaCheckbox(ctrl) {
	var $ctrl = jQuery(ctrl);
	//Funï¿½ï¿½o para ser sobreescrita caso necessï¿½rio
	antesSelecionarTodosRegistrosGridPaginadaCheckBox($ctrl);
	
	var check = ctrl.checked;
    var grid = getGrid(ctrl);
    var gridId = grid.id;
    nuLinhas = getNuLinhas(document, getNomeGrid(grid));
    var $col_CbMultSel;
    for (i=0; i < nuLinhas; i++) {
    	$col_CbMultSel = jQuery('input[id$=cbMultSel_'+i+']'); //document.getElementById("cbMultSel"+gridId+"_"+i);
    	//Se existir objeto
    	if($col_CbMultSel){
    		//Se o estado atual do objeto for diferente do estado do checkbox seleciona/deseleciona todos
    		if($col_CbMultSel.attr('checked') != check){    			
    			$col_CbMultSel.attr('checked',check);
    			selecionaNaGridPaginadaCheckbox($col_CbMultSel);    			    			
    		}    		   		 
    	}        
    }
    
    //Funï¿½ï¿½o para ser sobreescrita caso necessï¿½rio
    depoisSelecionarTodosRegistrosGridPaginadaCheckBox($ctrl);
}

/*Marca um iten especï¿½fco na grid Paginada Checkbox */
function selecionaNaGridPaginadaCheckbox(ctrl) {
	var $ctrl = jQuery(ctrl);
	//Funï¿½ï¿½o para ser sobreescrita caso necessï¿½rio
	antesSelecionarRegistroGridPaginadaCheckBox($ctrl);	     			    			
	
	//Muda os names para o submit	
	changeNameGridPaginadaCheckbox($ctrl);  			    				
    
    //Funï¿½ï¿½o para ser sobreescrita caso necessï¿½rio
    depoisSelecionarRegistroGridPaginadaCheckBox($ctrl);
}

/** Coloca o "name" em  todos campos da linha do obj baseado nos seus id's **/
function changeNameGridPaginadaCheckbox($ctrl) { 	
	var checked = $ctrl.attr('checked');
  		    
	//percorre todo os objetos da linha, alterando o "name" deles
	var linhaSel = $ctrl.parents("tr:first").get(0);
    lastDesc = getLastDesc(linhaSel);
    currentNode = linhaSel;
	if (lastDesc != null && currentNode != null) {
		do {
			currentNode = nextNode(currentNode);
			//verifica se o node corrente  um input e troca seus atributos
			if (currentNode.nodeName == "INPUT" || 
				currentNode.nodeName == "SELECT" ||
				currentNode.nodeName == "TEXTAREA") {
				//Se o input estiver com o atributo submit = true deve ser colocado ou retirado o name
				if(currentNode.getAttribute("submit") == "true"){
					if(checked){
						currentNode.setAttribute("name", getGridPaginadaCheckBoxFieldName(currentNode));											
					}else{
						currentNode.removeAttribute("name");
					}
				}				
			}		
		} while (lastDesc != currentNode);
	}
}

function getGridPaginadaCheckBoxFieldName(){
	var property = currentNode.getAttribute("name_");
	var id = (new String(currentNode.id)).split(".");
	var posF = id[0];
	
	return posF+"."+property;	
}

/*ï¿½ utilizado o referenceName da grid, e tambï¿½m concatenado com 'GridPaginadaCurrentPage' para filtrar/garantir pelo name do input*/
function zeraGridPaginadaCurrentPageById(referenceName){
	var currentPageInputName;
	if(!referenceName.contains('GridPaginadaCurrentPage')){
		currentPageInputName = referenceName + 'GridPaginadaCurrentPage';
	}	
		
	var $currentPage = jQuery('#'+referenceName).filter('[name=' + currentPageInputName + ']');
	zeraGridPaginadaCurrentPageByObj($currentPage);	
}

function zeraGridPaginadaCurrentPageByObj(jQueryObj){	
	jQueryObj.val('0');
}

/*ï¿½ utilizado o id da grid para deselecionar todos os checkbox da gridPaginadaCheckbox*/
function deselecionaGridPaginadaCheckboxOnPagination(gridId){
	jQuery('#checkBoxMultSelGridPaginadaHeader'+gridId).attr('checked',false);
	
	jQuery('#tabela'+gridId).find('tr').filter(function(){
		var $checkboxs = jQuery(this).find(':checkbox:checked');
		var $checkbox = $checkboxs.filter('[id*=cbMultSel_]');
		if($checkbox.size() > 0){
			$checkbox.attr('checked',false);
			return;
		}						
	});	
}

/*ï¿½ utilizado o id da grid para retornar o objeto jQuery com os trï¿½s selecionados*/
function getTRsSelecionadosGridPaginadaCheckBox(gridId){
	var $trs = jQuery('#tabela'+gridId).find('tr').filter(function(){
		var $this = jQuery(this);
		return ($this.find(':checkbox:checked').filter('[id*=cbMultSel_]').size() > 0);			
	});
	
	return $trs;					 
}

/*Funï¿½ï¿½o criada para ser sobreescrita caso seja necessï¿½rio adicionar algum comportamento antes de fazer a seleï¿½ï¿½o de um elementos*/
function antesSelecionarRegistroGridPaginadaCheckBox($ctrl){
}

/*Funï¿½ï¿½o criada para ser sobreescrita caso seja necessï¿½rio adicionar algum comportamento depois de fazer a seleï¿½ï¿½o de um elementos*/
function depoisSelecionarRegistroGridPaginadaCheckBox($ctrl){
}

/*Funï¿½ï¿½o criada para ser sobreescrita caso seja necessï¿½rio adicionar algum comportamento antes de fazer a seleï¿½ï¿½o de todos elementos*/
function antesSelecionarTodosRegistrosGridPaginadaCheckBox($ctrl){
}

/*Funï¿½ï¿½o criada para ser sobreescrita caso seja necessï¿½rio adicionar algum comportamento depois de fazer a seleï¿½ï¿½o de todos elementos*/
function depoisSelecionarTodosRegistrosGridPaginadaCheckBox($ctrl){
}
/* cria uma nova linha(tabela) filha */
function GT_newChild(obj){
	//pega a tabela da linha e copia
	var objTable = getTable(obj);
	var objTableNew = objTable.cloneNode(true);
	
	//seta as cores da TD clonada para branco
	mudaCoresTds(objTableNew, "");
	
	//cria a indentaï¿½ï¿½o
	var td1 = objTableNew.getElementsByTagName("TD")[0];
	var tdWidth = new Number(td1.width);
	td1.width = tdWidth + 20;
	
	//insere a tabela clonada e um div depois
	var objDiv = objTable.nextSibling;
	var newDiv = document.createElement("DIV");
	if(objDiv.childNodes[0] != null){
		objDiv.insertBefore(newDiv, objDiv.childNodes[0]);
		objDiv.insertBefore(objTableNew, objDiv.childNodes[0]);
	}else{
		objDiv.appendChild(objTableNew);
		objDiv.appendChild(newDiv);
	}
	
	//altera o name dos inputs da linha nova
	addItemMenuTable(objTableNew);
	cleanValueTable(objTableNew);
		
	//altera o name dos inputs dos irmaos da linha nova
	var objActual = objTableNew.nextSibling;
	while(objActual != null){
		if(objActual.nodeName == "TABLE"){
			increaseTable(objActual);	
		}
		objActual = objActual.nextSibling;
	}	

	printCode();
}

/* cria uma nova linha(tabela) abaixo */
function GT_newBrother(obj){
	//pega a tabela da linha e copia
	var objTable = getTable(obj);
	var objTableNew = objTable.cloneNode(true);
	cleanValueTable(objTableNew);
	//seta as cores da TD clonada para branco
	mudaCoresTds(objTableNew, "");
	
	//pega o proximo objeto depois do div da table
	var objNext = objTable.nextSibling.nextSibling;
	
	//insere a tabela e o div
	var newDiv = document.createElement("DIV");	
	if(objNext == null){
		objTable.parentNode.appendChild(objTableNew);
		objTable.parentNode.appendChild(newDiv);
	}else{
		objTable.parentNode.insertBefore(objTableNew, objNext);
		objTable.parentNode.insertBefore(newDiv, objNext);
	}
	
	//aumenta o index das proximas linhas
	var objActual = objTableNew;
	while(objActual != null){
		if(objActual.nodeName == "TABLE"){
			increaseTable(objActual);	
		}
		objActual = objActual.nextSibling;
	}

	printCode();
}

function GT_deleteRow(obj){
	var objLayer = document.getElementById("layerScroll");
	if(objLayer.getElementsByTagName("TABLE").length == 1){
		return
	}
	if(confirm(msgKey("label.js.confirmeExclusao",""))){
		var objTable = getTable(obj);
		
		//altera o name dos inputs das linhas seguintes
		var objActual = objTable.nextSibling;		
		while(objActual != null){
			if(objActual.nodeName == "TABLE"){
				decreaseTable(objActual);	
			}
			objActual = objActual.nextSibling;			
		}		
		//		
		var objDiv = objTable.nextSibling;					
		objTable.parentNode.removeChild(objTable);		
		objDiv.parentNode.removeChild(objDiv);
		
	}
	printCode();
}

function getTable(obj){
	var table = obj
	while(table.nodeName != "TABLE"){
		table = table.parentNode;
	}
	return table;
}

function printCode(){	
	return
	var objLayer = document.getElementById("layerScroll");
	var objCode = document.getElementById("code");
	objCode.value = objLayer.innerHTML;
	
}

function increaseInput(objInput, increaseValue){
	var nameObj = new String(objInput.name);
	var posKey1 = nameObj.lastIndexOf("[");
	var posKey2 = nameObj.lastIndexOf("]");								
	var nuIndex = new Number(nameObj.substring(posKey1 + 1, posKey2));
	objInput.name = nameObj.substring(0, posKey1 + 1) + (nuIndex + increaseValue) + nameObj.substring(posKey2);
}

function increaseTable(objTable){
	var arrayInputs = objTable.getElementsByTagName("INPUT");
	var oldInput = "";
	var newInput = "";
	
	var arrayInputTamanho = arrayInputs.length;
	
	for(var i = 0; i < arrayInputTamanho; i++){
		if(i == 0){
			oldInput = arrayInputs[0].name;
		}
		increaseInput(arrayInputs[i], 1);
		if(i == 0){
			newInput = arrayInputs[0].name;
		}
	}
	/*var arraySelect = objTable.getElementsByTagName("SELECT");	
	for(i = 0; i < arraySelect.length; i++){
		increaseInput(arraySelect[i], 1);
	}*/	
	changeChildsTable(objTable, newInput, oldInput);
}

function decreaseTable(objTable){
	var arrayInputs = objTable.getElementsByTagName("INPUT");
	var oldInput = "";
	var newInput = "";
	
	var arrayInputTamanho = arrayInputs.length;
	
	for(var i = 0; i < arrayInputTamanho; i++){
		if(i == 0){
			oldInput = arrayInputs[0].name;
		}
		increaseInput(arrayInputs[i], -1);
		if(i == 0){
			newInput = arrayInputs[0].name;
		}
	}
	/*var arraySelect = objTable.getElementsByTagName("SELECT");
	for(i = 0; i < arraySelect.length; i++){
		increaseInput(arraySelect[i], -1);
	}*/	
	changeChildsTable(objTable, newInput, oldInput);
}

function addItemMenuTable(objTable){
	var arrayInputs = objTable.getElementsByTagName("INPUT");
	var oldInput = "";
	var newInput = "";
	
    var arrayInputTamanho = arrayInputs.length;
	
	for(var i = 0; i < arrayInputTamanho; i++){
		if(i == 0){
			oldInput = arrayInputs[0].name;
		}
		addItemMenuInput(arrayInputs[i]);
		if(i == 0){
			newInput = arrayInputs[0].name;
		}
		
	}
	/*var arraySelect = objTable.getElementsByTagName("SELECT");	
	for(i = 0; i < arraySelect.length; i++){
		addItemMenuInput(arraySelect[i]);
	}*/	
	changeChildsTable(objTable, newInput, oldInput);
}

function addItemMenuInput(objInput){
	var nameObj = new String(objInput.name);
	var posKey = nameObj.lastIndexOf("]");									
	objInput.name = nameObj.substring(0, posKey + 1) + ".itemMenu[0]" + nameObj.substring(posKey + 1);
}

function cleanValueTable(objTable){
	var arrayInputs = objTable.getElementsByTagName("INPUT");
	
	var arrayInputTamanho = arrayInputs.length;
	
	for(var i = 0; i < arrayInputTamanho; i++){
		//Para o checkBox ï¿½ necessï¿½rio manter o valor, senï¿½o nï¿½o ï¿½ salvo. 				
		if(arrayInputs[i].type != "checkbox"){	
			arrayInputs[i].value = "";
		}
	}
	/*var arraySelect = objTable.getElementsByTagName("SELECT");	
	for(i = 0; i < arraySelect.length; i++){
		arraySelect[i].selectedIndex = 0;
	}*/	
}

//altera o name de todos inputs da div
function changeChildsTable(objTable, newInput, oldInput){
	//pega a posiï¿½ï¿½o do "valor antigo do name" do input
	var posLastPointOldInput = oldInput.lastIndexOf(".");
	//pega a posiï¿½ï¿½o do "valor novo do name" do input
	var posLastPointNewInput = newInput.lastIndexOf(".");
	//recupera o novo prefixo com base no "valor novo do name" do input
	var prefixeName = newInput.substring(0, posLastPointNewInput);	
	//pega os elementos dentro da div
	var objDiv = objTable.nextSibling;
	var arrayInputs = objDiv.getElementsByTagName("INPUT");
	
	var arrayInputTamanho = arrayInputs.length;
	
	for(var i = 0; i < arrayInputTamanho; i++){
		nameInput = new String(arrayInputs[i].name);		
		arrayInputs[i].name = prefixeName + nameInput.substring(posLastPointOldInput);		
	}
	/*var arraySelect = objDiv.getElementsByTagName("SELECT");	
	for(i = 0; i < arraySelect.length; i++){
		nameSelect = new String(arraySelect[i].name);
		arraySelect[i].name = prefixeName + nameSelect.substring(posLastPointOldInput);
	}*/	
}

/* Copia o valor do inputSelect de telas para os campos referentes a tela do item menu */
function GT_copyFromInputSelectToItemMenu(){
	if(confirm('Deseja realmente alterar este item?')){
		var objTable = getTable(tableItemMenuObjNew);	
		var arrayInputs = objTable.getElementsByTagName("INPUT");	
		
		var arrayInputTamanho = arrayInputs.length;
		
		for(var i = 0; i < arrayInputTamanho; i++){
			var nameObj2 = new String(arrayInputs[i].name);		
			
			if(nameObj2.indexOf(".idTela") != -1){				
				arrayInputs[i].value =	document.getElementById('IScdSistema').value+";"+
				document.getElementById('tela.telaPK.cdTela').value+";"+document.getElementById('IScdFuncao').value;			
			}		
			if(nameObj2.indexOf(".nmTela") != -1){			
				arrayInputs[i].value = document.getElementById('tela.nmForm').value;			
			}
		}		
	
		//Fecha o form do inputSelect
		document.getElementById('RowForm').style.display = 'none';
	}
}

function mudaCoresTds(tableItemMenuObj, cor){
	if(tableItemMenuObj != null && tableItemMenuObj != 'UNDEFINED'){
		var objTable = getTable(tableItemMenuObj);
		var tds = objTable.getElementsByTagName('TD');
		var tdsTamanho = tds.length;
		
		for(var i = 0; i < tdsTamanho; i++){
			tds[i].style.backgroundColor = cor;
		}
	}
}
/** carrega a imagem de troca **/
function IH_imageLoad(obj) {
	var image = null;
	
	if (typeof(obj) == "string") {
		var args = IH_imageLoad.arguments;
		for(i = 0; i < args.length; i++) {
			image = new Image;
			image.src = changeName(args[i]);
		}
	} else {
		image = new Image;
		image.src = changeName(obj.src);
	}
}

function IMG_isNameWithSufix(imgname, sufix){
	if(imgname.length >= 4 && imgname.charAt(imgname.length - 4) == '.'){
		var oneSufix = (imgname.length >= 6 && imgname.charAt(imgname.length - 6) == '-');
		var twoSufix = (imgname.length >= 8 && imgname.charAt(imgname.length - 8) == '-');
		if(oneSufix){
			var firstSufix = imgname.charAt(imgname.length - 5);
			if(twoSufix){
				var secondSufix = imgname.charAt(imgname.length - 7);
				return (firstSufix == sufix || secondSufix == sufix);
			}else{
				return (firstSufix == sufix);
			}
		}
	}
	return false;
}

function IMG_isClassNameWithSufix(className, sufix) {
	return className.indexOf("-"+sufix) != -1;
}

function IMG_isEnabled(link){
  return !IMG_isClassNameWithSufix(link.className, 'd');
}

function IMG_enable(img, newEnabled){
	if(newEnabled){
		img.src = IMG_getOriginalName(img.src);
		if(navigator.appName == "Netscape"){
			img.style.cursor = "pointer";
		}else{
			img.style.cursor = "hand";
		}
	}else{
		img.src = IMG_getDisabledName(img.src);
		img.style.cursor = "";
	}
}

function IMG_getOriginalName(imgname){
	var imgname;
	
	if(IMG_isNameWithSufix(imgname, 'o') || IMG_isNameWithSufix(imgname, 'd')){
		var tipo = imgname.substr(imgname.length  - 3);
		imgname = imgname.substr(0, imgname.length - 6) + '.' + tipo;
		return IMG_getOriginalName(imgname);
	}else{
		return imgname;
	}
}

function IMG_assembleName(imgname, sufix){
	var tipo = imgname.substr(imgname.length  - 3);
	return imgname.substr(0, imgname.length - 4) + sufix + '.' + tipo;
}

function IMG_getDisabledName(imgname){
	return IMG_assembleName(IMG_getOriginalName(imgname), '-d');
}

function IMG_getOverName(imgname){
	return IMG_assembleName(IMG_getOriginalName(imgname), '-o');
}

/** Se a imagem tiver '-o' tira se nao coloca **/
function changeName(name) {
	var tipo = name.substr(name.length  - 3);
	var posMenos = name.lastIndexOf("-");
	var sufixo = "-o.";
	if ((posMenos > 0) && (name.substr(posMenos, String(sufixo).length) == sufixo)) {
		return name.substr(0, name.length - 6) + "." + tipo;
	} else {
		return name.substr(0, name.length - 4) + sufixo + tipo;
	}
}

function changeClassName(className) {
	if (className.indexOf("-o") == -1) {
		return className += "-o";
	} else {
		return className.substr(0, className.length - 2);
	}
	
}

/** troca a imagem e o cursor **/
function imageChange(obj) {
	var cursor = null;
	if(navigator.appName == "Netscape"){
		cursor = "pointer";
	}else{
		cursor = "hand";
	}
	obj.style.cursor = cursor;
	obj.className = changeClassName(obj.className);
}

/** Se a imagem tiver '-o' tira se nao coloca, os atributos podem ser o objeto ou um conjunto de ids **/
function IH_mOver(obj){
	var classNameLength = obj.className.length;
	var classNameDisabled = obj.className.substring(classNameLength-2, classNameLength);
	if ((classNameDisabled != undefined) && (classNameDisabled != null) && (classNameDisabled == "-d")) {
		return;
	}
	if (typeof(obj) == "string") {
		var args = IH_mOver.arguments;
		for(var i = 0; i < args.length; i++) {
			var objImg = document.getElementById(args[i]);			
			if (objImg != null) {
				if(IMG_isEnabled(obj)){
					imageChange(objImg);
				}
			}
		}
	} else {		
		if(IMG_isEnabled(obj)) {
			imageChange(obj);
		}		
	}
}

function IH_mOut(obj){
	IH_mOver(obj);
}

function IH_toggleOver(obj){
	IH_mOver(obj);
}

function IH_toggle(obj){
	var div = document.getElementById(obj.getAttribute('divId'));
	IH_toogleDiv(div);
}

function IH_toogleDiv(div){
	var divId = div.id;
	var obj = document.getElementById("toggleImg_" + divId);
	if(obj != null){
		if(div.style.display == 'none'){
			div.style.display = "";
			IH_mOver(obj);
			obj.src = obj.src.substring(0, obj.src.indexOf('-c')) + obj.src.substring(obj.src.indexOf('-c') + 2, obj.src.length);
			IH_mOver(obj);
		} else {
			div.style.display = 'none';
			IH_mOver(obj);
			obj.src = obj.src.substring(0,obj.src.length - 4) + '-c' + obj.src.substring(obj.src.length - 4, obj.src.length);
			IH_mOver(obj);
		}
	}
}

function IH_toggleOut(obj){
	IH_mOver(obj);
}
modal_opacity = 0.7;
function logOnPage(text){
	var log = document.getElementById('log');
	if(log){
		log.appendChild(document.createTextNode(text));
	}
}

/*
 * Verifica se o resultado de uma pesquisa com a InputSelectTag retornou o elemento "cls".
 * Retorna TRUE caso nao tenha encontrado o elemento "clear" ou FALSE caso contrario.
 */
function clearTagPresent(reqAtual) {
    var clear = reqAtual.responseXML.getElementsByTagName("cls")[0];
   	if( clear == null ) {
   		return false;
   	}
   	return true;
}

function moreThanOneElemTagPresent(reqAtual) {
    var more = reqAtual.responseXML.getElementsByTagName("m")[0];
   	return ( more != null );
}

/*
 * Verifica se o resultado de uma pesquisa com a InputSelectTag retornou uma excessao.
 * Retorna TRUE caso nao tenha acontecido uma excessao ou FALSE caso contrario.
 */
function exceptionTagPresent(reqAtual) {
	try {
		var exception = reqAtual.responseXML.getElementsByTagName("ex")[0];
	
		if (reqAtual.responseText.indexOf("j_username") != -1) {
			logoutOnExceptionTagPresent();
			return true;
		}
		if( exception != null ) {
			// label para mensagem em caso de exceï¿½ï¿½o
			alert(resourceMap.getResource('label.js.ajax.exception'));
   			return true;
   		}
   		return false;
	} catch (err) {
		if (reqAtual.responseText.indexOf("j_username") != -1) {
			logoutOnExceptionTagPresent();
		}
		return true;
	}
}

/*
 * Mï¿½todo para ser sobrescrito e executar
 * o logout de acordo com o sistema
 */
function logoutOnExceptionTagPresent() {
	window.location.reload();
}

/*
 * Limpa os campos referenciados pela InpuSelectTag passando um array com os nomes dos campos.
 * @DEPRECATED utilize limparInputSelect(id)
 */
function limparCamposInputSelect(sender, arrayCampos ) {
      limparInputSelect(sender);
}

/*
 * Limpa todos os campos referenciados pela InpuSelectTag, mesmo aqueles que nï¿½o estï¿½o dentro do componente.
 */
function limparInputSelect(id) {
   if(antesLimparInputSelect(id)){
	   IS_limpaHiddens(id);
       IS_limpaDivsMult(id);
   }
   depoisLimparInputSelect(id);
}

function limparInputSelectWithoutDivsMult(id) {
   if(antesLimparInputSelect(id)){
	   IS_limpaHiddens(id);
   }
   depoisLimparInputSelect(id);
}

function IS_limpaHiddens(id) {
	var arrayCampos = eval(id + "NomeCamposArray");
    var arrLength = arrayCampos.length;
    for( var i = 0; i < arrLength; i++ ) {
    	   var refName = nomeCampoEquivalenteBinding(id,arrayCampos[i]);
    	   /*if(refName == null){
				refName = nomeCampoEquivalenteInputSelect(id,arrayCampos[i]);
		   }*/
		   var input = IS_getInputFromInputSelect(id,refName);
		   if( input != null ) {
		       input.value = "";
		       input.setAttribute("oldValue","");
        }
    }
}

function IS_limpaDivsMult(id) {
	if(IS_isMultiplaSelecao(document.getElementById(id))){
   		IS_clearInputParamValue(document, id);
   		IS_zeraContadorSelecionados(document, id);
   		var divsExistentes = document.getElementById(id).getElementsByTagName('DIV');
		for(var k = divsExistentes.length - 1; k >= 0 ; k--){
			if(divsExistentes[k].getAttribute('multSelecao') == 'true'){
				divsExistentes[k].parentNode.removeChild(divsExistentes[k]);
			}
		}
   }
}

/**
 * Retorna um campo que estï¿½ contido dentro do inputSelect.
 */
function IS_getInputFromInputSelect(inputSelectId, inputIdOrName) {
	var query = jQuery('#'+inputSelectId + ' input[id='+inputIdOrName+']');
	var input = null;
	if(query.length != 0) {
		input = query[0];
	}
	if(input == null) {
		input = F_getElementByNameOrId(document,inputIdOrName);
	}
	return input;
}

/**
* Retorna o nome campo equivalente do campo utilizando
* a coleï¿½ï¿½o de bindings do input-select.
* Substitui o nomeCampoEquivalenteInputSelect caso o campos do inputselect
* utilizem o atributo bindingReference.
**/
function nomeCampoEquivalenteBinding(sender, ref){
	var inputSelect = document.getElementById(sender);
	if(inputSelect != null){
		var bindings = inputSelect.getAttribute('bindings');
		var bindName = "&bind_"+ref+"=";
		if(bindings != null && (bindings.indexOf(bindName) != -1)){
			var result = bindings.substring(bindings.indexOf(bindName)+bindName.length);
			if(result.indexOf('&') != -1){
				result = result.substring(0,result.indexOf('&'));
			}
			return result;
		}
		if (bindings == null || bindings === '') {
			return nomeCampoEquivalenteInputSelect(sender, ref);
		}
	}
	return null;
}

/*
 * Acao chamada antes de efetivamente limpar, se retornar false nao limpa os campos
 */
function antesLimparInputSelect(sender){
   return true;
}

/*
 * Acao chamada depois de limpar os campos
 */
function depoisLimparInputSelect(sender){
}

/*
 * Deleta as linhas da tabela da InputSelectTag.
 */
function inputSelectTag_deleteLinhasTabela(tabela) {
	var qtFilhos = tabela.childNodes.length;
	for(var i = 0; i < qtFilhos; i++){
		tabela.removeChild(tabela.lastChild);
	}
}

/**
 * Ao sair de um campo com inputSelect, e necessario verificar se o mesmo
 * possui algum valor digitado. Os seguintes casos podem ocorrer:
 * Se possuir valor no campo e o layer de resultado estiver visivel os campos sao deixados como estao.
 * Se possui valor em branco, os campos sao limpos.
 */
function getValueToSendWhenBlur(inputValue, inputId, cacheArray, layerVisivel) {
	if( inputValue == '' || jQuery.trim(inputValue) == '' ) {
		return '';
	}
	return this.value;
}

function getSelectedLineWhenBlur(tabela) {
	var selIndex = -1;
	var trLen = tabela.childNodes[0].childNodes.length;
	for(var i = 0; i < trLen; i++ ) {
		trElmt = tabela.childNodes[0].childNodes[i];
		if( trElmt.style.backgroundColor != 'white' ) {
			selIndex = i;
			break;
		}
	}
	return selIndex;
}

/*
 * Retorna a posicao X de uma elemento do HTML.
 */
function getPositionX(obj){
    var posX = 0;
  	var corpo = document.getElementsByTagName("body")[0];
    var objAtual = obj;
    while( objAtual != corpo ) {
       posX += objAtual.offsetLeft - objAtual.scrollLeft;
       objAtual = objAtual.offsetParent;
    }
    return posX;
}

/*
 * Retorna a posicao Y de uma elemento do HTML.
 */
function getPositionY(element) {
    var targetTop = 0;
    if (element.offsetParent) {
        while (element.offsetParent) {
	         targetTop += element.offsetTop;
             element = element.offsetParent;
	     }
     } else if (element.y) {
	      targetTop += element.y;
     }
     return targetTop;
}

/**
 * Define a posicao de um Layer
 */
function setLayerPos( lyr, obj ) {
	var xPos = getPositionX( obj );
	var yPos = getPositionY( obj );
    lyr.style.left = xPos;
    lyr.style.top = yPos + obj.offsetHeight;
    lyr.style.width = obj.offsetWidth;
}

/*
 * Retorna o browser atual: IE ou Mozilla
 */
function getBrowser() {
   	var agt=navigator.userAgent.toLowerCase();
   	if( agt.indexOf("msie") > -1 ) {
     	    return "IE";
    } else {
          return "Mozilla";
    }
}

/*
 * Retorna o foco para um campo.
 */
function retornaFoco(nodo) {
	var campo = document.getElementById(nodo);
	if(campo != null){
		campo.focus();
	}
}

/*
 * Possibilita que o usuario execute alguma acao apos trocar o valor do campo de input.
 */
function onChangeInputSelect( sender ) {
}


/*
 * Seta o valor para comparacao em um proximo onBlur.
 */
function setOldValueInputSelect(id) {
	var arrayCampos = eval(id+"NomeCamposArray");
	var arrLength = arrayCampos.length;
	for(var i = 0; i < arrLength; i++ ) {
		var refName = nomeCampoEquivalenteBinding(id,arrayCampos[i]);
		if(refName == null){
			refName = nomeCampoEquivalenteInputSelect(id,arrayCampos[i]);
		}
		var campo = F_getElementByNameOrId(document,refName);
	    if( campo!= null ) {
			campo.setAttribute('oldValue',campo.value);
        }
    }
}

/*
 * Metodo chamado para saber qual e o binding equivalente ao campo de filtro do inputselect
 * ao ser chamado a funcao de request do AJAX
 */
function getOriginalBindingRefNameOf(id, arrayRefNames, nomeCampoNoForm){
    var input = document.getElementById(nomeCampoNoForm);
	if (input == null) {
		input = parent.document.getElementById(nomeCampoNoForm);
	}
	if (input == null) {
		var arrayCampos = document.getElementsByName(nomeCampoNoForm);
		input = jQuery(arrayCampos).filter('input:first').get(0);
	}
    var bindingReference = input.getAttribute('bindingReference');
    if(bindingReference != null){
    	return bindingReference;
    }
    var arrRefNames = arrayRefNames.length;
    for(var i=0;i<arrRefNames;i++){
      var nomeEquiv = nomeCampoEquivalenteInputSelect(id,arrayRefNames[i]);
       if(nomeEquiv == nomeCampoNoForm){
          return arrayRefNames[i];
       }
    }
    return nomeCampoNoForm;

}

/*
 * Desabilita os inputs-select do array.
 */
function desabilitarCamposInputSelect(sender, arrayCampos ) {
   var arrCampos = arrayCampos.length;
   for(var i = 0; i < arrCampos; i++ ) {
       var refName = nomeCampoEquivalenteBinding(id,arrayCampos[i]);
		if(refName == null){
			refName = nomeCampoEquivalenteInputSelect(id,arrayCampos[i]);
		}
		var componente = F_getElementByNameOrId(document,refName);
       if( componente != null ) {
	       disable(componente);
       }
   }
}

/*
 * Desabilita um campo
 */
function disable(campo){
    var className = campo.className;
    if(className != "disabled"  && className.indexOf(" disabled ") == -1
    	&& !(FS_startsWith(className, "disabled ")) && !(FS_endsWith(className, " disabled"))){

	    campo.className = campo.className + " disabled";
	}
    campo.readOnly = true;
}

/*
 * Habilita um campo
 */

function enable(campo){
    campo.readOnly = false;
   	var className = campo.className;
   	if(className == "disabled"){
   		campo.className = "";
   		return;
   	}
    if(className.indexOf(" disabled ") != -1){
    	campo.className.replace(" disabled ", " ");
    	return;
    }
    if(FS_startsWith(className, "disabled ")){
    	campo.className = className.substring(9);
    	return;
    }
    if(FS_endsWith(className, " disabled")){
    	campo.className = className.substring(0,className.length - 9);
    	return;
    }

}


/*
 * Retorna os inputs-select filhos
 */
function getInputsSelectFilhos(inputSelect){
	return inputSelect.getElementsByTagName('FILHO');
}

function desabilitaInputsFilhos(inputSelect, doc){
	refreshInputsFilhos(inputSelect,doc,true);
}

function habilitaInputsFilhos(inputSelect, doc){
	refreshInputsFilhos(inputSelect,doc,false);
}

/*
 *	Desabilita ou habilita os campos dos inputs filhos
 */
function refreshInputsFilhos(inputSelect,doc,desabilita){
	var filhos = getInputsSelectFilhos(inputSelect);
	var filLength = filhos.length;
	for(var i = 0; i < filLength; i++){
		var filho = filhos[i];
		var filhoId = filho.getAttribute('idFilho');
		if(filhoId != null){
			var objIS = doc.getElementById(filhoId);
			limparInputSelect(filhoId);
			var inputsFilho = objIS.getElementsByTagName('INPUT');
			for(j = 0; j < inputsFilho.length; j++){
				if(desabilita){
					disable(inputsFilho[j]);
				} else {
					enable(inputsFilho[j]);
				}
				setOldValueInputSelect(objIS.id);
			}
			if(temFilho(objIS)){
				refreshInputsFilhos(objIS,doc,true);
			}
			var imagens = objIS.getElementsByTagName('A');
			if(desabilita){
				imagens[0].style.display = 'none';
				imagens[1].style.display = 'block';
			} else {
				imagens[0].style.display = 'block';
				imagens[1].style.display = 'none';
			}
		}
	}
}

function desabilitaInputSelectById(id, doc){
	if(doc && doc != null){
		desabilitaInputSelect(doc.getElementById(id), doc);
	}else{
		desabilitaInputSelect(document.getElementById(id), document);
	}
}

function habilitaInputSelectById(id, doc){
	if(doc && doc != null){
		habilitaInputSelect(doc.getElementById(id), doc);
	}else{
		habilitaInputSelect(document.getElementById(id), document);
	}
}

function desabilitaInputSelect(inputSelect, doc){
	refreshInputSelect(inputSelect,doc,true);
}

function habilitaInputSelect(inputSelect, doc){
	refreshInputSelect(inputSelect,doc,false);
}

/*
 *	Desabilita ou habilita os campos do input-select
 */
function refreshInputSelect(inputSelect,doc,desabilita){
	var inputs = inputSelect.getElementsByTagName('INPUT');
	var inLength = inputs.length;
	for(var j = 0; j < inLength; j++){
		if(desabilita){
			disable(inputs[j]);
		} else {
			enable(inputs[j]);
		}
	}
	imagens = inputSelect.getElementsByTagName('A');
	if(desabilita){
		imagens[0].style.display = 'none';
		imagens[1].style.display = 'block';
	} else {
		imagens[0].style.display = 'block';
		imagens[1].style.display = 'none';
	}
}

/*
 *	Retorna true se o input-select possui filho
 */

function temFilho(inputSelect){
	if (inputSelect == null) {
		return false;
	} else {
		return getInputsSelectFilhos(inputSelect).length != 0;	
	}
}

/*
 * Retorna true se o objeto for um input-select
 */
function isInputSelect(obj){
	return obj.getAttribute('input-select') != null;
}

/** Cria a caixa de consulta **/
var _idIframeConcat;
function abrirConsultaPorLink(obj, url, largura, altura,
		titulo,idObjRetorno,multiplaSelecao,inputSelectId, bindings, idIframe, desabilitarSelecionados){

	var haveDoctype = F_haveDoctype();
    alturaTitulo = 18;
    _idIframeConcat = jQuery.trim("spwConsulta"+idIframe);
	//verifica se a consulta ja esta aberta(default -> spwConsulta e caso nï¿½o tenha verifica quaquer div que contenha spwConsulta)
	if(document.getElementById("spwConsulta") != null && verificaIframeDiv()) {
		return;
	}

	//pega dados da pag
	var objBody = document.getElementsByTagName("BODY")[0];
	var alturaPag = F_getBrowserHeight();
	var larguraPag = F_getBrowserWidth();
	var posScroll = document.body.scrollTop;

	//cria a layer
	var laConsulta = document.createElement("DIV");
	laConsulta.id = _idIframeConcat;
	if(haveDoctype){
		laConsulta.style.position = "fixed";
		posScroll = 0;
	}else{
		laConsulta.style.position = "absolute";
	}
	laConsulta.style.width = largura + "px";
	laConsulta.style.height = altura + "px";
	laConsulta.style.left = ((larguraPag - largura) / 2) +"px";
	laConsulta.style.top = ((alturaPag - altura) / 2 + posScroll) + "px";
	laConsulta.className = "spwTabelaGrid";
	laConsulta.style.backgroundColor = "#ffffff";
	/**/
	laConsulta.style.backgroundPosition = "top left";				
	/**/	
	laConsulta.style.zIndex = 99;
	objBody.appendChild(laConsulta);
	objBody.setAttribute('idDivConsulta',_idIframeConcat);

	//cria a tabela superior
	tabelaCons = document.createElement("TABLE");
	tabelaCons.cellPadding = 0;
	tabelaCons.cellSpacing = 0;
	tabelaCons.style.width = '100%';
	/**/
	tabelaCons.style.backgroundPosition = "top right";
	tabelaCons.style.backgroundRepeat = "no-repeat";
	tabelaCons.style.backgroundColor = "transparent";
	tabelaCons.style.fontSize = "13px";
	tabelaCons.style.color = "#FFFFFF";
	tabelaCons.style.lineHeight = "27px";
	/**/
	tabelaCons.className = "spwTituloGrid";
	cabCons = document.createElement("TBODY");
	tabelaCons.appendChild(cabCons);

	//cria a linha da tabela
	linhaCons = document.createElement("TR");
	cabCons.appendChild(linhaCons);

	//cria a primeira celula
	celula1Cons = document.createElement("TD");
	celula1Cons.height = alturaTitulo;
	/**/
	celula1Cons.style.paddingLeft = "5px"; 
	celula1Cons.style.paddingRight = "5px";				
	/**/
	celula1Cons.setAttribute('idDivConsulta',_idIframeConcat);
	linhaCons.appendChild(celula1Cons);
	texto1 = document.createTextNode(titulo);
	celula1Cons.appendChild(texto1);
	objBody.onmousemove = moverLayer;
	celula1Cons.onmousedown = iniciaMover;
	objBody.onmouseup = terminaMover;

	//cria a segunda celula
	celula2Cons = document.createElement("TD");
	/**/
	celula2Cons.style.paddingLeft = "5px"; 
	celula2Cons.style.paddingRight = "5px";
	/**/
	linhaCons.appendChild(celula2Cons);

	celula2Cons.style.width = '20px';
	laConsulta.appendChild(tabelaCons);

    var botaoFechar = document.createElement("a");
    botaoFechar.className = "spwBotaoFecharJanela";
    botaoFechar.appendChild(document.createTextNode('X'));
   	
    /*if (jQuery.browser.msie) {
		botaoFechar.setAttribute("onclick", function(){eval("fecharConsultaById('"+jQuery.trim(idIframe)+"')")});
	}else{
		botaoFechar.setAttribute("onclick", "fecharConsultaById('"+jQuery.trim(idIframe)+"')");
	}*/
    
    if (jQuery.browser.msie) {
   		if(jQuery.browser.version > 7){
   			jQuery(botaoFechar).click(function() {fecharConsultaById(jQuery.trim(idIframe));});
   		}else{
   			botaoFechar.setAttribute("onclick", function(){eval("fecharConsultaById('"+jQuery.trim(idIframe)+"')");});
   		}
	}else{
		jQuery(botaoFechar).click(function() {fecharConsultaById(jQuery.trim(idIframe));});
	}
    
	celula2Cons.appendChild(botaoFechar);

	//cria tabela para conter o iframe
	tabelaIframe = document.createElement("TABLE");
	linhaIframe = document.createElement("TR");
	celulaIframe = document.createElement("TD");
	tabelaIframe.id = "tabelaIframe";

    //Atualiza os parametros
    prmIdObjRetorno="idObjRetorno="+idObjRetorno;
    

    if (multiplaSelecao == 'true') {
        prmMultiSelection="multiselection=true";
    } else {
        prmMultiSelection="multiselection=false";
    }
    if (url.indexOf("?") < 0) {
        url=url+"?";
    } else {
        url=url+"&";
    }
    
    var value = getValueUrl(url);
    consultaSearchAoAbrir(idObjRetorno);
    if (value == '') {
    	url = url + 'consultaSearchAoAbrir='+_consultaSearchAoAbrir+'&';
    }

	var complement = complementInputSelectRequestParameters(idObjRetorno);
	if(complement != null && complement != "" && (new String(complement)).charAt(0) != '&'){
		complement = "&" + complement;
    }
    var useAction = document.getElementById(idObjRetorno).getAttribute('useAction');

    url = url + prmIdObjRetorno + "&" + prmMultiSelection + complement + "&height=" + (altura-alturaTitulo) +
    	"&inputSelectId="+inputSelectId+"&CurrentMultSelecaoId="+idObjRetorno+
    	"&multSelecaoProperty="+document.getElementById(idObjRetorno).getAttribute('property')+
    	 "&gotInputParam=false" + bindings + "&useAction=" + useAction + '&requesterUrl=' + url +
    	 '&SpwInputSelectRequestOrigin=InputSelectSearchGrid'+'&desabilitarSelecionados='+desabilitarSelecionados+'&width='+largura;

    if(multiplaSelecao == 'true'){
        url+="&contador="+document.getElementById('contador'+idObjRetorno).value;
        url+="&contadorMaior="+document.getElementById('contadorMaior'+idObjRetorno).value;
        url+="&multiselectinputselect=true&gotInputParam=false";
    }

	//cria o iframe
	if( navigator.appName == "Netscape" ) {
		iframeConsulta = document.createElement("iframe");
		iframeConsulta.src = url;
		iframeConsulta.width = "100%";
		iframeConsulta.height = altura - alturaTitulo;
		iframeConsulta.frameBorder = "0";
        iframeConsulta.id = "layerFormConsulta";
		laConsulta.appendChild(iframeConsulta);
	} else {
        htmlIframe = "<iframe id='layerFormConsulta' frameBorder='0' style='width:100%; height:" + (altura - alturaTitulo) + "px' src='"+url+"'></iframe>";
		document.getElementById(_idIframeConcat).insertAdjacentHTML("beforeEnd", htmlIframe);
	}
	
	//inseri a div spwModalContent depois da tag form. Utilizado para o modal!	
	jQuery('form').after("<div id='spwModalContent'></div>");
	//prepara todos os js resposnï¿½veis para o modal	
	spwModalScripts(_idIframeConcat);		
	
}

function getURLImagesSkin() {
	var sk = "";
	if (jQuery('#imagensSkin', top.document).val() != undefined) {
		sk = jQuery('#imagensSkin', top.document).val();
	} else if(top.imagensSkinURL != undefined) {
		sk = top.imagensSkinURL;
	} else if (jQuery('#imagensSkin').val() != undefined) {
		sk = jQuery('#imagensSkin').val();
	}
	return sk;
}

function spwModalScripts(idIframeConcat){
	$idFrameMural = jQuery('#idFrameMural',top.document);				
	$rootHtml = $idFrameMural.parents("html:last");					
	$divSpwModalFooter = $rootHtml.find("#spwModalFooter");													
	$divHolderConteudo1 = jQuery("#holderConteudo1");												
				
	$divFooter = $rootHtml.find("#footer");			
	if($divFooter != null && $divFooter.size() > 0){
		$divSpwModalFooter.css({'width':$divFooter.width(),'height':$divFooter.height()});
		$divSpwModalFooter.fadeTo(0, modal_opacity, function() {
			 $divSpwModalFooter.show();			        
		});	    			    		    			    			   										
	}
	
	$divSlider = $rootHtml.find("div.ui-layout-resizer:last");
	if($divSlider != null && $divSlider.size() > 0){							
		$divSlider.addClass("spwModalDefault");
		$divSlider.fadeTo(0, modal_opacity, function() {
				 $divSlider.show();			        
		});
	}																				
		
	alturaDivHolderConteudo1 = $divHolderConteudo1.height();	
	larguraDivHolderConteudo1 = $divHolderConteudo1.width();	
	alturaScrollDivHolderConteudo1 = $divHolderConteudo1.scrollTop();
	$divSpwModalContent = jQuery('#spwModalContent');				    			       	    															
	$divSpwModalContent.css({'width':larguraDivHolderConteudo1,'height':(alturaDivHolderConteudo1+alturaScrollDivHolderConteudo1)});						
	$divSpwModalContent.fadeTo(0,modal_opacity, function() {
		$divSpwModalContent.show();			        
	});	    			    			    	
	
	$iframeConcat = jQuery('#'+idIframeConcat);
	$iframeConcat.css('z-index',9999);																	

	$divHolderConteudo1.scroll(function() {									
		if($iframeConcat != null && $iframeConcat.size() > 0 && verificaIframeDiv()) {									
			$divSpwModalContent.css({'width':$divHolderConteudo1.width(),'height':$divHolderConteudo1.height()+$divHolderConteudo1.scrollTop()});						
			$divSpwModalContent.fadeTo(0,modal_opacity, function() {
				$divSpwModalContent.show();			        
			});
		}												
	});
	
	jQuery(window).resize(function() {				    			    	    	    										
		if($iframeConcat != null && $iframeConcat.size() > 0 && verificaIframeDiv()) {
			if($divSpwModalContent != null && $divSpwModalContent.size() > 0){
				$divSpwModalContent.css({'width':$divHolderConteudo1.width(),'height':$divHolderConteudo1.height()});						
				$divSpwModalContent.fadeTo(0,modal_opacity, function() {
					$divSpwModalContent.show();			        
				});
			}
			
			if($divSpwModalFooter != null && $divSpwModalFooter.size() > 0){
				$divSpwModalFooter.css({'width':$divHolderConteudo1.width()});						
				$divSpwModalFooter.fadeTo(0,modal_opacity, function() {
					$divSpwModalFooter.show();			        
				});
			}
		 } 
	});										
}

/*Possibilita adicionar parametros a URL da quisicao AJAX do sender
passado como parametro.*/
function complementInputSelectRequestParameters( sender ) {
    return '';
}

function getFilterValue(inputSelect,doc,separator){
	var filtroP = inputSelect.getAttribute('filtroPai');
	var idP = inputSelect.getAttribute('idPai');
	if(filtroP != null && filtroP != 'null'){
		return  getFilterValueRecursive(inputSelect,doc,separator);
	} else {
		return '';
	}
}

function getFilterValueRecursive(is,doc,separator){
	var filtroP = is.getAttribute('filtroPai');
	var idP = is.getAttribute('idPai');
	var filter = '';
	if(idP != null &&  idP != 'null'){
		var pai = document.getElementById(idP);
		filter = getFilterValueRecursive(pai,doc,separator);
		var campo = document.getElementById(filtroP);
		return campo.getAttribute('id') + '=' + campo.value + (filter==''? '':separator+ filter);
	}else{
		return '';
	}

}

function isInputSelectFilled(inputSelect){
	var input = inputSelect.getElementsByTagName('INPUT')[0];
	var p = 1;
	while(input.type != 'text' && p < inputSelect.getElementsByTagName('INPUT').length){
		input = inputSelect.getElementsByTagName('INPUT')[p++];
	}
	return input.value != '';
}

function getInputSelect(input){
	var pai = input.parentNode;
	while(!isInputSelect(pai) && pai != null){
		pai = pai.parentNode;
	}
	return pai;
}

function IS_desmarcaTudo(input){
	var inputSelect = getInputSelect(input);
	var inputs = inputSelect.getElementsByTagName('INPUT');
	var p = 0;
	while(p < inputs.length){
		inputs[p++].value = "";
	}
	var inputParamValue = IS_getInputParamValue(document,inputSelect.id);
	if(inputParamValue!="" && inputParamValue!=null){
		var divId = inputParamValue.substring(6,inputParamValue.indexOf('^'));
		var div = document.getElementById(divId);
		if(div != null){
			div.parentNode.removeChild(div);
			decrementaContadorSelecionados(document, inputSelect.id);
			removeFromInputParam(document,inputSelect.id,divId);
		}
	}
}

function IS_onChangeMultSelecao(input){
	var inputSelect = getInputSelect(input);
	var inputSelectId = inputSelect.id;

	IS_clearInputParamValue(document, inputSelectId);
	IS_zeraContadorSelecionados(document, inputSelectId);
	var divsExistentes = inputSelect.getElementsByTagName('DIV');
	for(var k = divsExistentes.length - 1; k >= 0 ; k--){
		if(divsExistentes[k].getAttribute('multSelecao') == 'true'){
			divsExistentes[k].parentNode.removeChild(divsExistentes[k]);
		}
	}

	var chave = "";
	var chaveCandidata = "";
	var entityPKClass = inputSelect.getAttribute("entityPKClass");
	var inputs = inputSelect.getElementsByTagName('INPUT');
	for(var m = 0; m < inputs.length; m++){
		if(inputs[m].getAttribute('type') == 'text'){
			var campo = inputs[m];
			if(campo.getAttribute("pk") == "true") {
				chave += url_encode(campo.value) + ";";
			} else {
				var property = getAttribute(campo, 'name');
				if(property.toLowerCase().indexOf(entityPKClass.toLowerCase()+".") != -1){
					chaveCandidata += campo.value + ";";
				}
			}
		}
	}
	if(chave == ""){
		chave = chaveCandidata;
	}

	//Se a chave estiver vazia, ï¿½ porque o input-select estï¿½ vazio.
	if(chave == "" || chave == ";"){
		return;
	}

	var divId = IS_createMultSelecaoDivId(inputSelect.id,chave);
	var div = criaDivDeInputs(document,divId);
	inputSelect.appendChild(div);
	incrementaContadorSelecionados(document,inputSelect.id);
	document.getElementById("contadorMaior"+inputSelect.id).value = 1;
	var property = inputSelect.getAttribute('property');
	addToInputParam(document,inputSelect.id,'DivID='+divId);
	for(var m = 0; m < inputs.length; m++){
		if(inputs[m].getAttribute('type') == 'text'){
			var campo = inputs[m];
			var name = property + '[0].'+ getAttribute(campo, 'name');
			var elemento = criaElemento(document,'INPUT', 'hidden',name,chave+campo.value,campo.value,getAttribute(campo, 'name'));
			div.appendChild(elemento);
			addToInputParam(document,inputSelect.id,'^'+name+'='+campo.value);
		}
	}
	addToInputParam(document,inputSelect.id,'$');

}

function onClickMultiplaSelecao(obj){
	var checked = obj.checked;
	var doc = document;
	var objRetorno = parent.document.getElementById(idObjRetorno);
	var linhaSel = obj.parentNode;
	while(linhaSel.nodeName != 'TR'){
		linhaSel = linhaSel.parentNode;
	}
	var property = objRetorno.getAttribute('property');
	var nodosRef = pegaReferencias( linhaSel );
	var posicaoLista = getContadorMaiorValue(doc,'');
	var chave = IS_getChaveRegistro(nodosRef);

   	var divId = IS_createMultSelecaoDivId(idObjRetorno,chave);
   	if(checked){
		incrementaContadorSelecionados(doc,'');
  		IS_registraCamposSelecionados(nodosRef, property, posicaoLista, chave, idObjRetorno, doc, divId);
	}else{
		decrementaContadorSelecionados(doc,'');
       	removeFromInputParam(doc,idObjRetorno,divId);
       	return;
    }
}

function onDoubleClickMultiplaSelecao(obj){
	var doc = document;
	var objRetorno = parent.document.getElementById(idObjRetorno);
	var linhaSel = obj.parentNode;
	while(linhaSel.nodeName != 'TR'){
		linhaSel = linhaSel.parentNode;
	}
	linhaSel.getElementsByTagName('INPUT')[0].checked = true;
	var property = objRetorno.getAttribute('property');
	var nodosRef = pegaReferencias( linhaSel );
	var posicaoLista = getContadorMaiorValue(doc,'');
	var chave = IS_getChaveRegistro(nodosRef);

   	var divId = IS_createMultSelecaoDivId(idObjRetorno,chave);

   	var inputParam = IS_getInputParamValue(doc,idObjRetorno);
   	if(inputParam.indexOf("DivID="+divId+'^') == -1){
	   	incrementaContadorSelecionados(doc,'');
	   	IS_registraCamposSelecionados(nodosRef, property, posicaoLista, chave, idObjRetorno, doc, divId);
	}

}

/**
 * Retorna somente os valores que foram selecionados pelo IS de multipla seleï¿½ï¿½o
 * 
 * @param idObjRetorno ID do IS de multipla seleï¿½ï¿½o com valores
 */
function IS_getCheckedValues(idObjRetorno) {
	var inputParam = IS_getInputParamValue(document,idObjRetorno);
	var keys = inputParam.split('DivID');
	var keyValue;
	var value;
	var retorno = '';
	for(var j = 1; j < keys.length; j++ ) {
		keyValue = keys[j].split('^');
		value = keyValue[1].split('=');
		retorno += value[1] + (j+1 == keys.length ? '' : ',');
	}

	return retorno;
}

/**
 * Retorna a chave de filtro
 * 
 * @param idObjRetorno ID do IS de multipla seleï¿½ï¿½o com valores
 */
function IS_getKey(idObjRetorno) {
	var inputParam = IS_getInputParamValue(document,idObjRetorno);
	var keys = inputParam.split('DivID');
	var keyValue = keys[1].split('^');
	var value = keyValue[1].split('=');
	var fields = value[0].split('.');
	return fields[fields.length - 1];
}

function IS_getChaveRegistro(tds){
	var chave = "";
	var chaveCandidata = "";
	var tdsLength = tds.length;
	for(var j = 0; j < tdsLength; j++ ) {
		var valorRetorno = SR_getValorCelulaSearchDoPadrao(tds[j]);
		if(ehChave(tds[j])) {
			//chave += url_encode(valorRetorno) + ";"
			chave += valorRetorno + ";";
		} else {
			var property = getAttribute(tds[j], 'property');
			if(ehChaveCandidata(property)){
				//chaveCandidata += url_encode(valorRetorno) + ";"
				chaveCandidata += valorRetorno + ";";
			}
		}
	}
	if(chave == ""){
		chave = chaveCandidata;
	}

	return chave;
}

function IS_createMultSelecaoDivId(idComponente, valorChave){
	return "div"+idComponente+trim(valorChave);
}

function IS_registraCamposSelecionados(nodosRef, property, posicaoLista, chave, idObjRetorno, doc, divId){
	addToInputParam(doc,idObjRetorno,'DivID='+divId);
	for( j = 0; j < nodosRef.length; j++ ) {
   	    var valorRetorno = SR_getValorCelulaSearchDoPadrao(nodosRef[j]);
   	    var reference = parent.nomeCampoEquivalenteForm(idObjRetorno, getAttribute(nodosRef[j], 'reference'));
   	    if (reference === null || reference === undefined) {
	    	reference = nomeCampoEquivalenteForm(idObjRetorno, getAttribute(nodosRef[j], 'reference'));
	    }
   	    var name = property + '['+ posicaoLista +'].'+ reference;
   	    var input = document.getElementById(idObjRetorno + 'SelectedEntitiesList');
   	    if (input != null) {
   	    	if (input.value.indexOf(name) != -1) {
   	    		novaPosicaoLista = new Number(posicaoLista + 1);
   	    		name = property + '['+ novaPosicaoLista +'].'+ reference;
   	    	}
   	    }
        addToInputParam(doc,idObjRetorno,'^');
	    addToInputParam(doc,idObjRetorno,name+'='+valorRetorno);	    

	    if(j + 1 == nodosRef.length){
    		addToInputParam(doc,idObjRetorno,'$');
    	}
    }
}

function cleanOldInputParans() {
	var objRetorno = document.getElementById("idObjRetorno");
	if (objRetorno != null) {
		var inputParam = document.getElementById(objRetorno.value+'SelectedEntitiesList');
		if (inputParam) {
			inputParam.value = "";
		}
	}
}

function criaDivDeInputs(doc,id){
	novoDiv = doc.createElement('DIV');
    novoDiv.setAttribute('id',id);
    novoDiv.setAttribute('multSelecao','true');
    novoDiv.setAttribute('remover','false');
    novoDiv.style.display = 'none';
    //debug...
/*    novoDiv.appendChild(doc.createTextNode(id));
    novoDiv.style.height = 10;
    novoDiv.style.width = 10;
    novoDiv.className = 'erro';*/
    return novoDiv;
}

function criaElemento(doc,element,type,name,id,value,property){
	novoElemento = doc.createElement(element);
    novoElemento.setAttribute('type',type);
    novoElemento.name = name;
    novoElemento.setAttribute('id',id);
    novoElemento.setAttribute('value',value);
    novoElemento.setAttribute('property',property);
    return novoElemento;
}

function addToInputParam(doc,objId,str){
	var objRetorno = doc.getElementById(objId);
	var inputParam = doc.getElementById(objId+'SelectedEntitiesList');
	if(inputParam == null){
		inputParam = criaElemento(doc,'INPUT', 'hidden', objId+'SelectedEntitiesList',
								  objId+'SelectedEntitiesList', str);
		//o INPUT PARAM deve ser criado no form para ir para o servidor
		//com o submit!!!!
		document.getElementsByTagName("FORM")[0].appendChild(inputParam);
	} else {
		var v = inputParam.value;
		if(v == null || v == 'null'){
			v = '';
		}
		inputParam.value = v + trim(str);
	}
}

function IS_inputParamToArray(doc,objId){
	var result = new Array();
	var v = IS_getInputParamValue(doc, objId);
	var i = 0;
	while(v != null && v != ''){
		result[i] = v.substring(0,v.indexOf('$')+1);
		v = v.substring(v.indexOf('$')+1);
		i++;
	}

	return result;
}

function removeFromInputParam(doc,objId,divId){
	var retorno = false;
	var objRetorno = doc.getElementById(objId);
	var inputParam = doc.getElementById(objId+'SelectedEntitiesList');
	var v = inputParam.getAttribute('value');
	if(v != null){
		var posicao = v.indexOf("DivID="+divId+'^');
		if(posicao > -1){
			subV = v.substring(posicao,v.length);
			//alert(subV.substring(0,subV.indexOf('$')));
			resto = subV.substring(subV.indexOf('$')+1,subV.length);
			v = v.substring(0,posicao) + resto;
			retorno = true;
		}
		inputParam.setAttribute('value',v);
	}
	return retorno;
}

function IS_getInputParamValue(doc,objId){
	var objRetorno = doc.getElementById(objId);
	var inputParam = doc.getElementById(objId+'SelectedEntitiesList');
	if(inputParam != null){
		return inputParam.getAttribute('value');
	}
	return null;
}

function IS_clearInputParamValue(doc,objId){
	var inputParam = doc.getElementById(objId+'SelectedEntitiesList');
	if(inputParam != null){
		inputParam.value = "";
	}
}

function alteraValorContadorSelecionados(valor,doc,objId){
	var contador = doc.getElementById("contador"+objId);
	if(contador == null){
		var objRetorno = doc.getElementById(objId);
		contador = criaElemento(doc,'INPUT','hidden',"contador"+objId,"contador"+objId,valor);
	    objRetorno.appendChild(contador);
	}else{
		var value = new Number(contador.getAttribute('value'));
		contador.setAttribute('value', value+valor);
	}
}

function IS_zeraContadorSelecionados(doc,objId){
	var inputSelect = doc.getElementById(objId);
	var contador = doc.getElementById("contador"+objId);
	if(contador == null){
		contador = criaElemento(doc,'INPUT','hidden',"contador"+objId,"contador"+objId,0);
	    inputSelect.appendChild(contador);
	}else{
		var value = 0;
		contador.setAttribute('value', value);
	}
}

function IS_restauraEstadoSelecao(){
	var inputSelect = parent.document.getElementById(idObjRetorno);
	if(IS_isMultiplaSelecao(inputSelect)){
		var parentContador = parent.document.getElementById("contador"+idObjRetorno);
		var valor = 0;
		if(parentContador != null){
			valor = parentContador.value;
		}

		var contador = document.getElementById("contador");
		if(contador != null){
			contador.value = valor;
		}

		var parentInputParam = parent.document.getElementById(idObjRetorno+'SelectedEntitiesList');
		valor = "";
		if(parentInputParam != null){
			valor = parentInputParam.value;
		}
		var inputParam = document.getElementById(idObjRetorno+'SelectedEntitiesList');
		if(inputParam != null) {
			inputParam.value = valor;
		}
	}
}

function incrementaContadorMaior(doc,objId){
	var contadorMaior = doc.getElementById("contadorMaior"+objId);
	if(contadorMaior == null){
		var objRetorno = doc.getElementById(objId);
		contadorMaior = criaElemento(doc,'INPUT','hidden',"contadorMaior"+objId,"contadorMaior"+objId,1);
	    objRetorno.appendChild(contadorMaior);
	}else{
		var value = new Number(contadorMaior.getAttribute('value'));
		contadorMaior.setAttribute('value', value+1);
	}
}

function getContadorMaiorValue(doc,objId){
	var contadorMaior = doc.getElementById("contadorMaior"+objId);
	if(contadorMaior == null){
		var objRetorno = doc.getElementById(objId);
		contadorMaior = criaElemento(doc,'INPUT','hidden',"contadorMaior"+objId,"contadorMaior"+objId,'0');
	    if(objRetorno != null){
	    	objRetorno.appendChild(contadorMaior);
	    }
	    return 0;
	}else{
		var value = new Number(contadorMaior.getAttribute('value'));
		return value;
	}
}

function incrementaContadorSelecionados(doc,objId){
	alteraValorContadorSelecionados(1,doc,objId);
	incrementaContadorMaior(doc,objId);
}

function decrementaContadorSelecionados(doc,objId){
	alteraValorContadorSelecionados(-1,doc,objId);
}

function getContadorValue(doc,objId){
	var contador = doc.getElementById("contador"+objId);
	if(contador == null){
		var objRetorno = doc.getElementById(objId);
		contador = criaElemento(doc,'INPUT','hidden',"contador"+objId,"contador"+objId,'0');
	    if(objRetorno != null){
	    	objRetorno.appendChild(contador);
	    }
	    return 0;
	}else{
		var value = new Number(contador.getAttribute('value'));
		return value;
	}
}

function ehChave(td){
	if(td.nodeName == 'TD'){
		return td.getAttribute('pk') == 'true';
	}
	return false;
}

function ehChaveCandidata(property){
	if(property == null){
		return false;
	}
	var chave = document.getElementById("nomeClassePK").value;
	return (property.indexOf(chave+".") != -1);
}

function IS_isMultiplaSelecao(inputSelect){
	if (inputSelect == null) {
		return false;
	} else {
		return inputSelect.getAttribute('multiplaSelecao')=='true';
	}
}

/* Funcao chamada pela pagina de consuta
	para marcar os registros se estes ja tiverem sido
	marcados */
function checaRegistros(){
	var is = parent.document.getElementById(idObjRetorno);
	if(IS_isMultiplaSelecao(is)){
		var count = getContadorValue(document,'');
		var contadorFor = 0;
		for(var i = 0; true; i++){
			linha = document.getElementById('linha_'+i);
			if(linha == null){
				break;
			}
			tds = linha.childNodes;
			for(var j = 0; j < tds.length; j++){
				var chave = IS_getChaveRegistro(tds);
				var divName = IS_createMultSelecaoDivId(idObjRetorno,chave);
				var inputParamValue = IS_getInputParamValue(document,idObjRetorno);
				if(inputParamValue != null){//alert(inputParamValue + " - "+ "DivID="+divName+"^");
					if(inputParamValue.indexOf("DivID="+divName+"^") != -1){
						linha.getElementsByTagName('INPUT')[0].checked = true;
						contadorFor++;
						break;
					}
				}
			}
			if(contadorFor == count){
				return;
			}
		}
	}
}

function IS_definirPadraoAjaxRequest(button, servletUrl){
	var params = document.getElementById(idObjRetorno+'SelectedEntitiesList').value;
	params = url_encode(params);
	params = "component=multSelDefinirPadrao&isId="+idObjRetorno+"&params="+params;
	if (window.XMLHttpRequest) {
		reqrow = new XMLHttpRequest();
	} else if (window.ActiveXObject) {
		reqrow = new ActiveXObject("Microsoft.XMLHTTP");
	}
	reqrow.open("POST", servletUrl, true);
	reqrow.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    reqrow.setRequestHeader("Content-length", params.length);
    reqrow.setRequestHeader("Connection", "close");
	reqrow.onreadystatechange = IS_definirPadraoAjaxResponse;
	reqrow.send(params);

}

function IS_definirPadraoAjaxResponse(){
	if (reqrow.readyState == 4) {
		if (reqrow.status == 200) {
			alert(msgKey("label.js.padraoSalvo",""));
		}
	}
}

function IS_getDivTemp(doc,objId){
	var divTemp = doc.getElementById(objId+"MultSelTempDiv");
	if(divTemp == null){
		divTemp = criaDivDeInputs(doc,objId+"MultSelTempDiv");
		doc.getElementsByTagName("FORM")[0].appendChild(divTemp);
	}
	return divTemp;
}

function IS_delDivTemp(doc,objId){
	IS_salvaDivTemp(doc,objId,'');
}

function IS_salvaDivTemp(doc,objId,conteudo){
	if(isSearchFilterValid()){
		var divTemp = IS_getDivTemp(doc,objId);
		divTemp.innerHTML = conteudo;
	}else{
		return;
	}
}

function isSearchFilterValid(){
	return true;
}

function IS_getConteudoDivTemp(doc,objId){
	var divTemp = IS_getDivTemp(doc,objId);
	return divTemp.innerHTML;
}


//**********************//
//*** Mï¿½todos da Tag ***//
//**********************//

var _req;
var _tagId;
var _property;
var _inputSelectId;
var _url;
var _multiplaSelecao;
var _titulo;
var _altura;
var _largura;
var _bindings;
var _value;
var _isBtConsultar;
var _focusObject;
var _eventSrc;
var _idIframe;
var _desabilitarSelecionados;
var _carregaFilho;
var _consultaSearchAoAbrir;

IS_enableSubmit = true;

function getFiltroAsParameters(filtroValue){
	var parans = new String(filtroValue).split(";");
	var size = parans.length;
	var str = "";
	for(var i = 0; i < size; i++){
		if(i>0){
			str = str + "&";
		}
		str = str + parans[i];
	}
	return str;
}

function IS_request(inputSelectId, servletUrl, tagId, property, value, ctxPath, url, multiplaSelecao, titulo, altura, largura, bindings, isBtConsultar, event, requestSrc, idIframe, desabilitarSelecionados ){
	_tagId = tagId;
	_property = property;
	_inputSelectId = inputSelectId;
	_url = url;
	_multiplaSelecao = multiplaSelecao;
	_titulo = titulo;
	_altura = altura;
	_largura = largura;
	_bindings = bindings;
	_value = url_encode(value);
	_isBtConsultar = isBtConsultar;
	_idIframe = idIframe;
	_desabilitarSelecionados = desabilitarSelecionados;

	if (event != null) {
		if (F_isIExplorer()) {
			_eventSrc = event.srcElement;
		}else{
			_eventSrc = event.target;
		}
	} else {
		_eventSrc = null;
	}
	//Adicionado para resolver o problema de caracteres especiais
	value = url_encode(value);
	var tag = IS_getInputFromInputSelect(tagId, property);
	var is = document.getElementById(tagId);
	var prefix = replaceAll(property,'.','_');
	var nomeCamposArray = eval(tagId + "NomeCamposArray");
	if( value == '' && isBtConsultar != "true" && _eventSrc != null) {
		limparInputSelect(tagId);
   		setOldValueInputSelect(tagId);
		desabilitaInputsFilhos(document.getElementById(tagId),document);
 	 	if(IS_isMultiplaSelecao(document.getElementById(tagId))){
 	 		IS_onChangeMultSelecao(tag);
 	 	}
		return;
	}

	is.arrayCampos = nomeCamposArray;
	var antigoValor = tag.getAttribute('oldValue');

	if(isBtConsultar == "true" || antigoValor != tag.value || _eventSrc == null){
		optParams = complementInputSelectRequestParameters( tagId );
	   	if( optParams != null && optParams != '' ) {
       	    optParams = '&' + optParams;
        }
        var filtroValue = '';

        var filtroPai = is.getAttribute('filtroPai');
        var idPai = is.getAttribute('idPai');
        // Comentado para nï¿½o funcionar o IS MultSel Pai/Filho
        /* if(idPai != null && idPai != 'null' && idPai != '' && filtroPai != null && filtroPai != 'null' && filtroPai != ''){
        	if (idPai != null && idPai != 'null' && idPai != '' && IS_isMultiplaSelecao(document.getElementById(idPai))) {
        		filtroValue = IS_getKey(idPai) + '=' + IS_getCheckedValues(idPai)+'&filtroPaiMultiplaSelecao=true';
        	} else { */
        		filtroValue = getFilterValue(is,document,';');
        	//}
        //}
        var filtroProperty = '';
        if(isBtConsultar == "false" || isBtConsultar == false){
        	filtroProperty = '&property='+ getOriginalBindingRefNameOf(tagId,nomeCamposArray,property)+'&value='+value;
        }
		var filtroAsParameter = getFiltroAsParameters(filtroValue);
        if(filtroAsParameter != ""){
        	filtroAsParameter = filtroAsParameter + "&";
        }
        
        consultaSearchAoAbrir(tagId);
        
		var url = ctxPath + servletUrl + '?' + filtroAsParameter +
			'tagId='+ inputSelectId +filtroProperty+optParams+
			'&filtroValue='+filtroValue+'&component=inputSelect'+bindings+
			'&useAction='+is.getAttribute('useAction')+
			'&SpwInputSelectRequestOrigin='+requestSrc;
		
		if (value == '') {
			url = url + '&consultaSearchAoAbrir='+_consultaSearchAoAbrir; 
		}
		
		if (_req != undefined || _req != null) {
			if ((!(_req.readyState == 4)) && (!(_req.status == 200))) {
				return;
			}
		}
		
		if (window.XMLHttpRequest) {
			_req = new XMLHttpRequest();
		} else if (window.ActiveXObject) {
			_req = new ActiveXObject("Microsoft.XMLHTTP");
		}

		var currentTime = new Date().getTime();
        url += "&currentTime=" + currentTime;
		
		_req.open("GET", url, true);
		_req.onreadystatechange = IS_response;
		IS_enableSubmit = false;
		_req.send(null);
				
	}
	return;
}

function getValueUrl(url) {
	var vtUrl = url.split('?');
	if (vtUrl.length > 1) {
		var params = vtUrl[1];
		if (params != '') {
			var vtParams = params.split('&');
			var vtValue = vtParams[0].split('=');
			return vtValue[1];
		}
	}
	
	return '';
}

function url_encode(str) {
	var retorno = new String("");
	var length = str.length;
	for(var index = 0; index < length; index++) {
		var chr = str.charAt(index);
		if(chr == '@' || chr == '*' || chr == '/' || chr == '+') {
			retorno = retorno.concat(encodeURIComponent(chr));
		} else {
			retorno = retorno.concat(escape(chr));
		}
	}
	return retorno;
}

function url_decode(str) {
	try {
		return unescape(str);
	} catch (ex) {
		try {
			return decodeURIComponent(str);
		} catch (ex) {
			return str;
		}
	}
	
}

function IS_mostreResultado(reqAtual, entities, property, tagId) {
	var prefix = replaceAll(property,'.','_');
	var nomeCamposArray = eval(tagId + "NomeCamposArray");
	var cacheArray = new Array();
	var entityLen = entities.childNodes.length;
	var inputSelect = document.getElementById(tagId);
	if(entityLen == 1){
		entity = entities.childNodes[0];
		refsLen = entity.childNodes.length;
		for(j = 0; j < refsLen; j++){
			row = entity.childNodes[j];
			refName = row.getAttribute('n');
			refValue = row.getAttribute('v');
			var formProperty = row.getAttribute('fp');
			if(formProperty == "false"){
				var bindings = inputSelect.getAttribute('bindings');
				if(bindings == null || bindings == ''){
					refName = nomeCampoEquivalenteInputSelect(tagId,refName);
				} else {
					refName = null;
				}
			}
			var comp = IS_getInputFromInputSelect(tagId, refName);
			if(comp != null){
				comp.value = refValue;
			}
		}
		if(temFilho(inputSelect)){
			habilitaInputsFilhos(inputSelect,document);
		}
		if(IS_isMultiplaSelecao(inputSelect)){
			IS_onChangeMultSelecao(IS_getInputFromInputSelect(tagId, property));
		}
		depoisSelecionarRegistros(tagId);
	} else {
		IS_zeraContadorSelecionados(document,_tagId);
		IS_clearInputParamValue(document,_tagId);
   		abrirJanelaConsulta();
		desabilitaInputsFilhos(document.getElementById(_tagId), document);
		limparInputSelect(_tagId);
		if(IS_isMultiplaSelecao(inputSelect)){
			IS_desmarcaTudo(F_getElementByNameOrId(document,_property));
		}
	}
}

/*Possibilita que o usuï¿½rio troque o nome da referencia \npara determinado campo do formularioem relaï¿½ï¿½o ao input-select.*/
function nomeCampoEquivalenteInputSelect( sender, refName ) {
    return refName;
}


/*Possibilita que o usuï¿½rio troque o nome da referencia \npara determinado campo do formulario em relaï¿½ï¿½o ï¿½ grid de consulta.*/
function nomeCampoEquivalenteForm( sender, refName ) {
    return refName;
}

/*
 * Metodo para carregar automaticamente um inputSelect
 * caso ele possua apenas um resultado.
 */
function carregaIS(tagId, isSelecionar) {
	var objIS = document.getElementById(tagId);
	var inputSelectId = objIS.getAttribute('input-select');
	var servletUrl = '/AjaxServlet.ajax';
	var tagId = objIS.getAttribute('id');
	var property = objIS.getAttribute('name');
	var value = '';			
	var ctxPath = objIS.getAttribute('ctxPath');
	var url = objIS.getAttribute('url');
	var multiplaSelecao = objIS.getAttribute('multiplaselecao');
	var titulo = objIS.getAttribute('title');
	var altura = objIS.getAttribute('altura');
	var largura = objIS.getAttribute('largura');
	var bindings = objIS.getAttribute('bindings');
	var isBtConsultar = isSelecionar;
	if (isSelecionar == null) {
		var isBtConsultar = false;
	}
	var requestSrc;
	if (isSelecionar === true) {
		requestSrc = 'InputSelectSearchGrid';
	} else {
		requestSrc = 'InputSelectAutoComplete';
	}
	var idIframe = objIS.getAttribute('idiframe');
	var desabilitarSelecionados = objIS.getAttribute('desabilitarselecionados');
	var tag = IS_getInputFromInputSelect(tagId, property);
	_carregaFilho = true;
	IS_request(inputSelectId, servletUrl, tagId, property, value, ctxPath, url, multiplaSelecao, titulo, altura, largura, bindings, isBtConsultar, null, requestSrc, idIframe, desabilitarSelecionados);
}

/*
 * Mï¿½todo para carregar o resultado do inputSelect
 * filho caso ele possua apenas um resultado.
 */
function carregaISFilho(tagId, isSelecionar) {
	var is;
	var filhos;
	is = document.getElementById(tagId);
	if (is.getAttribute('carregaFilho') === "true") {
		filhos = getInputsSelectFilhos(is);
		var filho = filhos[0];
		var filhoId = filho.getAttribute('idFilho');
		carregaIS(filhoId, isSelecionar);
	} else {
		_carregaFilho = false;
	}
}

/*
 * Mï¿½todo que carrega a variï¿½vel global se 
 * search irï¿½ carregar consulta ao abrir 
 */
function consultaSearchAoAbrir(tagId) {
	var is;
	is = document.getElementById(tagId);
	_consultaSearchAoAbrir = is.getAttribute('consultaSearchAoAbrir');
}

function IS_response() {
	if (_req.readyState == 4) {
		if (_req.status == 200) {
			if (!exceptionTagPresent(_req)) {
				if (F_isIExplorer()) {
					_focusObject = document.activeElement;
				}
				refers = _req.responseXML.getElementsByTagName('rfs')[0];
				var nomeCamposArray = eval(_tagId + "NomeCamposArray");
				
				var hasMoreThanOne = moreThanOneElemTagPresent(_req);
				var withoutChild = true;
				if (clearTagPresent(_req) && _isBtConsultar != "true") {
					limparInputSelect(_tagId);
					desabilitaInputsFilhos(document.getElementById(_tagId), document);
					try {
						document.getElementById(_property).focus();
					} catch (e) {}
					setOldValueInputSelect(_tagId);
					if(!_carregaFilho) {
						withoutChild = false;
						alert(IS_NoResultMessage(_tagId));
					}
				}
				else 
					if (hasMoreThanOne || _isBtConsultar === "true") {
						if (_isBtConsultar != "true") {
							trataConsultaSemResultado(_tagId, _property);
						}
						var is = document.getElementById(_tagId);
						var idPai = is.getAttribute('idPai');
						if (_carregaFilho != true) {
							abrirJanelaConsulta();
						}
					}
					else {
						IS_mostreResultado(_req, refers, _property, _tagId);
						setOldValueInputSelect(_tagId, nomeCamposArray);
					}
			}
		}
		IS_enableSubmit = true;
		var is = document.getElementById(_tagId);
		if (temFilho(is) && _isBtConsultar != "true" && !hasMoreThanOne && withoutChild) {
			carregaISFilho(_tagId, _isBtConsultar);
		} else {
			_carregaFilho = false;
		}
	}	
}

function trataConsultaSemResultado(_tagId, _property) {
	IS_zeraContadorSelecionados(document, _tagId);
	IS_clearInputParamValue(document, _tagId);
	desabilitaInputsFilhos(document.getElementById(_tagId), document);
	limparInputSelect(_tagId);
	if (IS_isMultiplaSelecao(document.getElementById(_tagId))) {
		IS_desmarcaTudo(F_getElementByNameOrId(document, _property));
	}
}

function abrirJanelaConsulta(){
	var ie = F_isIExplorer();
	if(ie && _focusObject && _focusObject.nodeName != "INPUT"){
	   	_focusObject = IS_getObjectToFocus();
   	}else if(!ie && IS_clicouNaLupa()){
   		var focusObj = IS_getObjectToFocus();
   		if(focusObj != null){
   			focusObj.focus();
   		}
   	}
	var nomeCamposArray = eval(_tagId + "NomeCamposArray");
	if(_url.indexOf('?') > -1){
		paramSeparetor = '&';
	}else{
		paramSeparetor = '?';
	}
	abrirConsultaPorLink(this,_url + paramSeparetor +
		getOriginalBindingRefNameOf(_tagId,nomeCamposArray,_property)+'=' +
		_value+'&'+'reference='+_property+'&'+_property+'='+_value+
		'&'+getFilterValue(document.getElementById(_tagId),document,'&'),
		_largura,_altura,_titulo,_tagId,_multiplaSelecao,_inputSelectId, _bindings, _idIframe, _desabilitarSelecionados);
}

function IS_clicouNaLupa(){
	return (_eventSrc != null && _eventSrc.nodeName == "A");
}

function IS_getObjectToFocus(){
	var tdImagem = _eventSrc.parentNode;
	if(tdImagem == null){
		return null;
	}
	var td = jQuery(tdImagem).prev('td')[0];
	if(td == null){
		return null;
	}
	var input = td.getElementsByTagName('INPUT')[0];
	while(input == null || input.nodeName != "INPUT" || input.offsetHeight == 0 || input.disabled){
		td = jQuery(td).prev('td')[0];
		if(td == null){
			return null;
		}
		input = td.getElementsByTagName('INPUT')[0];
		if(td.nodeName != 'TD'){
			return null;
		}
	}
	return input;
}

function IS_registraFilho(idPai, idFilho){
	var isPai = document.getElementById(idPai);
	if(isPai!=null){
		var f = document.createElement('FILHO');
		f.setAttribute('idFilho',idFilho);
		isPai.appendChild(f);
		if(!isInputSelectFilled(isPai)){
			desabilitaInputSelect(document.getElementById(idFilho),document);
		}
	}
}

function decodificaValoresOnSubmit() {
	var $values = jQuery('table[multiplaselecao=true]').find('input');
	for (var i = 0; i <= $values.length; i++) {
		if ($values.get(i)) {
			$values.get(i).value = url_decode($values.get(i).value);
		}
	}
}
function LF_onSubmitFingerprint() {
	return document.getElementById('j_passwordFP') != null;
}
function MENU_highModulo(obj){
	jQuery(obj).find('.tabend').addClass('tabend-hover');
}

function MENU_lowModulo(obj){
	jQuery(obj).find('.tabend').removeClass('tabend-hover');	
}

function MENU_active(obj) {
	if(jQuery(obj).hasClass('tab-active')) {
		jQuery(obj).removeClass('tab-active');
		jQuery(obj).find('.tabend').removeClass('tabend-active');
	} else {
		jQuery('.tab-active').removeClass('tab-active');
		jQuery('.tabend-active').removeClass('tabend-active');
		jQuery(obj).addClass('tab-active');
		jQuery(obj).find('.tabend').addClass('tabend-active');
	}
}

var fecharEstrutura = function ($obj){
	if (!$obj.jquery) {
		$obj = jQuery(this);
	}
    $obj.find('li:first').addClass('fechado').removeClass('aberto'); 
	$obj.parent().children('ul').fadeOut(0);
}

var abrirEstrutura = function ($obj){
	if (!$obj.jquery) {
		$obj = jQuery(this);
	}
    $obj.find('li').addClass('aberto').removeClass('fechado'); 
	$obj.parent().children('ul').fadeIn(0);
}

var tratarCliqueItem = function(){
	jQuery('[name=itemMenu]').css('background','');
	jQuery(this).css('background', '#DDDDDD');
}

var tratarCliqueItemAutoOcultar = function(){
	jQuery('[name=itemMenu]').css('background','');
	jQuery(this).css('background', '#DDDDDD');
	window.top.myLayout.close('west');
	top.frames['page'].location = jQuery(this).attr('href');
}

var trocarModulo = function(){
	var $item = jQuery('#itensDoMenu div:visible [nomegrupo]');
	$item.addClass('fechado').removeClass('aberto');
	
	$item.parent().siblings('ul').each(function(){
		this.style.display = 'none';
	});
	
	jQuery('[id^=modulo_]').hide();
	var comboSelecionado = jQuery(this).val();
	var $modulo = jQuery('#modulo_' + comboSelecionado + '');
	
	if($modulo.size() === 0){
		jQuery('[id^=modulo_' + comboSelecionado + ']').show();
	}else{
		$modulo.show();
	}
	
	var $spanImgArvore = jQuery('.menutabbuttons').get(0).firstChild.nextSibling;
	var $spanImgArvore = jQuery($spanImgArvore);

	$spanImgArvore.attr('src','imagens/base/icoFecharMenu-a.png');
	$spanImgArvore.prev().attr('src','imagens/base/icoAbrirMenu.png');
};

var esconderLateral = function(){ 
	jQuery('#side', top.document).hide();
}

var mostrarLateral = function(){ 
	jQuery('#side', top.document).show();
}

var encolherArvore = function(e){ 
	
	var $this = jQuery(this); 
	
	$this.attr('src','imagens/base/icoFecharMenu-a.png');
	$this.prev().attr('src','imagens/base/icoAbrirMenu.png');

	var $item = jQuery('#itensDoMenu div:visible [nomegrupo]');
	$item.addClass('fechado').removeClass('aberto');
	
	$item.parent().siblings('ul').each(function(){
		this.style.display = 'none';	
	});
	
	e.preventDefault();
	
	return false;
}

var abrirArvore = function(e){ 

	var $this = jQuery(this); 

	$this.attr('src','imagens/base/icoAbrirMenu-a.png');
	$this.next().attr('src','imagens/base/icoFecharMenu.png');

	var $item = jQuery('#itensDoMenu div:visible [nomegrupo]');
	$item.addClass('aberto').removeClass('fechado');
	$item.parent().siblings('ul').fadeIn(0);
	
	e.preventDefault();
	
	return false;
}

var padraoEncolherArvore = function(e){ 
	
	var $obj = jQuery('[name=encolherArvore]'); 
	
	$obj.attr('src','imagens/base/icoFecharMenu-a.png');
	$obj.prev().attr('src','imagens/base/icoAbrirMenu.png');

	var $item = jQuery('#itensDoMenu [nomegrupo]'); 
	$item.addClass('fechado').removeClass('aberto');
	
	$item.parent().siblings('ul').each(function(){
		this.style.display = 'none';
	});
	
	return false;
}

var abrirFecharEstrutura = function() {
	
	var $this = jQuery(this);
	
	if ($this.find('li:first').hasClass('aberto')) {
		fecharEstrutura($this);
	} else if($this.find('li:first').hasClass('fechado')) {
		abrirEstrutura($this);
	}
	
}
function MenuWorkflow(elementoDom, actionMenuWorkflow, refreshTime) {
	this.elementoDom = elementoDom;
	this.actionMenuWorkflow = actionMenuWorkflow;
	this.refreshTime = refreshTime;
	this.update();
	this.scheduleNextUpdate();
	this.objLayerProcessando = null;
	this.ultimoUsuario = null;
}

MenuWorkflow.prototype.update = function () {
	var menu = menuWorkflow || this;
	var parameter = (menu.ultimoUsuario? "?cdUsuario=" + menu.ultimoUsuario: "");
	jQuery.get(menu.actionMenuWorkflow+parameter, function(dados){
		menu.render(dados);
		if(menu.refreshTime != null) {
			menu.scheduleNextUpdate();
		}
	});
}

MenuWorkflow.prototype.scheduleNextUpdate = function () {
	var menu = menuWorkflow || this;
	setTimeout(menu.update, menu.refreshTime);
}

MenuWorkflow.prototype.render = function (itemRaiz) {
	this.mostraProcessando();
	this.elementoDom.children().remove();
	jQuery('#workflowTab').parent().find('.comboModulos').remove();
 		
	var itens = jQuery(itemRaiz.getElementsByTagName("MenuWF")[0]).children('item');
 		
	var combo = jQuery('<select id="comboUsuarioWf">');
	var divCombo = jQuery('<div class="comboModulos">');
 	var label = jQuery('<label>Fila de trabalho:</label>');
	divCombo.append(label);
	divCombo.append(combo);
	
	
	jQuery('#workflowTab').parent().prepend(divCombo);
	
	combo.append(jQuery('<option value="Todos">Todos usuï¿½rios</option>'));
	var itensCombo = jQuery(itemRaiz.getElementsByTagName("MenuWF")[0]).find('ItemComboWF').each(function() {
 		var item = jQuery(this);
 		var value = item.attr('value');
 		var option = jQuery('<option value="'+value+'">'+value+'</option>');
  		var def = item.attr('default');
  		if(def == 'true') {
			option.attr('selected',true);	  			
  		}
  		combo.append(option);
	});
 		
 	for(var i = 0; i < itens.length; i++){
		this.criaItensRecursivo(i,itens[i],1,this.elementoDom);
	}
	this.setaEventos(this.elementoDom);
	this.escondeProcessando();
}
  	
MenuWorkflow.prototype.setaEventos = function () {
	var menu = menuWorkflow || this;
	menu.elementoDom.find('div[name=raiz]').toggle(fecharEstrutura, abrirEstrutura);
	menu.elementoDom.find('[name=itemMenu]').click(menu.tratarCliqueItem);
	jQuery('#comboUsuarioWf').change(menu.changeComboUsuarios);
}
  	
MenuWorkflow.prototype.criaItensRecursivo = function (id,item,nivel,divPai, valorPai) {
  	var quantidade = this.getQuantidade(item);
	var valor = this.getValor(item);
	if(quantidade != ""){
		valor += " (" + quantidade + ") ";	
	}
  	if(this.ehFolha(item)){
  		var ul = jQuery("<ul>");
  		ul.attr("itenspai", valorPai);
		var li = jQuery("<li>");
  		var a = jQuery("<a>").attr('id',"wf_" + id).attr('href', this.getLink(item)).attr('name', 'itemMenu').attr("target", "page").text(valor);
  		li.append(a);
  		ul.append(li);
  		divPai.append(ul);
  	} else {
  		var ul = jQuery("<ul>");
  		if(nivel != 1) {
			ul.attr("itenspai", valorPai);
		}
		var div = jQuery("<div name='raiz'>");
		var li = jQuery("<li nomegrupo='"+valor+"' class='nivel aberto'>");
		li.text(valor);
		divPai.append(ul);
		ul.append(div)
		div.append(li);
				
		var filhos = item.childNodes;
		for(var j = 0; j < filhos.length; j++){
			this.criaItensRecursivo(id + "_" + j, filhos[j],nivel+1,ul, valor);
		}
	}
}

MenuWorkflow.prototype.getValor = function (item) {
	return item.getAttribute("Valor");
}
  	
MenuWorkflow.prototype.getQuantidade = function (item) { 	
	return item.getAttribute("Qtd");
}
  	
MenuWorkflow.prototype.getLink = function (item) { 	
	return item.getAttribute("Link");
}
  	
MenuWorkflow.prototype.ehFolha = function (item) { 	  	
	return (item.childNodes.length < 1);
}

MenuWorkflow.prototype.changeComboUsuarios = function () { 	  	  	
	var selecionado = jQuery('#comboUsuarioWf').attr('value');
	var menu = menuWorkflow || this;
	menu.ultimoUsuario = selecionado;
	menu.update();
}
  	
MenuWorkflow.prototype.encolherArvoreWF = function (e) { 	  	  	
	var $this = jQuery(this); 
	
	$this.attr('src','imagens/base/icoFecharMenu-a.png');
	$this.prev().attr('src','imagens/base/icoAbrirMenu.png');

	var $item = jQuery('#workflowTab [nomegrupo]'); 
	$item.addClass('fechado').removeClass('aberto');
	
	$item.parent().siblings('ul').each(function(){
		this.style.display = 'none';	
	});
	
	e.preventDefault();
	return false;
}

MenuWorkflow.prototype.abrirArvoreWF = function (e) { 	  	

	var $this = jQuery(this); 

	$this.attr('src','imagens/base/icoAbrirMenu-a.png');
	$this.next().attr('src','imagens/base/icoFecharMenu.png');

	var $item = jQuery('#workflowTab [nomegrupo]'); 
	$item.addClass('aberto').removeClass('fechado');
	$item.parent().siblings('ul').fadeIn(0);
	
	e.preventDefault();
	return false;
}

MenuWorkflow.prototype.mostraProcessando = function () { 	  	
	if(this.isMenuWorkflowVisible()) {
		if (this.objLayerProcessando != null) {
			this.objLayerProcessando[0].style.display = 'block';
		} else {
			var objBody = jQuery("BODY");
			this.objLayerProcessando = jQuery("<DIV>");
			this.objLayerProcessando.attr('className','processando');
	
			var alturaPag = document.body.clientHeight;
			var larguraPag = document.body.clientWidth;
			var posScroll = document.body.scrollTop;
	
			var largura = 200;
			var altura = 40;	
	
			this.objLayerProcessando[0].style.left = (larguraPag - largura) / 2;
			this.objLayerProcessando[0].style.top = (alturaPag - altura) / 2 + posScroll;	
	
			objBody.append(this.objLayerProcessando);
		}
	}
}


MenuWorkflow.prototype.escondeProcessando = function () { 
	if( this.objLayerProcessando != null ) {
		this.objLayerProcessando[0].style.display = 'none';
	}
}

MenuWorkflow.prototype.isMenuWorkflowVisible = function () { 
	return this.elementoDom.is(':visible');
}

		var objRow;

function getParentNode(obj){
	objRow = obj;
	while(objRow.nodeName != 'TR'){
		objRow = objRow.parentNode;
	}
	objTable = document.getElementById('tabelaMeumenu');
	arrayInput = objTable.getElementsByTagName('INPUT');
	inputSel = null;
	for(i = 0; i < arrayInput.length; i++){
		if(arrayInput[i].type == 'radio' && arrayInput[i].checked && arrayInput[i]!=obj){
			arrayInput[i].checked = false;
		}
	}
}

function paraCima(idTable){
	objTable = document.getElementById(idTable);
	arrayInput = objTable.getElementsByTagName('INPUT');
	inputSel = null;
	for(i = 0; i < arrayInput.length; i++){
		if(arrayInput[i].type == 'radio' && arrayInput[i].checked){
			inputSel = arrayInput[i];
		}
	}
	if(inputSel == null){
		alert(msgKey("label.js.itemOrdenacao"));
	}else{
		objRow = inputSel;
		while(objRow.nodeName != 'TR'){
			objRow = objRow.parentNode;
		}
		
		objRowAnterior = objRow.previousSibling;
		if(objRowAnterior != null){	
			while(objRowAnterior.nodeName != 'TR' || objRowAnterior == null ){
				objRowAnterior = objRowAnterior.previousSibling;
			}
		
			if(objRowAnterior.style.display != "none"){
				objTable.lastChild.insertBefore(objRow, objRowAnterior);
				inputSel.checked = true;
			}
		}
	}
	setOrdem(idTable);
	
}

function paraBaixo(idTable){
	objTable = document.getElementById(idTable);
	arrayInput = objTable.getElementsByTagName('INPUT');
	inputSel = null;
	for(i = 0; i < arrayInput.length; i++){
		if(arrayInput[i].type == 'radio' && arrayInput[i].checked){
			inputSel = arrayInput[i];
		}
	}
	if(inputSel == null){
		alert(msgKey("label.js.itemOrdenacao"));
	}else{
		objRow = inputSel;
		while(objRow.nodeName != 'TR'){
			objRow = objRow.parentNode;
		}
		
		objRowNext = objRow.nextSibling;
		if(objRowNext != null){
			while(objRowNext.nodeName != 'TR' || objRowNext.nodeName == null ){
				objRowNext = objRowNext.nextSibling;
			}
			if(objRowNext.id != "trWidthBaseMeumenu"){
				objTable.lastChild.insertBefore(objRowNext, objRow);
			}
		}
	}
	setOrdem(idTable);
}

function paraTopo(idTable){
	objTable = document.getElementById(idTable);
	arrayInput = objTable.getElementsByTagName('INPUT');
	inputSel = null;
	for(i = 0; i < arrayInput.length; i++){
		if(arrayInput[i].type == 'radio' && arrayInput[i].checked){
			inputSel = arrayInput[i];
		}
	}
	if(inputSel == null){
		alert(msgKey("label.js.itemOrdenacao"));
	}else{
		objRow = inputSel;
		while(objRow.nodeName != 'TR'){
			objRow = objRow.parentNode;
		}
		
		objRowPrimeiro = objTable.getElementsByTagName('TR')[1];
		objTable.lastChild.insertBefore(objRow, objRowPrimeiro);
		inputSel.checked = true;
	}
	setOrdem(idTable);
}

function paraFundo(idTable){
	objTable = document.getElementById(idTable);
	arrayInput = objTable.getElementsByTagName('INPUT');
	inputSel = null;
	for(i = 0; i < arrayInput.length; i++){
		if(arrayInput[i].type == 'radio' && arrayInput[i].checked){
			inputSel = arrayInput[i];
		}
	}
	if(inputSel == null){
		alert(msgKey("label.js.itemOrdenacao"));
	}else{
		objRow = inputSel;
		while(objRow.nodeName != 'TR'){
			objRow = objRow.parentNode;
		}
		arrayTR = objTable.getElementsByTagName('TR')
		objRowUltimo = arrayTR[arrayTR.length - 1];
		objTable.lastChild.insertBefore(objRow, objRowUltimo);	
		inputSel.checked = true;		
	}
	setOrdem(idTable);
}

function setOrdem(idTable){
	objTable = document.getElementById(idTable);
	arrayInput = objTable.getElementsByTagName('INPUT');
	inputSel = null;
	j = 0;
	for(i = 0; i < arrayInput.length; i++){
		if(arrayInput[i].name.indexOf('nuOrdem') != -1){
			arrayInput[i].value = j++;
		}
	}
	//coloca fundo na linha selecionada
	radioSel = null
	for(i = 0; i < arrayInput.length; i++){
		if(arrayInput[i].type == "radio"){
			if(arrayInput[i].checked){
				radioSel = arrayInput[i]
			}
		}
	}	
	if(radioSel != null){
		//CGRID_FCS(radioSel)
		radioSel.focus()
	}
	
}
	function clickItemMenu(obj, callback){
  		limparAviso();
		jQuery('.selecionado').removeClass('selecionado');
		jQuery(obj).parent().addClass('selecionado');
		var categoria = obj.getAttribute('categoria');
		var listaAvisos = jQuery('#listaAvisos');
		listaAvisos.children("li:not(#avisoModelo)").remove();
		jQuery.getJSON("getAvisos.do?cdCategoria="+categoria, function(data) {
			var dataLength = data.length;
			var nuAvisosNaoLidos = 0;
			for(var i = dataLength-1; i >= 0; i--){
	 	 		var aviso = data[i];
				var modelo = jQuery('#avisoModelo').clone();
				modelo.find('.left').html(aviso.deAssunto);
		 		modelo.find('.right').html(aviso.dtCadastro);
		 		modelo.attr('nuSeqAviso',aviso.nuSeqAviso);
		 		modelo.attr('id',aviso.idAviso);
		 		modelo.attr('idAviso',aviso.idAviso);
		 		modelo.attr('avisoproviderName',aviso.avisoproviderName);
		 		modelo.attr('podeSerMarcadoComoLido',aviso.podeSerMarcadoComoLido);
		 		modelo.attr('podeSerMarcadoComoExcluido',aviso.podeSerMarcadoComoExcluido);
		 		modelo.attr('categoria',categoria);
		 		var lido = aviso.lido;
		 		modelo.attr('lido',lido);
		 		if(lido == true) {
		 			modelo.addClass("avisoLido");
		 		} else {
		 			modelo.addClass("avisoNaoLido");
		 			nuAvisosNaoLidos = nuAvisosNaoLidos + 1; 
		 		}
		 		listaAvisos.prepend(modelo);
		 		modelo.show();
		 	}
	 		atualizaNuAviso(categoria);
	 		if(callback) {
	 			callback();
	 		}
		});
  	}
  	
  	function atualizaNuAviso(categoria) {
  		var nuAvisosNaoLidos = new Number(jQuery("#listaAvisos .avisoNaoLido").size());
  		jQuery('#nuAviso'+categoria).text(jQuery("#listaAvisos li").size());
  		if(nuAvisosNaoLidos == 0) {
  			jQuery('#categoria'+categoria).removeClass('naoLido');
  		} else {
  			jQuery('#categoria'+categoria).addClass('naoLido');
  		}
  	}
  	
  	function mostrarAviso(li, scroll) {
  		limparAviso();
		var aviso = jQuery(li);
  		jQuery('.avisoSelecionado').removeClass('avisoSelecionado');
		aviso.addClass('avisoSelecionado');
		if(scroll) {
			jQuery('.portlet-content').scrollTo(aviso);
		}
		var id = aviso.attr('idAviso');
  		var avisoproviderName = aviso.attr('avisoproviderName'); 
  		
  		refreshBotoes(aviso);
  		
  		getAviso(avisoproviderName, id);
  	}
  	
  	function getAviso(avisoproviderName, id) {
  		jQuery.get("getAviso.do?nuSeqAviso="+id+"&avisoproviderName="+avisoproviderName, function(dados) {
			var data = eval("("+dados+")");
			jQuery('.tituloAvisoTexto').text(data.deAssunto);
			jQuery('.avisoData').text(data.dtCadastro);
			jQuery('#conteudoAvisoTexto').html(data.deMensagem);
			jQuery('#remetenteAviso').text(data.nmRemetente);
			var urlAction = data.deUrlaction;
			if(urlAction != '' && urlAction != null) {
				jQuery('.executarTarefa').show();
				jQuery('.executarTarefa').attr('href',urlAction);
			} else {
				jQuery('.executarTarefa').hide();
			}
			var anexos = data.anexoList; 
			for(var i = 0; i < anexos.length; i++) {
				var anexo = anexos[i];
				var anexoLink = jQuery('#anexoLink').clone();
				anexoLink.attr('href', 'getAnexoaviso.do?idAviso='+id+'&nuSeqanexoaviso='+anexo.nuSeqanexoaviso+'&avisoProvider='+avisoproviderName);
				anexoLink.text(anexo.nmAnexo);
				anexoLink.attr('id', 'nuSeqanexoaviso'+anexo.nuSeqanexoaviso);
				jQuery('#anexoAvisoModelo').append(anexoLink);
				jQuery('#anexoAvisoModelo').append("&nbsp;&nbsp;");
				anexoLink.show();
			}
			jQuery('#conteudoAviso').show();
		});
  	}
  	
  	function refreshBotoes(aviso) {
  		if(aviso == null) {
  			return;
  		}
  		if(aviso.attr('podeSerMarcadoComoExcluido') == 'true') {
  			jQuery('#btExcluir')[0].style.display = '';
  		} else {
  			jQuery('#btExcluir').hide();
  		}
  		if(aviso.attr('podeSerMarcadoComoLido') == 'true') {
  			if(aviso.attr('lido') == 'true') {
				jQuery('#btLido').hide();
				jQuery('#btNaoLido')[0].style.display = '';
  			} else {
	  			jQuery('#btLido')[0].style.display = '';
				jQuery('#btNaoLido').hide();
  			}
  		} else {
  			jQuery('#btLido').hide();
			jQuery('#btNaoLido').hide();
  		}
  	}
  	
  	function limparAviso() {
  		jQuery('.avisoSelecionado').removeClass('avisoSelecionado');
		jQuery('.tituloAvisoTexto').html("&nbsp;");
		jQuery('.avisoData').text("");
		jQuery('#conteudoAvisoTexto').text("");
		jQuery('#btLido').hide();
		jQuery('#btNaoLido').hide();
		jQuery('#btExcluir').hide();
		jQuery('#remetenteAviso').text("");
		jQuery('.executarTarefa').hide();
		jQuery('#anexoAvisoModelo').empty();
		jQuery('#conteudoAviso').hide();
  	}
  	
    function marcarComoLido(){
  		var selecionado = jQuery('.avisoSelecionado');
	  	if(selecionado.size() == 1){
  			var idAviso = selecionado.attr("idAviso");
  			var avisoproviderName = selecionado.attr("avisoproviderName");
	  		jQuery.get('marcarAvisoLido.do?idAviso='+idAviso+'&avisoproviderName='+avisoproviderName, function(data) {
	  			if(data == 'sucesso') {
			  		selecionado.addClass('avisoLido').removeClass('avisoNaoLido');
			  		selecionado.attr('lido',true);
			  		atualizaNuAviso(selecionado.attr('categoria'));
			  		refreshBotoes(selecionado);
	  			}
	  		});
  		}
  	}
  	
  	function marcarComoNaoLido(){
  		var selecionado = jQuery('.avisoSelecionado');
	  	if(selecionado.size() == 1){
  			var idAviso = selecionado.attr("idAviso");
  			var avisoproviderName = selecionado.attr("avisoproviderName");
	  		jQuery.get('marcarAvisoNaoLido.do?idAviso='+idAviso+'&avisoproviderName='+avisoproviderName, function(data) {
	  			if(data == 'sucesso') {
			  		selecionado.removeClass('avisoLido').addClass('avisoNaoLido');
			  		selecionado.attr('lido',false);
			  		atualizaNuAviso(selecionado.attr('categoria'));
			  		refreshBotoes(selecionado);
	  			}
	  		});
  		}
  	}
  	
  	function marcarComoExcluido(){
  		var selecionado = jQuery('.avisoSelecionado');
	  	if(selecionado.size() == 1){
	  		if(confirm('Tem certeza que deseja excluir o aviso selecionado?')){
	  			var idAviso = selecionado.attr("idAviso");
	  			var avisoproviderName = selecionado.attr("avisoproviderName");
		  		jQuery.get('marcarAvisoExcluido.do?idAviso='+idAviso+'&avisoproviderName='+avisoproviderName, function(data) {
		  			if(data == 'sucesso') {
				  		selecionado.remove();
		  				atualizaNuAviso(selecionado.attr('categoria'));
				  		refreshBotoes(null);
		  			}
		  		});
	  		}
	  	}
  	}
  	
  	function refreshAvisos() {
  		var selecionado = jQuery('.selecionado a');
  		jQuery('#tabelaFolha a').each(function() {
  				refreshAvisoCount(this);
  		});
  		if(selecionado.size() > 0){
  			clickItemMenu(selecionado[0]);
  		} 
  	}
  	
  	function refreshAvisoCount(obj){
  		limparAviso();
		jQuery('.selecionado').removeClass('selecionado');
		var categoria = obj.getAttribute('categoria');
		var listaAvisos = jQuery('#listaAvisos');
		listaAvisos.children("li:not(#avisoModelo)").remove();
		jQuery.get("getAvisos.do?cdCategoria="+categoria, function(dados) {
			var data = eval("("+dados+")");
			var dataLength = data.length;
			var nuAvisosNaoLidos = 0;
			for(var i = dataLength-1; i >= 0; i--){
	 	 		var aviso = data[i];
				var lido = aviso.lido;
		 		if(lido != true) {
		 			nuAvisosNaoLidos = nuAvisosNaoLidos + 1; 
		 		}
		 	}
	 		atualizaNuAviso(nuAvisosNaoLidos, categoria);
		});
  	}
  	
  	function resizeMural() {
		var widgets = jQuery('.widgets');
		var footer = jQuery('#footer', parent.document);
		jQuery('body').css('height',(footer[0].offsetTop-3)+'px');
		widgets.css('height',(footer[0].offsetTop-100)+'px');
	}// based on code written by Tan Ling Wee on 2 Dec 2001
// last updated 20 June 2003
// email : fuushikaden@yahoo.com
//
// Modified to be completely object-oriented, CSS based and using proper DOM-access functions
// @author Martin Marinschek
// @author Sylvain Vieujot

org_apache_myfaces_CalendarInitData = function()
{
 this.fixedX = -1;
 // x position (-1 if to appear below control)
 this.fixedY = -1;
 // y position (-1 if to appear below control)
 this.startAt = 0;
 // 0 - sunday ; 1 - monday
 this.showWeekNumber = 1;
 // 0 - don't show; 1 - show
 this.showToday = 1;
 // 0 - don't show; 1 - show
 this.imgDir = "images/";
 // directory for images ... e.g. this.imgDir="/img/"
 this.themePrefix = "jscalendar-DB";
 // columns width 
 this.columnsWidth = 26;
 
 this.gotoString = "Go To Current Month";
 this.todayString = "Today is";
 this.todayDateFormat = null;
 this.weekString = "Wk";
 this.scrollLeftMessage = "Click to scroll to previous month. Hold mouse button to scroll automatically.";
 this.scrollRightMessage = "Click to scroll to next month. Hold mouse button to scroll automatically."
 this.selectMonthMessage = "Click to select a month."
 this.selectYearMessage = "Click to select a year."
 this.selectDateMessage = "Select [date] as date." // do not replace [date], it will be replaced by date.

 this.popupLeft=false;

 this.monthName = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
 this.dayName = this.startAt == 0 ? new Array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat") : new Array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun");
}

org_apache_myfaces_DateParts = function(sec, min, hour, date, month, year)
{
 this.sec = sec;
 this.min = min;
 this.hour = hour;
 this.date = date;
 this.month = month;
 this.year = year;
}

org_apache_myfaces_HolidayRec = function(d, m, y, desc)
{
 this.d = d;
 this.m = m;
 this.y = y;
 this.desc = desc;
}

org_apache_myfaces_PopupCalendar = function()
{
 this.inited = false;
 this.idPrefix = "org_apache_myfaces_PopupCalendar";

 this.selectedDate = new org_apache_myfaces_DateParts(0, 0, 0, 0, 0, 0);
 this.saveSelectedDate = new org_apache_myfaces_DateParts(0, 0, 0, 0, 0, 0);

 this.monthConstructed = false;
 this.yearConstructed = false;
 this.intervalID1;
 this.intervalID2;
 this.timeoutID1;
 this.timeoutID2;
 this.ctlToPlaceValue;
 this.ctlNow;
 this.containerCtl;
 this.dateFormat="MM/dd/yyyy";
 this.nStartingYear;
 this.bPageLoaded = false;
 this.ie = document.all;
 this.dom = document.getElementById;
 this.ns4 = document.layers;
 this.dateFormatSymbols = new org_apache_myfaces_DateFormatSymbols();
 this.initData = new org_apache_myfaces_CalendarInitData();
 this.today = new Date();
 this.dateNow = this.today.getDate();
 this.monthNow = this.today.getMonth();
 this.yearNow = this.today.getYear();
 this.imgSrc = new Array("spwCalendarDrop1.gif", "spwCalendarDrop2.gif", "spwCalendarLeft1.gif", "spwCalendarLeft2.gif", "spwCalendarRight1.gif", "spwCalendarRight2.gif");
 this.img = new Array();

 //elements which need to change their dynamical
 //representation over time
 this.calendarDiv;
 this.selectMonthDiv;
 this.selectYearDiv;
 this.todaySpan = null;
 this.captionSpan = null;
 this.contentSpan = null;
 this.closeCalendarSpan = null;
 this.monthSpan = null;
 this.yearSpan = null
 this.changeMonthImg = null;
 this.changeYearImg = null;

 this.holidaysCounter = 0;
 this.holidays = new Array();

 this.bClickOnCalendar = false;
 this.bCalendarHidden = true;

 this.myFacesCtlType = "x:inputCalendar";
 this.inputDateClientId;
 
 var topLevelTable;
 var tdDate;
 var tdSchedule;
 var tdFooter;
 var tdButton;
 var scheduleTable;
 var folderTabs;
 var folderTabsRow;
 var tabMouseOver;
 var tabMouseOut;
 var currentTab;
 var comboMonthYearRow;
 var closeCalendarLink;
 var closeButtonCell;
 var closeFolderCell;

 this.txtSchedule_1 = "Dia da geraï¿½ï¿½o do relatï¿½rio";
 this.txtSchedule_2_1 = "Dia";
 this.txtSchedule_2_2 = "do mï¿½s";
 this.txtSchedule_3 = "ï¿½ltimo dia do mï¿½s";
 this.txtSchedule_4 = "dia(s)";
 this.txtSchedule_5 = "semana(s)";
 this.txtSchedule_6 = "mes(es)";
 
 this.inputSchedule;
}

org_apache_myfaces_PopupCalendar.prototype._hideElement = function(overDiv)
{

 if (document.all)
 {
 var iframe = document.getElementById(overDiv.id + "_IFRAME");

 if (iframe == null)
 {
 // the source attribute is to avoid a IE error message about non secure content on https connections
 iframe = document.createElement("<iframe src='javascript:false;' id='" + overDiv.id + "_IFRAME' style='visibility:hidden; position: absolute; top:0px;left:0px;'/>");
 this.containerCtl.appendChild(iframe);
 }

 this._recalculateElement(overDiv);
 }
}

org_apache_myfaces_PopupCalendar.prototype._recalculateElement = function(overDiv)
{

 if (document.all)
 {
 var iframe = document.getElementById(overDiv.id + "_IFRAME");

 if (iframe)
 {
 var popup = overDiv;

 popup.style.zIndex = 98;

 iframe.style.zIndex = popup.style.zIndex - 1;
 iframe.style.width = popup.offsetWidth;
 iframe.style.height = popup.offsetHeight;
 iframe.style.top = popup.style.top;
 iframe.style.left = popup.style.left;
 iframe.style.display = "block";
 iframe.style.visibility = "visible";
 /*we have to set an explicit visible otherwise it wont work*/
 }
 }
}

org_apache_myfaces_PopupCalendar.prototype._showElement = function(overDiv)
{

 var iframe = document.getElementById(overDiv.id + "_IFRAME");

 if (document.all && iframe)
 {
 iframe.style.display = "none";
 }
}

org_apache_myfaces_PopupCalendar.prototype.addHoliday = function(d, m, y, desc)
{
 this.holidays[this.holidaysCounter++] = new org_apache_myfaces_HolidayRec (d, m, y, desc);
}

org_apache_myfaces_PopupCalendar.prototype._swapImage = function(srcImg, destImg)
{

 if (srcImg)
 srcImg.setAttribute("src", this.initData.imgDir + destImg);
}

org_apache_myfaces_PopupCalendar.prototype._keypresshandler = function()
{

 try
 {

	 if (typeof event === 'undefined' || !myVar) {
	 	return;
	 }
	 if (event && event.keyCode == 27)
		 this._hideCalendar();
 }
 catch(ex)
 {
 }
}

org_apache_myfaces_PopupCalendar.prototype._clickhandler = function()
{
 if (!this.bClickOnCalendar) {
	 this._hideCalendar();
	 document.getElementById('spSpanPopCalendar__').style.display = 'none';
 } else {
	 document.getElementById('spSpanPopCalendar__').style.display = 'inline';
 }

 this.bClickOnCalendar = false;
}

org_apache_myfaces_PopupCalendar.prototype._getTdScheduleStyle = function(showSchedule){
	//return ("border:0px; border-left:1px solid #A0A0A0; background-color:#FFFFFF;" + 
	return ("border:0px; background-color:#FFFFFF;" + 
		(showSchedule ? "" : " display:none;"));
}

org_apache_myfaces_PopupCalendar.prototype.selectSheduleOption = function(){
	if(!this.ctlToPlaceValue.readOnly){
		this.ctlToPlaceValue.previusClassName = this.ctlToPlaceValue.className;
		this.ctlToPlaceValue.className = "disabled";
		this.ctlToPlaceValue.readOnly = true;
	}
	var startChar;
	if($("tpSchedule_1").checked) {
		this.ctlToPlaceValue.value = this.txtSchedule_1;
		this.inputSchedule.value = "1";
	}else 
		if($("tpSchedule_2").checked) {
			this.ctlToPlaceValue.value = this.txtSchedule_2_1 + " " + $("nuNumSchedule_2").value + " " + this.txtSchedule_2_2;
			this.inputSchedule.value = "2;" + $("nuNumSchedule_2").value;
	}else 
		if($("tpSchedule_3").checked) {
			this.ctlToPlaceValue.value = this.txtSchedule_3;
			this.inputSchedule.value = "3";
	}else 
		if($("tpSchedule_4").checked) {
			this.ctlToPlaceValue.value = $("nuNumSchedule_4").value + " " + this.txtSchedule_4 + " " + $("nuNumScheduleDir_4").value;
			startChar = new String($("nuNumScheduleDir_4").value).charAt(0);
			this.inputSchedule.value = "4;" + $("nuNumSchedule_4").value + ";" + startChar;
	}else 
		if($("tpSchedule_5").checked) {
			this.ctlToPlaceValue.value = $("nuNumSchedule_5").value + " " + this.txtSchedule_5 + " " + $("nuNumScheduleDir_5").value;
			startChar = new String($("nuNumScheduleDir_5").value).charAt(0);
			this.inputSchedule.value = "5;" + $("nuNumSchedule_5").value + ";" + startChar;
	}else 
		if($("tpSchedule_6").checked) {
			this.ctlToPlaceValue.value = $("nuNumSchedule_6").value + " " + this.txtSchedule_6 + " " + $("nuNumScheduleDir_6").value;
			startChar = new String($("nuNumScheduleDir_6").value).charAt(0);
			this.inputSchedule.value = "6;" + $("nuNumSchedule_6").value + ";" + startChar;
	}
}

org_apache_myfaces_PopupCalendar.prototype._disableFolder = function(tabid){
	if(tabid == "tab_agendamento_id"){
		tdSchedule.style.display = "none";
		tdButton.style.display = "none";
	}else if(tabid = "tab_calendario_id"){
		tdDate.style.display = "none";
		tdFooter.style.display = "none";
		comboMonthYearRow.style.display = "none";
	}
}

org_apache_myfaces_PopupCalendar.prototype._enableFolder = function(tabid){
	if(tabid == "tab_agendamento_id"){
		tdSchedule.style.display = "";
		tdButton.style.display = "";
	}else if(tabid = "tab_calendario_id"){
		tdDate.style.display = "";
		tdFooter.style.display = "";
		comboMonthYearRow.style.display = "";
	}
}

org_apache_myfaces_PopupCalendar.prototype._getFolderTabsHeight = function(){
	return (folderTabsRow.style.display == "none" ? -2 : folderTabsRow.clientHeight);
}

org_apache_myfaces_PopupCalendar.prototype._tabClickHandler = function(tabid){
	if(tabid != currentTab){
		$(currentTab).className = this.initData.themePrefix + "-pastaDes";
		$(tabid).className = this.initData.themePrefix + "-pastaAtiva";
		this._disableFolder(currentTab);
		this._enableFolder(tabid);
		currentTab = tabid;
	}
	this._popDownMonth();
	this._popDownYear();
}

org_apache_myfaces_PopupCalendar.prototype._createFolderTabs = function(){
	folderTabs = document.createElement("table");
	folderTabs.width = "100%";
	folderTabs.cellPadding = 0;
	folderTabs.cellSpacing = 0;
	folderTabs.border = "0";
	var tr = folderTabs.appendChild(document.createElement("tbody")).appendChild(document.createElement("tr"));
	
	var td = tr.appendChild(document.createElement("td"));
	td.className = this.initData.themePrefix + "-pastaSep";
	this._appendNbsp(td);

	td = tr.appendChild(document.createElement("td"));
	td.className = this.initData.themePrefix + "-pastaAtiva";
	td.nowrap = "nowrap";
	td.id = "tab_calendario_id";
	Event.observe(td, "click", function(event){
		this._tabClickHandler("tab_calendario_id");
	}.bind(this), false);
	Event.observe(td, "mouseover", function(event){
		this.className = this.className.replace(/Des/, "Over");
	}.bind(td), false);
	Event.observe(td, "mouseout", function(event){
		this.className = this.className.replace(/Over/, "Des");
	}.bind(td), false);
	currentTab = "tab_calendario_id"
	td.appendChild(document.createTextNode("Calendï¿½rio"));

	td = tr.appendChild(document.createElement("td"));
	td.className = this.initData.themePrefix + "-pastaSep";
	this._appendNbsp(td);

	td = tr.appendChild(document.createElement("td"));
	td.className = this.initData.themePrefix + "-pastaDes";
	td.id = "tab_agendamento_id";
	td.nowrap = "nowrap";
	Event.observe(td, "click", function(event){
		this._tabClickHandler("tab_agendamento_id");
	}.bind(this), false);
	Event.observe(td, "mouseover", function(event){
		this.className = this.className.replace(/Des/, "Over");
	}.bind(td), false);
	Event.observe(td, "mouseout", function(event){
		this.className = this.className.replace(/Over/, "Des");
	}.bind(td), false);
	td.appendChild(document.createTextNode("Agendamento"));

	td = tr.appendChild(document.createElement("td"));
	td.className = this.initData.themePrefix + "-pastaFinal";
	td.width = "100%";
	this._appendNbsp(td);
	closeFolderCell = td;

	return folderTabs;
}

org_apache_myfaces_PopupCalendar.prototype._createTopLevelTable = function(){
  topLevelTable = document.createElement("table");
  topLevelTable.className = this.initData.themePrefix + "-table-date-style";
  topLevelTable.width = "100%";
  topLevelTable.style.border = "0";
  topLevelTable.cellSpacing = 0;
  topLevelTable.cellPadding = 0;
  var tbodyDS = document.createElement("tbody");
  topLevelTable.appendChild(tbodyDS);
  var rowDS = document.createElement("tr");
  rowDS.style.border = "0pt";
  tbodyDS.appendChild(rowDS);
  tdDate = document.createElement("td");
  tdDate.style.backgroundColor = "#FFFFFF";
  tdDate.style.verticalAlign = "top";
  rowDS.appendChild(tdDate);
  tdSchedule = document.createElement("td");
  tdSchedule.setAttribute("style", this._getTdScheduleStyle(false));
  rowDS.appendChild(tdSchedule);
  // rodapï¿½ do calendï¿½rio
  rowDS = tbodyDS.appendChild(document.createElement("tr"));
  rowDS.className = this.initData.themePrefix + "-today-style";
  tdFooter = rowDS.appendChild(document.createElement("td"));
  tdFooter.style.padding = 2;
  tdFooter.width = "100%";
  // rodapï¿½ do agendamento
  tdButton = document.createElement("td");
  rowDS.appendChild(tdButton);
  //tdButton.setAttribute("style", "border:0px; border-left:1px solid #A0A0A0; display:none;");
  //tdButton.setAttribute("style", "border:0px; display:none;");
  tdButton.style.align = "center";
  tdButton.style.height = "16px";
  tdButton.style.vAlign = "bottom";

  /*var doSchedule = document.createElement("a");
  doSchedule.className = this.initData.themePrefix + "-today-style";
  //doSchedule.setAttribute("title", this.initData.gotoString);
  doSchedule.setAttribute("href", "#")
  doSchedule.appendChild(document.createTextNode("Seleciona para agendamento"));
  Event.observe(doSchedule, "click", function(event){
   this.selectSheduleOption();
   this._hideCalendar();
   Event.stop(event);
  }.bindAsEventListener(this), false);
  tdButton.appendChild(doSchedule);*/
  var btOk;
  if(this.ie){
    btOk = tdButton.appendChild(document.createElement("<input type=\"button\">"));
  }else{
    btOk = tdButton.appendChild(document.createElement("input"));
    btOk.type = "button";
  }
  btOk.className = "spwBotao";
  btOk.value = "OK";
  btOk.style.height = "15px";
  Event.observe(btOk, "click", function(event){
   this.selectSheduleOption();
   this._hideCalendar();
   Event.stop(event);
  }.bindAsEventListener(this), false);
  Event.observe(btOk, "mouseover", function(event){
	this.className = "spwBotao-o";
  }.bindAsEventListener(btOk), false);
  Event.observe(btOk, "mouseout", function(event){
	this.className = "spwBotao";
  }.bindAsEventListener(btOk), false);
  this._appendNbsp(tdButton);
  var btCancel;
  if(this.ie){
    btCancel = tdButton.appendChild(document.createElement("<input type=\"button\">"));
  }else{
    btCancel = tdButton.appendChild(document.createElement("input"));
    btCancel.type = "button";
  }
  btCancel.className = "spwBotao";
  btCancel.value = "Cancelar";
  btCancel.style.height = "15px";
  Event.observe(btCancel, "click", function(event){
   this._hideCalendar();
   Event.stop(event);
  }.bindAsEventListener(this), false);
  Event.observe(btCancel, "mouseover", function(event){
	this.className = "spwBotao-o";
  }.bindAsEventListener(btCancel), false);
  Event.observe(btCancel, "mouseout", function(event){
	this.className = "spwBotao";
  }.bindAsEventListener(btCancel), false);
 }

org_apache_myfaces_PopupCalendar.prototype._createAndAppendRow = function(tbody){
  var row = document.createElement("tr");
  tbody.appendChild(row);
  var td = document.createElement("td");
  row.appendChild(td);
  return(td);
}

org_apache_myfaces_PopupCalendar.prototype._createRadio = function(nm, val, id){
	var rd;
	if(this.ie){
		rd = document.createElement("<input name='" + nm + "'>");
	}else{
		rd = document.createElement("input");
		rd.name = nm;
	}
	rd.type = "radio";
	rd.id = nm + "_" + id;
	rd.value = val;
	return(rd);
}

org_apache_myfaces_PopupCalendar.prototype._addNumberOptions = function(select, start, end, selected){
	var option;
	for(var i = start; i <= end; i++){
		option = select.appendChild(document.createElement("option"));
		if(i == selected){
			option.selected = true;
		}
		option.value = i;
		option.appendChild(document.createTextNode(i));
	}
}

org_apache_myfaces_PopupCalendar.prototype._createInputNumber = function(id, value, width){
	var input = document.createElement("input");
	input.id = id;
	input.value = value;
	input.style.width = width;
	return(input);
}

org_apache_myfaces_PopupCalendar.prototype._createDateOffset = function(
		td, radioname, radiovalue, radioid, 
		inputid, inputvalue, inputwidth, 
		label, selectid, selecfdef){
  function cleanSpaces(ctrl){
	  var value = new String(ctrl.value);
	  if(value.indexOf(" ") > -1){
	 	ctrl.value = value.replace(/ /g, "");
	  }
  }
  var radio = td.appendChild(this._createRadio(radioname, radiovalue, radioid));
  var strong = td.appendChild(document.createElement("strong"));
  var input = strong.appendChild(this._createInputNumber(inputid, inputvalue, inputwidth));
  this._appendNbsp(strong);
  strong.appendChild(document.createTextNode(label));
  this._appendNbsp(strong);
  strong.appendChild(this._createSelectAntesDepois(selectid, selecfdef));
  this._appendNbsp(strong);
  input.name = input.id;
  input.setAttribute('formato', '099');
  input.radioid = radioname + "_" + radioid;
  
  Event.observe(input, "blur", function(event){
    CM_BLR(this, event);
	cleanSpaces(this);
  }.bind(input), false);  
  Event.observe(input, "keypress", function(event){
   CM_KPS(this, event);
  }.bind(input), false);  
  Event.observe(input, "keydown", function(event){
    CM_KDN(this, event);
  }.bind(input), false);  
  Event.observe(input, "keyup", function(event){
    CM_KUP(this, event);
  }.bind(input), false);  
  Event.observe(input, "focus", function(event){
    C_OFC(this, event);
  }.bind(input), false);  
  Event.observe(input, "change", function(event){
    $(this.radioid).checked = true;
  }.bind(input), false);
  
}

org_apache_myfaces_PopupCalendar.prototype._appendOption = function(select, value, selected){
	var option = select.appendChild(document.createElement("option"));
	option.appendChild(document.createTextNode(value));
	option.value = value;
	if(selected){
		option.selected = true;
	}
}

org_apache_myfaces_PopupCalendar.prototype._createSelectAntesDepois = function(id, def){
	var select;
	select = document.createElement("select");
	select.id = id;
	this._appendOption(select, "antes", def != "depois");
	this._appendOption(select, "depois", def == "depois");
	select.value = def;
	return(select);
}

org_apache_myfaces_PopupCalendar.prototype._createScheduleTable = function(){
  scheduleTable = document.createElement("table");
  scheduleTable.className = this.initData.themePrefix + "-table-date-style";
  scheduleTable.cellSpacing = 2;
  scheduleTable.cellPadding = 0;
  var tbody = document.createElement("tbody");
  scheduleTable.appendChild(tbody);
  tdSchedule.style.verticalAlign = "top";
  tdSchedule.appendChild(scheduleTable);

  var row;
  // Tï¿½tulo
/*  var row = document.createElement("tr");
  row.className = this.initData.themePrefix + "-title-background-style";
  tbody.appendChild(row);
  var tdTitle = document.createElement("td");
  tdTitle.className = this.initData.themePrefix + "-title-style";
  tdTitle.setAttribute("style", "align:center;height:24px;");
  tdTitle.appendChild(document.createTextNode("Para agendamento"));
  row.appendChild(tdTitle);
*/
/*  tdTitle = row.appendChild(document.createElement("td"));
  tdTitle.className = this.initData.themePrefix + "-title-style";
  tdTitle.setAttribute("style", "align:center;height:24px;");
  var bt = tdTitle.appendChild(document.createElement("input"));
  bt.className = "spwBotao";
  bt.type = "button";
  bt.value = "OK";
  bt.name = "btOkSchedule_";
  bt.id = bt.name;
*/

  // radio buttoms
  var td;
  var radio;
  var strong;

  // primeiro radio
  td = this._createAndAppendRow(tbody);
  radio = td.appendChild(this._createRadio("tpSchedule", "1", "1"));
  radio.checked = true;
  strong = td.appendChild(document.createElement("strong"));
  strong.appendChild(document.createTextNode(this.txtSchedule_1));
  this._appendNbsp(strong); 
  this._appendNbsp(strong);

  // segundo radio
  td = this._createAndAppendRow(tbody);
  radio = td.appendChild(this._createRadio("tpSchedule", "2", "2"));
  strong = td.appendChild(document.createElement("strong"));
  text = strong.appendChild(document.createTextNode(this.txtSchedule_2_1));
  this._appendNbsp(strong);
  var select = strong.appendChild(document.createElement("select"));
  select.id = "nuNumSchedule_2";
  Event.observe(select, "change", function(){
    $("tpSchedule_2").checked = true;
  }.bind(this), false);  
  this._appendNbsp(strong);
  this._addNumberOptions(select, 1, 31, 1);
  text = strong.appendChild(document.createTextNode(this.txtSchedule_2_2));
  this._appendNbsp(strong);
  this._appendNbsp(strong);
  
  // terceiro radio
  td = this._createAndAppendRow(tbody);
  radio = this._createRadio("tpSchedule", "3", "3");
  td.appendChild(radio);
  strong = td.appendChild(document.createElement("strong"));
  strong.appendChild(document.createTextNode(this.txtSchedule_3));
  this._appendNbsp(strong);
  this._appendNbsp(strong);

  var input;
  // quarto radio
  td = this._createAndAppendRow(tbody);
  this._createDateOffset(td, "tpSchedule", "4", "4", "nuNumSchedule_4", "15", 30, this.txtSchedule_4, "nuNumScheduleDir_4", "antes")
  Event.observe($("nuNumScheduleDir_4"), "change", function(){
    $("tpSchedule_4").checked = true;
  }.bind(this), false);  

  // quinto radio
  td = this._createAndAppendRow(tbody);
  this._createDateOffset(td, "tpSchedule", "5", "5", "nuNumSchedule_5", "2", 30, this.txtSchedule_5, "nuNumScheduleDir_5", "antes");
  Event.observe($("nuNumScheduleDir_5"), "change", function(){
    $("tpSchedule_5").checked = true;
  }.bind(this), false);  

  // sexto radio
  td = this._createAndAppendRow(tbody);
  td.style.paddingBottom = "4px";
  this._createDateOffset(td, "tpSchedule", "6", "6", "nuNumSchedule_6", "1", 30, this.txtSchedule_6, "nuNumScheduleDir_6", "antes");
  Event.observe($("nuNumScheduleDir_6"), "change", function(){
    $("tpSchedule_6").checked = true;
  }.bind(this), false);  
}

org_apache_myfaces_PopupCalendar.prototype.init = function(containerCtl)
{
 if (this.dom)
 {

 if (!this.calendarDiv)
 {
 for (i = 0; i < this.imgSrc.length; i++)
 this.img[i] = new Image;

 this.containerCtl = containerCtl;
 this.calendarDiv = document.createElement("div");
 this.calendarDiv.id = containerCtl.id + "_calendarDiv";
 this.calendarDiv.className = this.initData.themePrefix + "-div-style";

 Event.observe(this.calendarDiv, "click", function()
 {
 this.bClickOnCalendar = true;
 }.bind(this), false);

 this.containerCtl.appendChild(this.calendarDiv);

 var mainTable = document.createElement("table");
 //var shrinkPopup = (27 - this.initData.columnsWidth) * 7; 
 //var popupWidth = ((this.initData.showWeekNumber == 1) ? 250 : 220) - shrinkPopup;
 //mainTable.setAttribute("style", "width:" + popupWidth + "px;");
 mainTable.className = this.initData.themePrefix + "-table-style";
 mainTable.cellPadding = 0;
 // original
 this.calendarDiv.appendChild(mainTable);
 // alterado
 /*this._createTopLevelTable();
 tdDate.appendChild(mainTable);
 this.calendarDiv.appendChild(topLevelTable);
 this._createScheduleTable();*/
 // fim alterado

 //This is necessary for IE. If you don't create a tbody element, the table will never show up!
 var mainBody = document.createElement("tbody");
 mainTable.appendChild(mainBody);

 //Novo cï¿½digo para as pastas
 folderTabsRow = mainBody.appendChild(document.createElement("tr"));
 folderTabsRow.appendChild(document.createElement("td")).appendChild(this._createFolderTabs());
 //fim novo cï¿½digo

 var mainRow = document.createElement("tr");
 comboMonthYearRow = mainRow;
 mainRow.className = this.initData.themePrefix + "-title-background-style";

 mainBody.appendChild(mainRow);

 var mainCell = document.createElement("td");
 mainCell.style.width = "100%";
 mainRow.appendChild(mainCell);

 var contentTable = document.createElement("table");
 contentTable.style.width = "100%";
// var shrinkPopup = (27 - this.initData.columnsWidth) * 7; 
// var calendatWidth = ((this.initData.showWeekNumber == 1) ? 248 : 218) - shrinkPopup;
// contentTable.setAttribute("style", "width:" + calendatWidth + "px;");

 var contentBody = document.createElement("tbody");
 contentTable.appendChild(contentBody);

 mainCell.appendChild(contentTable);

 var headerRow = document.createElement("tr");
 contentBody.appendChild(headerRow);

 var captionCell = document.createElement("td");
 captionCell.className = this.initData.themePrefix + "-title-style";
 headerRow.appendChild(captionCell);
 Event.observe(captionCell, "click", function(event){
  this._popDownMonth();
  this._popDownYear();
 }.bindAsEventListener(this), false);

 this.captionSpan = document.createElement("span");
 captionCell.appendChild(this.captionSpan);

 closeButtonCell = document.createElement("td");
 closeButtonCell.setAttribute("style", "text-align:right;");
 headerRow.appendChild(closeButtonCell);

 closeCalendarLink = document.createElement("a");
 closeCalendarLink.setAttribute("href", "#");
 Event.observe(closeCalendarLink, "click", function(event)
 {
 this._hideCalendar();
 Event.stop(event);
 }.bindAsEventListener(this), false);

 closeButtonCell.appendChild(closeCalendarLink);

 this.closeCalendarSpan = document.createElement("span");

 closeCalendarLink.appendChild(this.closeCalendarSpan);

 var contentRow = document.createElement("tr");
 mainBody.appendChild(contentRow);

 var contentCell = document.createElement("td");
 contentCell.className = this.initData.themePrefix + "-body-style";
 contentRow.appendChild(contentCell);

 this.contentSpan = document.createElement("span");
 //original
 //contentCell.appendChild(this.contentSpan);
 this._createTopLevelTable();
 tdDate.appendChild(this.contentSpan);
 contentCell.appendChild(topLevelTable);
 this._createScheduleTable();

 if (this.initData.showToday == 1)
 {
 /*var todayRow = document.createElement("tr");
 todayRow.className = this.initData.themePrefix + "-today-style";
 mainBody.appendChild(todayRow);

 var todayCell = document.createElement("td");
 todayCell.className = this.initData.themePrefix + "-today-lbl-style";
 todayRow.appendChild(todayCell);*/

 this.todaySpan = document.createElement("span");
 //original - o cï¿½digo acima tambï¿½m foi comentado
 //todayCell.appendChild(this.todaySpan);
 //alterado por
 tdFooter.appendChild(this.todaySpan);
 tdFooter.className = this.initData.themePrefix + "-today-lbl-style";
 //fim alteraï¿½ï¿½o
 }

 this.selectMonthDiv = document.createElement("div");
 this.selectMonthDiv.id = this.containerCtl.id + "_selectMonthDiv";
 this.selectMonthDiv.className = this.initData.themePrefix + "-div-style";

 this.containerCtl.appendChild(this.selectMonthDiv);

 this.selectYearDiv = document.createElement("div");
 this.selectYearDiv.id = this.containerCtl.id + "_selectYearDiv";
 this.selectYearDiv.className = this.initData.themePrefix + "-div-style";

 this.containerCtl.appendChild(this.selectYearDiv);

 Event.observe(document, "keypress", this._keypresshandler.bind(this), false);
 Event.observe(document, "click", this._clickhandler.bind(this), false);
 }
 }


 if (!this.ns4)
 {
 if (!this.ie)
 this.yearNow += 1900;

 this._hideCalendar();

 this.monthConstructed = false;
 this.yearConstructed = false;

 if (this.initData.showToday == 1)
 {
 this.todaySpan.appendChild(document.createTextNode(this.initData.todayString + " "))

 var todayLink = document.createElement("a");
 todayLink.className = this.initData.themePrefix + "-today-style";
 todayLink.setAttribute("title", this.initData.gotoString);
 todayLink.setAttribute("href", "#")
 todayLink.appendChild(document.createTextNode(this._todayIsDate()));
 Event.observe(todayLink, "click", function(event)
 {
 //this._closeCalendar();
 //Event.stop(event);

 this.selectedDate.month = this.monthNow;
 this.selectedDate.year = this.yearNow;
 //this._constructCalendar();
 // this two next lines was included to select the current day and close calendar replacing the above line.
 this.selectedDate.date = this.dateNow;
 this._closeCalendar();
 Event.stop(event);
 }.bindAsEventListener(this), false);
 Event.observe(todayLink, "mousemove", function()
 {
 window.status = this.initData.gotoString;
 }.bind(this), false);
 Event.observe(todayLink, "mouseout", function()
 {
 window.status = "";
 }.bind(this), false);

 this.todaySpan.appendChild(todayLink);
 }

 this._appendNavToCaption("left", "spwCalendarLeft");
 this._appendNavToCaption("right", "spwCalendarRight");

 this.monthSpan = document.createElement("span");
 this.monthSpan.className = this.initData.themePrefix + "-title-control-normal-style";

 Event.observe(this.monthSpan, "mouseover", function(event)
 {
 this._swapImage(this.changeMonthImg, "spwCalendarDrop2.gif");
 this.monthSpan.className = this.initData.themePrefix + "-title-control-select-style";
 window.status = this.selectMonthMessage;
 }.bindAsEventListener(this), false);

 Event.observe(this.monthSpan, "mouseout", function(event)
 {
 this._swapImage(this.changeMonthImg, "spwCalendarDrop1.gif");
 this.monthSpan.className = this.initData.themePrefix + "-title-control-normal-style";
 window.status = "";
 }.bindAsEventListener(this), false);

 Event.observe(this.monthSpan, "click", function(event)
 {
 this._popUpMonth();
 Event.stop(event);
 }.bind(this), false);

 this.captionSpan.appendChild(this.monthSpan);
 this._appendNbsp(this.captionSpan);

 this.yearSpan = document.createElement("span");
 this.yearSpan.className = this.initData.themePrefix + "-title-control-normal-style";

 Event.observe(this.yearSpan, "mouseover", function(event)
 {
 this._swapImage(this.changeYearImg, "spwCalendarDrop2.gif");
 this.yearSpan.className = this.initData.themePrefix + "-title-control-select-style";
 window.status = this.selectYearMessage;
 }.bindAsEventListener(this), false);

 Event.observe(this.yearSpan, "mouseout", function(event)
 {
 this._swapImage(this.changeYearImg, "spwCalendarDrop1.gif");
 this.yearSpan.className = this.initData.themePrefix + "-title-control-normal-style";
 window.status = "";
 }.bindAsEventListener(this), false);

 Event.observe(this.yearSpan, "click", function(event)
 {
 this._popUpYear();
 Event.stop(event);
 }.bind(this), false);

 this.captionSpan.appendChild(this.yearSpan);
 this._appendNbsp(this.captionSpan);

 this.bPageLoaded = true;
 }
 this.inited = true;
}

org_apache_myfaces_PopupCalendar.prototype._appendNavToCaption = function(direction, iconName)
{
 var imgLeft = document.createElement("img");
 imgLeft.setAttribute("src", this.initData.imgDir + iconName + "1.gif");
 imgLeft.setAttribute("width","10px");
 imgLeft.setAttribute("height","11px");
 imgLeft.setAttribute("style", "border:0px;")

 var spanLeft = document.createElement("span");

 this._createControl(direction, spanLeft, imgLeft, iconName);

 this._appendNbsp(spanLeft);
 spanLeft.appendChild(imgLeft);
 this._appendNbsp(spanLeft);
 this.captionSpan.appendChild(spanLeft);
 this._appendNbsp(spanLeft);
}

org_apache_myfaces_PopupCalendar.prototype._createControl = function(direction, spanLeft, imgLeft, iconName)
{
 spanLeft.className = this.initData.themePrefix + "-title-control-normal-style";
 Event.observe(spanLeft, "mouseover", function(event)
 {
 this._swapImage(imgLeft, iconName + "2.gif");
 spanLeft.className = this.initData.themePrefix + "-title-control-select-style";
 if (direction == "left")
 {
 window.status = this.scrollLeftMessage;
 }
 else
 {
 window.status = this.scrollRightMessage;
 }
 }.bindAsEventListener(this), false);
 Event.observe(spanLeft, "click", function()
 {
 if (direction == "left")
 {
 this._decMonth();
 }
 else
 {
 this._incMonth();
 }
 }.bind(this), false);
 Event.observe(spanLeft, "mouseout", function(event)
 {
 clearInterval(this.intervalID1);
 this._swapImage(imgLeft, iconName + "1.gif");
 spanLeft.className = "" + this.initData.themePrefix + "-title-control-normal-style";
 window.status = "";
 }.bindAsEventListener(this), false);
 Event.observe(spanLeft, "mousedown", function()
 {
 clearTimeout(this.timeoutID1);
 this.timeoutID1 = setTimeout((function()
 {
 if (direction == "left")
 {
 this._startDecMonth();
 }
 else
 {
 this._startIncMonth();
 }
 }).bind(this), 500)
 }.bind(this), false);
 Event.observe(spanLeft, "mouseup", function()
 {
 clearTimeout(this.timeoutID1);
 clearInterval(this.intervalID1);
 }.bind(this), false);
}

org_apache_myfaces_PopupCalendar.prototype._appendNbsp = function(element)
{
 if (element)
 element.appendChild(document.createTextNode(String.fromCharCode(160)));
}
org_apache_myfaces_PopupCalendar.prototype._todayIsDate = function()
{
 var format = new org_apache_myfaces_SimpleDateFormat(this.initData.todayDateFormat?
 this.initData.todayDateFormat:this.dateFormat,
 this.dateFormatSymbols);
 return format.format(this.today);
}

org_apache_myfaces_PopupCalendar.prototype._hideCalendar = function()
{
 this.calendarDiv.style.visibility = "hidden"
 this.bCalendarHidden = true;
 if (this.selectMonthDiv.style != null)
 {
 this.selectMonthDiv.style.visibility = "hidden";
 }
 if (this.selectYearDiv.style != null)
 {
 this.selectYearDiv.style.visibility = "hidden";
 }

 this._showElement(this.selectMonthDiv);
 this._showElement(this.selectYearDiv);
 this._showElement(this.calendarDiv);
}

org_apache_myfaces_PopupCalendar.prototype._padZero = function(num)
{
 return (num < 10)? '0' + num : num;
}

org_apache_myfaces_PopupCalendar.prototype._constructDate = function(d, m, y)
{
 var format = new org_apache_myfaces_SimpleDateFormat(this.dateFormat, this.dateFormatSymbols);
 return format.format(new Date(y, m, d, this.selectedDate.hour, this.selectedDate.min, this.selectedDate.sec));
}

org_apache_myfaces_PopupCalendar.prototype._closeCalendar = function()
{
 this._hideCalendar();

 if (this.myFacesCtlType != "x:inputDate")
 {
 this.ctlToPlaceValue.value = this._constructDate(this.selectedDate.date, this.selectedDate.month, this.selectedDate.year)
 jQuery('#'+this.ctlToPlaceValue.id.replace(/\./g, '\\.')).blur();
 jQuery('#'+this.ctlToPlaceValue.id.replace(/\./g, '\\.')).change();
 
 var onchange = this.ctlToPlaceValue.getAttribute("onchange");
 if (onchange)
 {
 this.ctlToPlaceValue.onblur();
 this.ctlToPlaceValue.onchange();
 }
 var onblur = this.ctlToPlaceValue.getAttribute("onblur");
 if(onblur)
 {
 this.ctlToPlaceValue.onblur();
 }
 }
 else
 {
 document.getElementById(this.myFacesInputDateClientId + ".day").value = this.selectedDate.date;
 document.getElementById(this.myFacesInputDateClientId + ".month").value = this.selectedDate.month + 1;
 document.getElementById(this.myFacesInputDateClientId + ".year").value = this.selectedDate.year;
 }
 
 if(this.ctlToPlaceValue.previusClassName != null){
	this.ctlToPlaceValue.className = this.ctlToPlaceValue.previusClassName;
	this.ctlToPlaceValue.readOnly = false;
 }
 if(this.inputSchedule != null){
	 this.inputSchedule.value = "";
 }
}

/*** Month Pulldown ***/

org_apache_myfaces_PopupCalendar.prototype._startDecMonth = function()
{
 this.intervalID1 = setInterval((function()
 {
 this._decMonth
 }).bind(this), 80);
}

org_apache_myfaces_PopupCalendar.prototype._startIncMonth = function()
{
 this.intervalID1 = setInterval((function()
 {
 this._incMonth
 }).bind(this), 80);
}

org_apache_myfaces_PopupCalendar.prototype._incMonth = function()
{
 this.selectedDate.month = this.selectedDate.month + 1;
 if (this.selectedDate.month > 11)
 {
 this.selectedDate.month = 0;
 this.selectedDate.year++;
 }
 this._popDownMonth();
 this._popDownYear();
 this._constructCalendar();
}

org_apache_myfaces_PopupCalendar.prototype._decMonth = function()
{
 this.selectedDate.month = this.selectedDate.month - 1;
 if (this.selectedDate.month < 0)
 {
 this.selectedDate.month = 11
 this.selectedDate.year--
 }
 this._popDownMonth();
 this._popDownYear();
 this._constructCalendar()
}


org_apache_myfaces_PopupCalendar.prototype._removeAllChildren = function(element)
{
 while (element && element.hasChildNodes())
 element.removeChild(element.lastChild);
}

org_apache_myfaces_PopupCalendar.prototype._constructMonth = function()
{
 this._popDownYear();
 if (!this.monthConstructed)
 {

 var selectMonthTable = document.createElement("table");
 selectMonthTable.setAttribute("style", "width:70px;border-collapse:collapse;")
 selectMonthTable.className = this.initData.themePrefix + "-dropdown-style";

 this._removeAllChildren(this.selectMonthDiv);

 this.selectMonthDiv.appendChild(selectMonthTable);

 Event.observe(selectMonthTable, "mouseover", function()
 {
 clearTimeout(this.timeoutID1);
 }.bind(this), false);
 Event.observe(selectMonthTable, "mouseout", function(event)
 {
 clearTimeout(this.timeoutID1);
 this.timeoutID1 = setTimeout((function()
 {
 this._popDownMonth()
 }).bind(this), 100);
 Event.stop(event);
 }.bindAsEventListener(this), false);

 var selectMonthTableBody = document.createElement("tbody");
 selectMonthTable.appendChild(selectMonthTableBody);

 for (i = 0; i < 12; i++)
 {
 var sName = this.initData.monthName[i];

 var sNameNode = null;

 if (i == this.selectedDate.month)
 {
 sNameNode = document.createElement("span");
 sNameNode.setAttribute("style", "font-weight:bold;");
 sNameNode.appendChild(document.createTextNode(sName));
 sNameNode.setAttribute("userData",i);
 }
 else
 {
 sNameNode = document.createTextNode(sName);
 }

 var monthRow = document.createElement("tr");
 selectMonthTableBody.appendChild(monthRow);

 var monthCell = document.createElement("td");
 monthCell.setAttribute("userData",i);
 monthRow.appendChild(monthCell);

 Event.observe(monthCell, "mouseover", function(event)
 {
 Event.element(event).className = this.initData.themePrefix + "-dropdown-select-style";
 }.bind(this), false);

 Event.observe(monthCell, "mouseout", function(event)
 {
 Event.element(event).className = this.initData.themePrefix + "-dropdown-normal-style";
 }.bind(this), false);

 Event.observe(monthCell, "click", function(event)
 {
 this.monthConstructed = false;
 this.selectedDate.month = parseInt(Event.element(event).getAttribute("userData"),10);
 this._constructCalendar();
 this._popDownMonth();
 Event.stop(event);
 }.bindAsEventListener(this), false);

 this._appendNbsp(monthCell);
 monthCell.appendChild(sNameNode);
 this._appendNbsp(monthCell);
 }

 this.monthConstructed = true;
 }
}

org_apache_myfaces_PopupCalendar.prototype._popUpMonth = function()
{
 this._constructMonth();
 this.selectMonthDiv.style.visibility = (this.dom || this.ie)? "visible" : "show";
 this.selectMonthDiv.style.left = parseInt(this._formatInt(this.calendarDiv.style.left), 10) + 48 + "px";
 this.selectMonthDiv.style.top = parseInt(this._formatInt(this.calendarDiv.style.top), 10) + 26 + this._getFolderTabsHeight() + "px";

 this._hideElement(this.selectMonthDiv);
}

org_apache_myfaces_PopupCalendar.prototype._popDownMonth = function()
{
 this.selectMonthDiv.style.visibility = "hidden";
 this._showElement(this.selectMonthDiv);
}

/*** Year Pulldown ***/

org_apache_myfaces_PopupCalendar.prototype._incYear = function()
{
 for (i = 0; i < 7; i++)
 {
 newYear = (i + this.nStartingYear) + 1;

 this._createAndAddYear(newYear, i);
 }
 this.nStartingYear++;
 this.bClickOnCalendar = true;
}

org_apache_myfaces_PopupCalendar.prototype._createAndAddYear = function(newYear, i)
{
 var parentNode = document.getElementById(this.containerCtl.getAttribute("id")+"y" + i);

 this._removeAllChildren(parentNode);

 if (newYear == this.selectedDate.year)
 {
 this._appendNbsp(parentNode);
 var newYearSpan = document.createElement("span");
 newYearSpan.setAttribute("userData",newYear);
 newYearSpan.appendChild(document.createTextNode(newYear));
 parentNode.appendChild(newYearSpan);
 this._appendNbsp(parentNode);
 }
 else
 {
 this._appendNbsp(parentNode);
 parentNode.appendChild(document.createTextNode(newYear));
 this._appendNbsp(parentNode);
 }

 parentNode.setAttribute("userData",newYear);
}


org_apache_myfaces_PopupCalendar.prototype._decYear = function()
{
 for (i = 0; i < 7; i++)
 {
 newYear = (i + this.nStartingYear) - 1;

 this._createAndAddYear(newYear, i);
 }
 this.nStartingYear--;
 this.bClickOnCalendar = true;
}

org_apache_myfaces_PopupCalendar.prototype._constructYear = function()
{
 this._popDownMonth();
 var sHTML = "";
 if (!this.yearConstructed)
 {

 var selectYearTable = document.createElement("table");
 selectYearTable.setAttribute("style", "width:44px;border-collapse:collapse;")
 selectYearTable.className = this.initData.themePrefix + "-dropdown-style";

 this._removeAllChildren(this.selectYearDiv);

 this.selectYearDiv.appendChild(selectYearTable);

 Event.observe(selectYearTable, "mouseover", function()
 {
 clearTimeout(this.timeoutID2);
 }.bind(this), false);
 Event.observe(selectYearTable, "mouseout", function(event)
 {
 clearTimeout(this.timeoutID2);
 this.timeoutID2 = setTimeout((function()
 {
 this._popDownYear()
 }).bind(this), 100);
 Event.stop(event);
 }.bindAsEventListener(this), false);


 var selectYearTableBody = document.createElement("tbody");
 selectYearTable.appendChild(selectYearTableBody);

 var selectYearRowMinus = document.createElement("tr");
 selectYearTableBody.appendChild(selectYearRowMinus);

 var selectYearCellMinus = document.createElement("td");
 selectYearCellMinus.setAttribute("align", "center");

 selectYearCellMinus.appendChild(document.createTextNode("-"));

 selectYearRowMinus.appendChild(selectYearCellMinus);

 Event.observe(selectYearCellMinus, "mouseover", function(event)
 {
 Event.element(event).className = this.initData.themePrefix + "-dropdown-select-style";
 }.bindAsEventListener(this), false);

 Event.observe(selectYearCellMinus, "mouseout", function(event)
 {
 clearInterval(this.intervalID1);
 Event.element(event).className = this.initData.themePrefix + "-dropdown-normal-style";
 }.bindAsEventListener(this), false);

 Event.observe(selectYearCellMinus, "mousedown", function(event)
 {
 clearInterval(this.intervalID1);
 this.intervalID1 = setInterval((function()
 {
 this._decYear();
 }).bind(this), 30);
 Event.stop(event);
 }.bindAsEventListener(this), false);

 Event.observe(selectYearCellMinus, "mouseup", function(event)
 {
 clearInterval(this.intervalID1);
 Event.stop(event);
 }.bindAsEventListener(this), false);


 //sHTML = "<tr><td align='center' onmouseover='this.className=\""+this.initData.themePrefix+"-dropdown-select-style\"' onmouseout='clearInterval(this.intervalID1); this.className=\""+this.initData.themePrefix+"-dropdown-normal-style\"' onmousedown='clearInterval(this.intervalID1);this.intervalID1=setInterval(\"_decYear()\",30)' onmouseup='clearInterval(this.intervalID1)'>-</td></tr>";

 this.nStartingYear = this.selectedDate.year - 3;
 var j = 0;
 for (i = this.selectedDate.year - 3; i <= (this.selectedDate.year + 3); i++)
 {
 var sName = i;

 var sNameNode = null;

 if (i == this.selectedDate.year)
 {
 sNameNode = document.createElement("span");
 sNameNode.setAttribute("style", "font-weight:bold;");
 sNameNode.appendChild(document.createTextNode(sName));
 sNameNode.setAttribute("userData", sName);
 }
 else
 {
 sNameNode = document.createTextNode(sName);
 }

 var yearRow = document.createElement("tr");
 selectYearTableBody.appendChild(yearRow);

 var yearCell = document.createElement("td");
 yearCell.setAttribute("userData",sName);
 yearCell.setAttribute("id",this.containerCtl.getAttribute("id")+"y" + j);
 yearRow.appendChild(yearCell);

 Event.observe(yearCell, "mouseover", function(event)
 {
 Event.element(event).className = this.initData.themePrefix + "-dropdown-select-style";
 }.bind(this), false);

 Event.observe(yearCell, "mouseout", function(event)
 {
 Event.element(event).className = this.initData.themePrefix + "-dropdown-normal-style";
 }.bind(this), false);

 Event.observe(yearCell, "click", function(event)
 {
 var elem = Event.element(event);
 var sYear = null;
 this.selectedDate.year = parseInt(this._formatInt(elem.getAttribute("userData"),10));
 this.yearConstructed = false;
 this._popDownYear();
 this._constructCalendar();
 Event.stop(event);
 }.bindAsEventListener(this), false);

 this._appendNbsp(yearCell);
 yearCell.appendChild(sNameNode);
 this._appendNbsp(yearCell);
 j++;
 }

 var selectYearRowPlus = document.createElement("tr");
 selectYearTableBody.appendChild(selectYearRowPlus);

 var selectYearCellPlus = document.createElement("td");
 selectYearCellPlus.setAttribute("align", "center");

 selectYearCellPlus.appendChild(document.createTextNode("+"));

 selectYearRowPlus.appendChild(selectYearCellPlus);

 Event.observe(selectYearCellPlus, "mouseover", function(event)
 {
 Event.element(event).className = this.initData.themePrefix + "-dropdown-select-style";
 }.bindAsEventListener(this), false);

 Event.observe(selectYearCellPlus, "mouseout", function(event)
 {
 clearInterval(this.intervalID2);
 Event.element(event).className = this.initData.themePrefix + "-dropdown-normal-style";
 }.bindAsEventListener(this), false);

 Event.observe(selectYearCellPlus, "mousedown", function(event)
 {
 clearInterval(this.intervalID2);
 this.intervalID2 = setInterval((function()
 {
 this._incYear();
 }).bind(this), 30);
 }.bindAsEventListener(this), false);

 Event.observe(selectYearCellPlus, "mouseup", function(event)
 {
 clearInterval(this.intervalID2);
 }.bindAsEventListener(this), false);

 this.yearConstructed = true;
 }
}

org_apache_myfaces_PopupCalendar.prototype._popDownYear = function()
{
 clearInterval(this.intervalID1);
 clearTimeout(this.timeoutID1);
 clearInterval(this.intervalID2);
 clearTimeout(this.timeoutID2);
 this.selectYearDiv.style.visibility = "hidden";
 this._showElement(this.selectYearDiv);
}

org_apache_myfaces_PopupCalendar.prototype._popUpYear = function()
{
 var leftOffset;

 this._constructYear();
 this.selectYearDiv.style.visibility = (this.dom || this.ie) ? "visible" : "show";
 leftOffset = parseInt(this._formatInt(this.calendarDiv.style.left), 10) + this.yearSpan.offsetLeft;
 if (this.ie) leftOffset += 6;
 if (!this.ie) leftOffset += 5;
 this.selectYearDiv.style.left = leftOffset + "px";
 this.selectYearDiv.style.top = parseInt(this._formatInt(this.calendarDiv.style.top), 10) + 26 + this._getFolderTabsHeight() + "px";
  
 this._hideElement(this.selectYearDiv);
}

/*** calendar ***/
org_apache_myfaces_PopupCalendar.prototype._weekNbr = function(n)
{
 // Algorithm used:
 // From Klaus Tondering's Calendar document (The Authority/Guru)
 // hhtp://www.tondering.dk/claus/calendar.html
 // a = (14-month) / 12
 // y = year + 4800 - a
 // m = month + 12a - 3
 // J = day + (153m + 2) / 5 + 365y + y / 4 - y / 100 + y / 400 - 32045
 // d4 = (J + 31741 - (J mod 7)) mod 146097 mod 36524 mod 1461
 // L = d4 / 1460
 // d1 = ((d4 - L) mod 365) + L
 // WeekNumber = d1 / 7 + 1

 year = n.getFullYear();
 month = n.getMonth() + 1;
 if (this.initData.startAt == 0)
 day = n.getDate() + 1;
 else
 day = n.getDate();

 a = Math.floor((14 - month) / 12);
 y = year + 4800 - a;
 m = month + 12 * a - 3;
 b = Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400);
 J = day + Math.floor((153 * m + 2) / 5) + 365 * y + b - 32045;
 d4 = (((J + 31741 - (J % 7)) % 146097) % 36524) % 1461;
 L = Math.floor(d4 / 1460);
 d1 = ((d4 - L) % 365) + L;
 week = Math.floor(d1 / 7) + 1;

 return week;
}

org_apache_myfaces_PopupCalendar.prototype._appendCell = function(parentElement, value)
{
 var cell = document.createElement("td");
 cell.setAttribute("style", "text-align:right;");

 if (value && value != "")
 {
 cell.appendChild(document.createTextNode(value));
 }
 else
 {
 this._appendNbsp(cell);
 }

 parentElement.appendChild(cell);
}

org_apache_myfaces_PopupCalendar.prototype._getDateStyle = function(datePointer)
{
 var sStyle = this.initData.themePrefix + "-normal-day-style";
 //regular day

 if ((datePointer == this.dateNow) &&
 (this.selectedDate.month == this.monthNow) && (this.selectedDate.year == this.yearNow)) //today
 {
 sStyle = this.initData.themePrefix + "-current-day-style";
 }
 else if (dayPointer % 7 == (this.initData.startAt * -1) + 1) //end-of-the-week day
 {
 sStyle = this.initData.themePrefix + "-end-of-weekday-style";
 }

 //selected day
 if ((datePointer == this.saveSelectedDate.date) &&
 (this.selectedDate.month == this.saveSelectedDate.month) &&
 (this.selectedDate.year == this.saveSelectedDate.year))
 {
 sStyle += " " + this.initData.themePrefix + "-selected-day-style";
 }

 for (k = 0; k < this.holidaysCounter; k++)
 {
 if ((parseInt(this._formatInt(this.holidays[k].d), 10) == datePointer) && (parseInt(this._formatInt(this.holidays[k].m), 10) == (this.selectedDate.month + 1)))
 {
 if ((parseInt(this._formatInt(this.holidays[k].y), 10) == 0) || ((parseInt(this._formatInt(this.holidays[k].y), 10) == this.selectedDate.year) && (parseInt(this._formatInt(this.holidays[k].y), 10) != 0)))
 {
 sStyle += " " + this.initData.themePrefix + "-holiday-style";
 }
 }
 }

 return sStyle;
}

org_apache_myfaces_PopupCalendar.prototype._getHolidayHint = function(datePointer)
{
 var sHint = "";
 for (k = 0; k < this.holidaysCounter; k++)
 {
 if ((parseInt(this._formatInt(this.holidays[k].d), 10) == datePointer) && (parseInt(this._formatInt(this.holidays[k].m), 10) == (this.selectedDate.month + 1)))
 {
 if ((parseInt(this._formatInt(this.holidays[k].y), 10) == 0) || ((parseInt(this._formatInt(this.holidays[k].y), 10) == this.selectedDate.year) && (parseInt(this._formatInt(this.holidays[k].y), 10) != 0)))
 {
 sHint += sHint == ""?this.holidays[k].desc:"\n" + this.holidays[k].desc;
 }
 }
 }

 return sHint;
}


org_apache_myfaces_PopupCalendar.prototype._constructCalendar = function()
{
 var aNumDays = Array(31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

 var dateMessage;
 var startDate = new Date (this.selectedDate.year, this.selectedDate.month, 1);
 var endDate;

 if (this.selectedDate.month == 1)
 {
 endDate = new Date (this.selectedDate.year, this.selectedDate.month + 1, 1);
 endDate = new Date (endDate - (24 * 60 * 60 * 1000));
 numDaysInMonth = endDate.getDate();
 }
 else
 {
 numDaysInMonth = aNumDays[this.selectedDate.month];
 }

 datePointer = 0;
 dayPointer = startDate.getDay() - this.initData.startAt;

 if (dayPointer < 0)
 dayPointer = 6;

 this._removeAllChildren(this.contentSpan);

 var contentTable = document.createElement("table");
 contentTable.width = "100%";
 contentTable.setAttribute("style", "border:0px;")
 contentTable.className = this.initData.themePrefix + "-body-style";

 this.contentSpan.appendChild(contentTable);

 var contentBody = document.createElement("tbody");
 contentTable.appendChild(contentBody);

 var contentRow = document.createElement("tr");
 contentBody.appendChild(contentRow);

 if (this.initData.showWeekNumber == 1)
 {
 var showWeekNumberCell = document.createElement("td");
 showWeekNumberCell.setAttribute("style", "width:" + this.initData.columnsWidth + "px;font-weight:bold;");

 contentRow.appendChild(showWeekNumberCell);

 showWeekNumberCell.appendChild(document.createTextNode(this.initData.weekString));

 var dividerCell = document.createElement("td");
 dividerCell.setAttribute("style", "width:1px;")
 dividerCell.setAttribute("rowSpan", "7");
 dividerCell.className = this.initData.themePrefix + "-weeknumber-div-style";

 contentRow.appendChild(dividerCell);

 var dividerImg = document.createElement("img");
 dividerImg.setAttribute("src", this.initData.imgDir + "spwCalendarDivider.gif");
 dividerImg.setAttribute("style", "width:1px;");
 dividerCell.appendChild(dividerImg);
 }

 for (i = 0; i < 7; i++)
 {
 var dayNameCell = document.createElement("td");
 dayNameCell.setAttribute("style", "width:" + this.initData.columnsWidth + "px;text-align:right;font-weight:bold;")
 contentRow.appendChild(dayNameCell);

 dayNameCell.appendChild(document.createTextNode(this.initData.dayName[i]));
 }

 var currentRow = document.createElement("tr");
 contentBody.appendChild(currentRow);

 if (this.initData.showWeekNumber == 1)
 {
 this._appendCell(currentRow, this._weekNbr(startDate) + " ");
 }

 for (var i = 1; i <= dayPointer; i++)
 {
 this._appendCell(currentRow);
 }

 for (datePointer = 1; datePointer <= numDaysInMonth; datePointer++)
 {
 dayPointer++;
 var dateCell = document.createElement("td");
 dateCell.setAttribute("style", "text-align:right;");

 currentRow.appendChild(dateCell);

 var sStyle = this._getDateStyle(datePointer);
 var sHint = this._getHolidayHint(datePointer);

 var sSelectStyle = sStyle + " " + this.initData.themePrefix + "-would-be-selected-day-style";
 var sNormalStyle = sStyle;

 var dateLink = document.createElement("a");
 dateLink.className = sStyle;
 dateLink.setAttribute("href", "#");
 dateLink.setAttribute("title", sHint);

 dateLink.sNormalStyle = sNormalStyle;
 dateLink.sSelectStyle = sSelectStyle;
 dateLink.datePointer = datePointer;

 dateCell.appendChild(dateLink);

 Event.observe(dateLink, "mousemove", function(event)
 {
 window.status = this.initData.selectDateMessage.replace("[date]", this._constructDate(datePointer, this.selectedDate.month, this.selectedDate.year));
 }.bindAsEventListener(this), false);
 Event.observe(dateLink, "mouseout", function(event)
 {
 var elem = Event.element(event);
 elem.className = elem.sNormalStyle;
 window.status = "";
 }.bindAsEventListener(this), false);
 Event.observe(dateLink, "click", function(event)
 {
 var elem = Event.element(event);
 this.selectedDate.date = elem.datePointer;
 this._closeCalendar();
 Event.stop(event);
 }.bindAsEventListener(this), false);
 Event.observe(dateLink, "mouseover", function(event)
 {
 var elem = Event.element(event);
 elem.className = elem.sSelectStyle;
 }.bindAsEventListener(this), false);

 if(datePointer < 10){
  this._appendNbsp(dateLink);
  this._appendNbsp(dateLink);
 }
 this._appendNbsp(dateLink);
 dateLink.appendChild(document.createTextNode(datePointer));
 this._appendNbsp(dateLink);

 if ((dayPointer + this.initData.startAt) % 7 == this.initData.startAt)
 {
 currentRow = document.createElement("tr");
 contentBody.appendChild(currentRow);

 if ((this.initData.showWeekNumber == 1) && (datePointer < numDaysInMonth))
 {
 this._appendCell(currentRow, this._weekNbr(new Date(this.selectedDate.year, this.selectedDate.month, datePointer + 1)) + " ");
 }

 }
 }

 this._removeAllChildren(this.monthSpan);

 this._appendNbsp(this.monthSpan);
 this.monthSpan.appendChild(document.createTextNode(this.initData.monthName[this.selectedDate.month]));
 this._appendNbsp(this.monthSpan);

 this.changeMonthImg = document.createElement("img");
 this.changeMonthImg.setAttribute("src", this.initData.imgDir + "spwCalendarDrop1.gif");
 this.changeMonthImg.setAttribute("width","12px");
 this.changeMonthImg.setAttribute("height","10px");
 this.changeMonthImg.setAttribute("style", "border:0px;");

 this.monthSpan.appendChild(this.changeMonthImg);

 this._removeAllChildren(this.yearSpan);

 this._appendNbsp(this.yearSpan);
 this.yearSpan.appendChild(document.createTextNode(this.selectedDate.year));
 this._appendNbsp(this.yearSpan);

 this.changeYearImg = document.createElement("img");
 this.changeYearImg.setAttribute("src", this.initData.imgDir + "spwCalendarDrop1.gif");
 this.changeYearImg.setAttribute("width","12px");
 this.changeYearImg.setAttribute("height","10px");
 this.changeYearImg.setAttribute("style", "border:0px;");

 this.yearSpan.appendChild(this.changeYearImg);

 this._removeAllChildren(this.closeCalendarSpan);

 var closeButtonImg = document.createElement("img");
 closeButtonImg.setAttribute("src", this.initData.imgDir + "spwCalendarClose.gif");
 closeButtonImg.setAttribute("width","15px");
 closeButtonImg.setAttribute("height","13px");
 closeButtonImg.setAttribute("style", "border:0px;");
 closeButtonImg.setAttribute("alt", "Close the calendar");
 closeButtonImg.border = "0";

 this.closeCalendarSpan.appendChild(closeButtonImg);

 this._recalculateElement(this.calendarDiv);
}

org_apache_myfaces_PopupCalendar.prototype._configScheduleValue = function(ctlScheduleValue){
	$("tpSchedule_1").checked = true;
	$("nuNumSchedule_2").value = "1";
	$("nuNumSchedule_4").value = "15";
	$("nuNumSchedule_5").value = "2";
	$("nuNumSchedule_6").value = "1";
	$("nuNumScheduleDir_4").value = "antes";
	$("nuNumScheduleDir_5").value = "antes";
	$("nuNumScheduleDir_6").value = "antes";
	if(ctlScheduleValue == null || ctlScheduleValue == ""){
		return;
	}
	var vals = new String(ctlScheduleValue).split(";");
	if(vals.length >= 1){
		$("tpSchedule_" + vals[0]).checked = true;
	}
	if(vals.length >= 2){
		if(vals[0] == "2"){
			$("nuNumSchedule_2").value = vals[1];
		}else if(vals[0] >= "4" && vals[0] <= "6"){
			$("nuNumSchedule_" + vals[0]).value = vals[1];
		}
	}
	if(vals.length >= 3){
		if(vals[0] >= "4" && vals[0] <= "6"){
			if(vals[2] == "a"){
				$("nuNumScheduleDir_" + vals[0]).value = "antes";
			}else{
				$("nuNumScheduleDir_" + vals[0]).value = "depois";
			}
		}
	}
}

org_apache_myfaces_PopupCalendar.prototype._popUpSchedule = function(ctl, ctl2, format, imgDir, ctlSchedule){
	if(IMG_isEnabled(ctl)){
		if(!this.inited){
			this.initData.imgDir = imgDir;		
			this.init(this.getSpanInstance());
		}
		
		if(ctlSchedule.value == "") {
			this._enableFolder("tab_calendario_id");
			this._disableFolder("tab_agendamento_id");
			$("tab_calendario_id").className = this.initData.themePrefix + "-pastaAtiva";
			$("tab_agendamento_id").className = this.initData.themePrefix + "-pastaDes";
			currentTab = "tab_calendario_id"
		}else {
			this._disableFolder("tab_calendario_id");
			this._enableFolder("tab_agendamento_id");
			$("tab_calendario_id").className = this.initData.themePrefix + "-pastaDes";
			$("tab_agendamento_id").className = this.initData.themePrefix + "-pastaAtiva";
			currentTab = "tab_agendamento_id"
		}
		folderTabsRow.style.display = "";
		this._hideCalendar();
		this.inputSchedule = ctlSchedule;
		if(ctlSchedule != null){
			this._configScheduleValue(ctlSchedule.value);
		}
		this._popUpInternalCalendar(ctl, ctl2, format);
		closeFolderCell.appendChild(closeCalendarLink);
	}
}

org_apache_myfaces_PopupCalendar.prototype._popUpCalendar = function(ctl, ctl2, format, imgDir){
	if(IMG_isEnabled(ctl)){
		if(!this.inited){
			this.initData.imgDir = imgDir;		
			this.init(this.getSpanInstance());
		}
		this._enableFolder("tab_calendario_id");
		this._disableFolder("tab_agendamento_id");
		closeButtonCell.appendChild(closeCalendarLink);
		folderTabsRow.style.display = "none";
		this._hideCalendar();
		this.inputSchedule = null;
		this._popUpInternalCalendar(ctl, ctl2, format);
	}
}

org_apache_myfaces_PopupCalendar.prototype._popUpInternalCalendar = function(ctl, ctl2, format)
{
 if (this.bPageLoaded)
 {
 if (this.calendarDiv.style.visibility == "hidden")
 {
 this.ctlToPlaceValue = ctl2;
 this.dateFormat = format;

 var simpleDateFormat = new org_apache_myfaces_SimpleDateFormat(this.dateFormat, this.dateFormatSymbols);
 var dateSelected = simpleDateFormat.parse(ctl2.value);

 if (dateSelected)
 {
 this.selectedDate.sec = dateSelected.getSeconds();
 this.selectedDate.min = dateSelected.getMinutes();
 this.selectedDate.hour = dateSelected.getHours();
 this.selectedDate.date = dateSelected.getDate();
 this.selectedDate.month = dateSelected.getMonth();

 var yearStr = dateSelected.getYear() + "";

 if (yearStr.length < 4)
 {
 yearStr = (parseInt(yearStr, 10) + 1900) + "";
 }

 this.selectedDate.year = parseInt(yearStr, 10);
 }
 else
 {
 this.selectedDate.date = this.dateNow;
 this.selectedDate.month = this.monthNow;
 this.selectedDate.year = this.yearNow;
 }

 this._popUpCalendar_Show(ctl2);
 }
 else
 {
 this._hideCalendar();
 if (this.ctlNow != ctl)
 this._popUpCalendar(ctl, ctl2, format);
 }
 this.ctlNow = ctl;
 }
}

org_apache_myfaces_PopupCalendar.prototype._popUpCalendarForInputDate = function(clientId, format)
{
 if (this.bPageLoaded)
 {
 this.myFacesCtlType = "x:inputDate";
 this.myFacesInputDateClientId = clientId;
 this.dateFormat = format;

 this.selectedDate.date = document.getElementById(clientId + ".day").value != "" ? parseInt(this._formatInt(document.getElementById(clientId + ".day").value), 10) : this.dateNow;
 this.selectedDate.month = document.getElementById(clientId + ".month").value != "-1" ? parseInt(this._formatInt(document.getElementById(clientId + ".month").value), 10) - 1 : this.monthNow;
 this.selectedDate.year = document.getElementById(clientId + ".year").value != "" ? parseInt(this._formatInt(document.getElementById(clientId + ".year").value), 10) : this.yearNow;
 this.ctlNow = document.getElementById(clientId + ".day");
 this._popUpCalendar_Show(document.getElementById(clientId + ".day"));
 }
}

org_apache_myfaces_PopupCalendar.prototype._popUpCalendar_Show = function(ctl)
{
 this.saveSelectedDate.date = this.selectedDate.date;
 this.saveSelectedDate.month = this.selectedDate.month;
 this.saveSelectedDate.year = this.selectedDate.year;

 var leftpos = 0;
 var toppos = 0;

 var aTag = ctl;
 var aTagPositioningisAbsolute = false;
 // Added try-catch to the next loop (MYFACES-870)
 try
 {
 do {
 aTag = aTag.offsetParent;
 leftpos += aTag.offsetLeft;
 toppos += aTag.offsetTop;
 aTagPositioningisAbsolute = (aTag.style.position == "absolute")
 }
 while ((aTag.tagName != "BODY") && (aTag.tagName != "DIV") && (!aTagPositioningisAbsolute));
 }
 catch (ex)
 {
 // ignore
 }

 var leftScrollOffset = 0;
 var topScrollOffset = 0;

 aTag = ctl;
 // Added try-catch (MYFACES-870)
 try
 {
 do {
 leftScrollOffset += aTag.scrollLeft;
 topScrollOffset += aTag.scrollTop;
 aTag = aTag.parentNode;
 }
 while ((aTag.tagName != "BODY") && (aTag.tagName != "DIV") && (aTag.style.position != "absolute"));
 }
 catch (ex)
 {
 // ignore
 }
 
 //var shrinkPopup = (27 - this.initData.columnsWidth) * 7; 
 //var popupWidth = ((this.initData.showWeekNumber == 1) ? 250 : 220) - shrinkPopup;
 //leftpos = leftpos - popupWidth + ctl.clientWidth;
 //leftpos = leftpos - ctl.clientWidth;

 var bodyRect = this._getVisibleBodyRectangle();
 var cal = this.calendarDiv;

 var top = 0;
 var left = 0
 if (aTagPositioningisAbsolute) {
 top = ctl.offsetTop - topScrollOffset + ctl.offsetHeight + 2;
 left = ctl.offsetLeft - leftScrollOffset;
 }
 else {
 top = ctl.offsetTop + toppos - topScrollOffset + ctl.offsetHeight + 2;
 left = ctl.offsetLeft + leftpos - leftScrollOffset;
 }

 if(this.initData.popupLeft)
 {
 left-=cal.offsetWidth;
 }

 if (left + cal.offsetWidth > bodyRect.right)
 {
 left = bodyRect.right - cal.offsetWidth;
 }
 if (top + cal.offsetHeight > bodyRect.bottom)
 {
 top = bodyRect.bottom - cal.offsetHeight;
 }
 if (left < bodyRect.left)
 {
 left = bodyRect.left;
 }
 if (top < bodyRect.top)
 {
 top = bodyRect.top;
 }

 this.calendarDiv.style.left = this.initData.fixedX == -1 ? left + "px": this.initData.fixedX;
 this.calendarDiv.style.top = this.initData.fixedY == -1 ? top + "px": this.initData.fixedY;
 this._constructCalendar(1, this.selectedDate.month, this.selectedDate.year);

 this.calendarDiv.style.visibility = (this.dom || this.ie)? "visible" : "show";
 this.bCalendarHidden = false;

 setTimeout((function()
 {
 this._hideElement(this.calendarDiv);
 }).bind(this), 200);

 this._hideElement(this.calendarDiv);

 this.bClickOnCalendar = true;
}

org_apache_myfaces_PopupCalendar.prototype._getVisibleBodyRectangle = function()
{
 var visibleRect = new org_apache_myfaces_Rectangle();

 if (window.pageYOffset != undefined)
 {
 //Most non IE
 visibleRect.top = window.pageYOffset;
 visibleRect.left = window.pageXOffset;
 }
 else if (document.body && document.body.scrollTop)
 {
 //IE 6 strict mode
 visibleRect.top = document.body.scrollTop;
 visibleRect.left = document.body.scrollLeft;
 }
 else if (document.documentElement && document.documentElement.scrollTop)
 {
 //Older IE
 visibleRect.top = document.documentElement.scrollTop;
 visibleRect.left = document.documentElement.scrollLeft;
 }

 if (window.innerWidth != undefined)
 {
 //Most non-IE
 visibleRect.right = visibleRect.left + window.innerWidth;
 visibleRect.bottom = visibleRect.top + window.innerHeight;
 }
 else if (document.documentElement && document.documentElement.clientHeight)
 {
 //IE 6 strict mode
 visibleRect.right = visibleRect.left + document.documentElement.clientWidth;
 visibleRect.bottom = visibleRect.top + document.documentElement.clientHeight;
 }
 else if (document.body && document.body.clientHeight)
 {
 //IE 4 compatible
 visibleRect.right = visibleRect.left + document.body.clientWidth;
 visibleRect.bottom = visibleRect.top + document.body.clientHeight;
 }
 return visibleRect;
}

function org_apache_myfaces_Rectangle()
{
 this.top = 0;
 this.left = 0;
 this.bottom = 0;
 this.right = 0;
}

org_apache_myfaces_PopupCalendar.prototype._formatInt = function(str)
{

 if (typeof str == 'string')
 {

 //truncate 0 for number less than 10
 if (str.charAt && str.charAt(0) == "0")
 { // <----- Change, added str.charAt for method availability detection (MYFACES)
 return str.charAt(1);
 }

 }
 return str;
}

org_apache_myfaces_PopupCalendar.prototype.initLocalePtBR = function(){
	this.initData.monthName = new Array( resourceMap.getResource('label.js.cal.janeiro'),resourceMap.getResource('label.js.cal.fevereiro'),
		resourceMap.getResource('label.js.cal.marco'),resourceMap.getResource('label.js.cal.abril'),resourceMap.getResource('label.js.cal.maio'),
		resourceMap.getResource('label.js.cal.junho'),resourceMap.getResource('label.js.cal.julho'),resourceMap.getResource('label.js.cal.agosto'),
		resourceMap.getResource('label.js.cal.setembro'),resourceMap.getResource('label.js.cal.outubro'),resourceMap.getResource('label.js.cal.novembro'),
		resourceMap.getResource('label.js.cal.dezembro'));
		
	this.initData.startAt = 0;
	this.initData.dayName = this.initData.startAt == 0 ? 
		new Array(resourceMap.getResource('label.js.cal.dom'),resourceMap.getResource('label.js.cal.seg'),resourceMap.getResource('label.js.cal.ter'),
		resourceMap.getResource('label.js.cal.qua'),resourceMap.getResource('label.js.cal.qui'),resourceMap.getResource('label.js.cal.sex'),
		resourceMap.getResource('label.js.cal.sab'))	: new Array(resourceMap.getResource('label.js.cal.seg'),resourceMap.getResource('label.js.cal.ter'),
		resourceMap.getResource('label.js.cal.qua'),resourceMap.getResource('label.js.cal.qui'),resourceMap.getResource('label.js.cal.sex'),
		resourceMap.getResource('label.js.cal.sab'),resourceMap.getResource('label.js.cal.dom'));
		
	this.dateFormatSymbols.weekdays = new Array(resourceMap.getResource('label.js.cal.domingo'),resourceMap.getResource('label.js.cal.segunda'),
		resourceMap.getResource('label.js.cal.terca'),resourceMap.getResource('label.js.cal.quarta'),resourceMap.getResource('label.js.cal.quinta'),
		resourceMap.getResource('label.js.cal.sexta'),resourceMap.getResource('label.js.cal.sabado'));
	
	this.dateFormatSymbols.shortWeekdays = new Array(resourceMap.getResource('label.js.cal.dom'),resourceMap.getResource('label.js.cal.seg'),
		resourceMap.getResource('label.js.cal.ter'),resourceMap.getResource('label.js.cal.qua'),resourceMap.getResource('label.js.cal.qui'),
		resourceMap.getResource('label.js.cal.sex'),resourceMap.getResource('label.js.cal.sab'));
	
	this.dateFormatSymbols.shortMonths = new Array(resourceMap.getResource('label.js.cal.jan'),resourceMap.getResource('label.js.cal.fev'),
		resourceMap.getResource('label.js.cal.mar'),resourceMap.getResource('label.js.cal.abr'),resourceMap.getResource('label.js.cal.mai'),
		resourceMap.getResource('label.js.cal.jun'),resourceMap.getResource('label.js.cal.jul'),resourceMap.getResource('label.js.cal.ago'),
		resourceMap.getResource('label.js.cal.set'),resourceMap.getResource('label.js.cal.out'),resourceMap.getResource('label.js.cal.nov'),
		resourceMap.getResource('label.js.cal.dez'));
	
	this.dateFormatSymbols.months = new Array(resourceMap.getResource('label.js.cal.janeiro'),resourceMap.getResource('label.js.cal.fevereiro'),
		resourceMap.getResource('label.js.cal.marco'),resourceMap.getResource('label.js.cal.abril'),resourceMap.getResource('label.js.cal.maio'),
		resourceMap.getResource('label.js.cal.junho'),resourceMap.getResource('label.js.cal.julho'),resourceMap.getResource('label.js.cal.agosto'),
		resourceMap.getResource('label.js.cal.setembro'),resourceMap.getResource('label.js.cal.outubro'),resourceMap.getResource('label.js.cal.novembro'),
		resourceMap.getResource('label.js.cal.dezembro'));
		
	this.dateFormatSymbols.eras = new Array("AC","DC");
	this.dateFormatSymbols.ampms = new Array("AM","PM");
	this.initData.todayString = resourceMap.getResource('label.js.cal.hoje');
	this.initData.todayDateFormat = resourceMap.getResource('label.js.cal.formatoDt');
	this.initData.weekString = resourceMap.getResource('label.js.cal.semana');
	this.initData.showWeekNumber = 0;
	this.initData.popupLeft = false;
	this.initData.gotoString = resourceMap.getResource('label.js.cal.selDtHoje');
	return this;
}

org_apache_myfaces_PopupCalendar.prototype.getSpanInstance = function(){
	var spanId = "spSpanPopCalendar__";
	var span = document.getElementById(spanId);
	if(span == null){
		
		/*var body = document.getElementsByTagName("body")[0];
		 * Alteraï¿½ï¿½o feita pq ao abrir o calendï¿½rio e mexer no scroll, o calendï¿½rio ficava estï¿½tico,
		 * isto pq o mesme estava sendo criado no body, e o scroll da pagina estava sendo criado no holderConteudo1.
		 * No momento que cria-se no holderConteudo1, o calendï¿½rio fica junto ao input
		 * */
		var body = document.getElementById("holderConteudo1");
		 
		span = body.appendChild(document.createElement("span"));
		span.id = spanId;
	}
	return span;
}

spPopCal = (new org_apache_myfaces_PopupCalendar()).initLocalePtBR();
var Relatorio = {

    /**
     *Constantes
     */
    ANTES  : 'a',
    DEPOIS : 'd',

    /**
     * Mï¿½todo chamado antes de submeter os dados do formulï¿½rio para visualizar o relatï¿½rio.
     * Basicamente verifica os campos que sï¿½o Date e do tipo agendamento.
     */
    visualizarRelatorio : function() {
        var form = document.forms[0];
        var length = form.length;
        for (var i = 0; i < length; i++) {
            if (form[i].getAttribute("type") == "button" || form[i].getAttribute("type") != "submit" ) {
                if (form[i].getAttribute("formatType") == "DATE") {
                    var tpAgendamento = jQuery(form[i].name + "_tpAgendamento").val();
                    if (tpAgendamento != "" && tpAgendamento) {
                        var data = new Date();
                        var itens = tpAgendamento.split(";");
                        switch (itens[0]) {
                          case "2":
                            data.setDate(itens[1]);
                            break;
                          case "3":
                            data.setDate(data.getMonthMaxDay());
                            break;
                          case "4":
                            if (itens[2] == this.ANTES) {
                                data.roll(Date.TYPE_DAY, -parseInt(itens[1]));
                            } else {
                                if (itens[2] == this.DEPOIS) {
                                    data.roll(Date.TYPE_DAY, parseInt(itens[1]));
                                }
                            }
                            break;
                          case "5":
                            if (itens[2] == this.ANTES) {
                                data.roll(Date.TYPE_DAY, -eval(parseInt(itens[1]) * 7));
                            } else {
                                if (itens[2] == this.DEPOIS) {
                                    data.roll(Date.TYPE_DAY, eval(parseInt(itens[1]) * 7));
                                }
                            }
                            break;
                          case "6":
                            if (itens[2] == this.ANTES) {
                                data.roll(Date.TYPE_MONTH, -parseInt(itens[1]));
                            } else {
                                if (itens[2] == this.DEPOIS) {
                                    data.roll(Date.TYPE_MONTH, parseInt(itens[1]));
                                }
                            }
                            break;
                        }
                        form[i].value = data;
                    } else {
                        jQuery(form[i].name + "_tpAgendamento").disabled = true;
                    }
                }
            }
        }
    },
    
    agendarRelatorio : function(ctx) {
    	if(ctx != '' && ctx.indexOf('/') == -1){
    		ctx = '/'+ctx;
    	}    	
        document.forms[0].action = ctx + '/prepareInsertAgendamento.do';
    },
    
    ctrTpAgendamento : function(field) {
        
        var nameField = field.name;
        var form = document.forms[0];

        if (nameField == 'agendamento.partirDe') {
            form.tpAgendamento[1].checked = true;
            form.diaSemana[0].selected = true;
            form.diaMes[0].selected = true;
            form.dtEspecifica.value = '';
        }
        else if (nameField == 'agendamento.diaSemana') {
            form.tpAgendamento[2].checked = true;
            form.partirDe.value = '';
            form.diaMes[0].selected = true;
            form.dtEspecifica.value = '';
        }
        else if (nameField == 'agendamento.diaMes') {
            form.tpAgendamento[3].checked = true;
            form.partirDe.value = '';
            form.diaSemana[0].selected = true;
            form.dtEspecifica.value = '';
        }
        else if (nameField == 'agendamento.dtEspecifica') {
            form.tpAgendamento[4].checked = true;
            form.partirDe.value = '';
            form.diaSemana[0].selected = true;
            form.diaMes[0].selected = true;
        }       
    },
    
    ctrTpAgendamentoReset : function() {
        var form = document.forms[0];
    
        form.partirDe.value = '';
        form.diaSemana[0].selected = true;
        form.diaMes[0].selected = true;
        form.dtEspecifica.value = '';
    },
    
    validaCampos : function( form ) {
        if ( BENV_isCamposValidos( form ) ) {
            var i;
            var tpAgendamentoTamanho =  form.tpAgendamento.length;
            
            for ( i=0; i < tpAgendamentoTamanho; i++ ) {
                if ( form.tpAgendamento[i].checked ) {
                    break;
                }
            }
            
            if ( i == tpAgendamentoTamanho ) {
                alert( resourceMap.getResource('label.js.ag.agendarRelObrigatorio') );
                return false;
            }
        
            if ( form.tpAgendamento[1].checked ) {
                if ( form.partirDe.value == '' ) {
                    alert( resourceMap.getResource('label.js.ag.apartirDe') );
                    form.partirDe.focus();
                    return false;
                }
            }
            
            if ( form.tpAgendamento[2].checked ) {
                if ( form.diaSemana.value == 0 ) {
                    alert( resourceMap.getResource('label.js.ag.noDia') );
                    form.diaSemana.focus();
                    return false;
                }
            }
            
            if ( form.tpAgendamento[3].checked ) {
                if ( form.diaMes.value == 0 ) {
                    alert( resourceMap.getResource('label.js.ag.noDia') );
                    form.diaMes.focus();
                    return false;
                }
            }
            
            if ( form.tpAgendamento[4].checked ) {
                if ( form.dtEspecifica.value == '' ) {
                    alert( resourceMap.getResource('label.js.ag.naData') );
                    form.dtEspecifica.focus();
                    return false;
                }
            }
            
            if ( !form.tpEnvio[0].checked && !form.tpEnvio[1].checked && !form.tpEnvio[2].checked ) {
                alert( resourceMap.getResource('label.js.ag.envRelObrigatorio') );
                return false;
            }
            FF_desabilitaBotoes(form);
        }
        else {
            return false;
        }
    },

    validaCamposConsulta : function( form ) {
        form.tpConsulta[0].checked = true;
        if ( BENV_isCamposValidos( form ) ) {
            if (!form.tpConsulta[0].checked && !form.tpConsulta[1].checked && !form.tpConsulta[2].checked) {
                alert( resourceMap.getResource('label.js.ag.tpAgendObrigatorio') );
                return false;
            }
            FF_desabilitaBotoes(form);
        }
        else {
            return false;
        }
    }
    
}
/**
 * Funï¿½ï¿½o para recuperar mensagens genï¿½ricas.
 * */
/*
function msgKey(key,param){
	var key = resourceMap.getResource(key);
	return key.replace('{0}', param);		
}
*/
function msgKey(key) {
    var resultado = resourceMap.getResource(key);
    for (var i = 1; i < arguments.length; i++) {
        var valor = arguments[i];
        if (valor != null) {
            var parametro = "{" + (i-1) + "}";
            resultado = resultado.replace(parametro, valor);
        }
    }
    return resultado;
}

/**
 * Mï¿½todo utilizado para ser sobreescrito pelos projetos que 
 * queiram alterar a mensagem de "retorno vazio" do inputSelect.
 * */
function IS_NoResultMessage(sender){	
	return resourceMap.getResource('label.js.nenhumRegistroEncontrado');
}
/**var xmlDoc = new ActiveXObject("MSXML2.DOMDocument");
xmlDoc.async = false;
xmlDoc.load( "consulta.xml");
xmlDoc.setProperty( "SelectionLanguage", "XPath" );

var rootXML;
rootXML = xmlDoc.documentElement;**/

//retorna os elementos do filtro de pesquisa
function getElementos( form ) {
    var elementos = new Array();
    var length = form.length;
    for(var i = 0; i < length; i++ ) {
        if( form[i].type == "text" ) {
            elementos[i] = form[i];
        }
    }
    return elementos;
}

//seleciona os elementos do XML baseado nos filtros de pesquisa
function executePesquisaXML( form ){
    if( filtroPesquisaValido( form ) ) {
        limparGrid();        
        var elementos = getElementos( form );
        var argumentos = new Array();
        var xmlNode = document.getElementById("mainTable").xmlNode;
        var indiceArgs = 0;
        var elementosTamanho = elementos.length;
        
        for(var i = 0; i < elementosTamanho; i++ ) {
            var xmlRef = elementos[ i ].xmlRef;
            var argString = "";
            if( isNaN( elementos[ i ].value ) ) {
                if( elementos[i].value != "" ) {
                    var splitQuery = elementos[ i ].value.split(" ");            
                  	var spliQueryTamanho = splitQuery.length;
                    for(var j = 0; j < spliQueryTamanho; j++){
                        argString += " [contains(translate("+ xmlRef +",'abcdefghijklmnopqrstuvxzwyzï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½','ABCDEFGHIJKLMNOPQRSTUVXZWYZï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½'), '" + splitQuery[j].toUpperCase() + "')] ";
                    }
                    argumentos[ indiceArgs ] = argString;
                    indiceArgs++;
                }
            } else {
                if( elementos[ i ].value != "" ) {
                    var argInteger = " [contains(" + xmlRef + ", '" + elementos[ i ].value + "')] ";    
                    argumentos[ indiceArgs ] = argInteger;
                    indiceArgs++;
                }
            }
        }
        var parametros = "";
        var argumentosTamanho = argumentos.length;
        for(var i = 0; i < argumentosTamanho; i++ ) {
            parametros += argumentos[ i ];
        }
        var selecao = rootXML.selectNodes("//" + xmlNode + " " + parametros  );
	
        var quant = selecao.length;
        verifiqueQtdReg( quant );
        percorraXML( selecao );
    }    
}

//percorre o XML com base em uma seleï¿½ï¿½o realizada
function percorraXML( selecao ) {
    var tabela = document.getElementById( "tabelaResultado" ).childNodes(0);
    var nLinhas = document.getElementById( "qtLinhas" ).childNodes(0).nodeValue;
    document.getElementById( "qtLinhas" ).childNodes(0).nodeValue = (new Number(quant) + new Number(nLinhas));
	
	var quant = selecao.length;
	
    for(var i = 0; i < quant; i++) {
        var linha = document.getElementById( "linhaResultado" );        
        var linhaNova = linha.cloneNode(1);       
        linhaNova.id = "linha_" + i; //define o nï¿½mero da linha para ser identificada pelo checkbox
        var nColunas = linha.childNodes.length;
        tabela.appendChild( linhaNova );
        var k = 0;
        for(var j = 0; j < nColunas; j++ ) {
            var elemento = linhaNova.childNodes( j ).childNodes(0);
            if( elemento.tagName != "INPUT" ) {
                elemento.nodeValue = selecao.item( i ).childNodes(k).text;
                k++;
            } else { //ï¿½ o checkbox
                elemento.value = i;
            }
        }        
    }
}

//verifica se a quantidade ï¿½ zero ou maior que determinado valor
function verifiqueQtdReg( qtd ) {
    if( qtd > 80 ){
        alert(msgKey("label.js.pesquisaGrande",""));
        return;
    } else if( qtd == 0 ) {
        alert(msgKey("label.js.resultadoVazio",""));
        return;
    }
}
	//funï¿½ï¿½o que redireciona a ordenaï¿½ï¿½o dependendo do tipo de grid 
	function sortGrid(doc, obj, id){
		if(!isSearchFilterValid()){			
			return;
		}
		var grid = getGrid(obj);
		var tpGrid = getTipoGrid(grid);
		if(tpGrid == 'List'){
			sortGridList(doc,obj,id);
		} else if(tpGrid == 'Grid'){
			sortGridGrid(doc,obj,id);
		} else if(tpGrid == 'Search'){
			sortGridSearch(doc,obj,id);
		}	
	}

	function SG_getInputValue(input, item, tc){
		if(tc != ''){
			tc = input.getAttribute('formatType');
			if(tc == null){
				tc = 'TEXT';
			}
		}
		item.d = item.d + input.value;
		item.t = tc;
		return tc
	}
	
	function SG_getSelectValue(select, item, tc){
		if(tc != ''){
			tc = 'TEXT';
		}
		item.d = item.d + select.value;
		item.t = tc;
		return tc;
	}
	
	function SG_getTextValue(text, item, tc){
		if(tc != ''){
			tc = 'TEXT';
		}
		item.d = item.d + text.nodeValue;
		item.t = tc;
		return tc;
	}
	
	function SG_getSpanText(span, item, tc){
		if(tc != ''){
			var tipo = span.getAttribute("tipo");
			if(tipo == 'NUMBER' || tipo == 'DATE'){
				tc = tipo;
			}else{
				tc = 'TEXT';
			}
		}				
		var nodes = span.childNodes;
		var length = nodes.length;
		for(var i = 0; i < length; i++){
			if(nodes[i].nodeName == '#text'){
				item.d = item.d + nodes[i].nodeValue;
			}				
		}				
		item.t = tc;
		return tc;
	}

	function SG_getComponentId(nomeGrid, nLinha, propertyName){
		nomeGrid = nomeGrid.charAt(0).toLowerCase() + nomeGrid.substr(1);
		return nomeGrid + '[' + nLinha + '].' + propertyName + '_' + nLinha;
	}
	
	function SG_coletaDadoDaColuna(componentes, j, item, tipoColuna, sortedBy, nomeGrid, nLinha){
		if(sortedBy != null){
			if(componentes[j].id == sortedBy || componentes[j].name == sortedBy || 
					componentes[j].id == SG_getComponentId(nomeGrid, nLinha, sortedBy)){
				if(componentes[j].tagName == 'INPUT'){
					return SG_getInputValue(componentes[j], item, tipoColuna);
				}else if(componentes[j].tagName == 'SELECT'){
					return SG_getSelectValue(componentes[j], item, tipoColuna);
				}else if(componentes[j].tagName == 'SPAN'){
					return SG_getSpanText(componentes[j], item, tipoColuna);
				}
			}
		}else{
			if(componentes[j].tagName == 'INPUT'){
				if(componentes[j].getAttribute('type') != 'hidden'){
					return SG_getInputValue(componentes[j], item, tipoColuna);
				}
			}else if(componentes[j].tagName == 'SELECT'){ 
				return SG_getSelectValue(componentes[j], item, tipoColuna);
			}else if(jQuery.trim(componentes[j].nodeValue)!= '' && componentes[j].nodeName == '#text' ){
				return SG_getTextValue(componentes[j], item, tipoColuna);
			}else if(componentes[j].tagName == 'SPAN'){
				return SG_getSpanText(componentes[j], item, tipoColuna);
			}
		}
		return tipoColuna;
	}

	// first td is number 0
	function SG_getTdNumber(tr, tdNumber){
		trChilds = tr.childNodes;
		var y = 0;
		var length = trChilds.length;
		for(var m = 0; m < length; m++){
			if(trChilds[m].tagName == 'TD'){
				if(y++ == tdNumber){
					return trChilds[m];
				}
			}				
		}
		return null;
	}

	// first td is number 0
	function SG_getChildNodesOfTDNumber(tr, tdNumber){
		var td = SG_getTdNumber(tr, tdNumber);
		if(td != null){
			return td.childNodes;
		}else{
			return null;
		}
	}
	
	function SG_getSortedBy(tr, tdNumber){
		var td = SG_getTdNumber(tr, tdNumber);
		var sortedBy = td.getAttribute('sortedBy');
		if(sortedBy != null && sortedBy == ''){
			return null;
		}else{
			return sortedBy;
		}
	}

	//funï¿½ï¿½o de ordenaï¿½ï¿½o da grid tipo GRID
	function sortGridGrid(doc, obj, id){		
		var grid = getGrid(obj);
		var nomeGrid = getNomeGrid(grid);
		var nuLinhas = getNuLinhas(doc,nomeGrid);
		var itens = new Array();
		var comps = new Array();
		var z = 0;
		var tipoColuna = null;
		var trIdPrefix = 'linha' + nomeGrid + '_';
		// deve somar + 1 ao id porque a htmlgrid:grid possui sempre um <td> inicial (o status)
		var idNovo = new String(id).replace(nomeGrid, "");
		var idNovoNumber = new Number(idNovo);
		var tdNumber = idNovoNumber + 1;
		var sortedBy = SG_getSortedBy(doc.getElementById(trIdPrefix + '-1'), tdNumber);

		//percorre as linhas capturando os componentes da coluna selecionada
		for(var i = 0; i < nuLinhas; i++){
			var tr = doc.getElementById(trIdPrefix + i);
			// deve somar + 1 ao id porque a htmlgrid:grid possui sempre um <td> inicial (o status)
			var componentes = SG_getChildNodesOfTDNumber(tr, tdNumber);
			var item = new ItemCol('',i,'TEXT');
			//pega os inputs, desprezando os hidden
			var componentesLength = componentes.length;
			for(var j = 0; j < componentesLength; j++){
				tipoColuna = SG_coletaDadoDaColuna(componentes, j, item, tipoColuna, sortedBy, nomeGrid, i);
			}			
			itens[z] = item;
			z++;
		}
		//da refresh nas outras colunas e pega o sentido da ordenaï¿½ï¿½o
		var ordenacao = getOrdenacao(obj,id);
		//pega a funï¿½ï¿½o de ordenaï¿½ï¿½o
		var fnSort = getFuncaoSort(ordenacao);		
		//pega a funï¿½ï¿½o de formataï¿½ï¿½o dos dados
		var fnConvert = getFuncaoFormatacao(tipoColuna);
		
		if(tipoColuna != null){
			//formata e ordena os dados
			itens = formataOrdenaDados(fnConvert, fnSort, itens);
			
			//troca de posiï¿½ï¿½o as linhas da tabela, colocando de forma ordenada
			var itensLength = itens.length;
						
			var containerTemp = document.createElement("tbody");
			
			var nomeLinhaBase = 'linha'+ nomeGrid + '_';
			
			trocaPosicaoLinhas(doc, containerTemp, doc.getElementById(nomeLinhaBase+"-1"));
			
			for(var i = 0; i < itensLength; i++){
				var objTR = doc.getElementById(nomeLinhaBase+itens[i].s);
				trocaPosicaoLinhas(doc, containerTemp, objTR);
			}
			
			putGridColors(jQuery(containerTemp));			
			
			trocaPosicaoLinhas(doc, containerTemp, doc.getElementById("trWidthBase"+nomeGrid));			
						
			var tabela = jQuery("#tabela"+nomeGrid);
			tabela.empty();
			tabela.append(containerTemp);
			
			refreshStatusCols(obj,id);
		}											
	}

	//funï¿½ï¿½o de ordenaï¿½ï¿½o da grid tipo LIST
	function sortGridList(doc, obj, id){
		var grid = getGrid(obj);
		var nomeGrid = getNomeGrid(grid);
		var nuLinhas = getNuLinhas(doc,nomeGrid);
		var itens = new Array();
		var comps = new Array();
		var z = 0;
		var tipoColuna;
		// a htmlgrid:list nï¿½o possui um <td> inicial adicional, 
		// entï¿½o a posiï¿½ï¿½o do td ï¿½ igual ao valor do id
		var idNovo = new String(id).replace(nomeGrid, "");
		var idNovoNumber = new Number(idNovo);
		var tdNumber = idNovoNumber;
		var sortedBy = null;
		for(var i = 0; i < nuLinhas; i++){
			var tr = doc.getElementById('linha'+ nomeGrid+'_'+i);
			if(i == 0){
				sortedBy = SG_getSortedBy(tr, tdNumber);
			}
			var componentes = SG_getChildNodesOfTDNumber(tr, tdNumber);
			var item = new ItemCol('',i,'TEXT');
			//pega os inputs, desprezando os hidden
			var componentesLength = componentes.length;
			for(var j = 0; j < componentesLength; j++){
				tipoColuna = SG_coletaDadoDaColuna(componentes, j, item, tipoColuna, sortedBy, nomeGrid, i);
			}
			itens[z] = item;
			z++;
		}
		//da refresh nas outras colunas e pega o sentido da ordenaï¿½ï¿½o
		var ordenacao = getOrdenacao(obj,id);
		//pega a funï¿½ï¿½o de ordenaï¿½ï¿½o
		var fnSort = getFuncaoSort(ordenacao);		
		//pega a funï¿½ï¿½o de formataï¿½ï¿½o dos dados
		var fnConvert = getFuncaoFormatacao(tipoColuna);

		if(tipoColuna != null){
			//formata e ordena os dados
			itens = formataOrdenaDados(fnConvert, fnSort, itens);
			
			//troca de posiï¿½ï¿½o as linhas da tabela, colocando de forma ordenada
			var itensLength = itens.length;
						
			var containerTemp = document.createElement("tbody");
			
			var nomeLinhaBase = 'linha'+ nomeGrid + '_';
			
			for(var i = 0; i < itensLength; i++){
				var objTR = doc.getElementById(nomeLinhaBase+itens[i].s);
				trocaPosicaoLinhas(doc, containerTemp, objTR);
			}
			
			putGridColors(jQuery(containerTemp));
			
			var tabela = jQuery("#tabela"+nomeGrid);
			tabela.empty();
			tabela.append(containerTemp);
			
			refreshStatusCols(obj,id);
		}				
	}
	
	//funï¿½ï¿½o de ordenaï¿½ï¿½o da grid tipo SEARCH
	function sortGridSearch(doc,obj,id){
		var grid = getGrid(obj);
		var nomeGrid = getNomeGrid(grid);
		var nuLinhas = getNuLinhas(doc,nomeGrid);
		var itens = new Array();
		var comps = new Array();
		var z = 0;
		var tipoColuna;
		var sortedBy = null;
		// deve somar + 1 ao id porque a htmlgrid:search possui sempre um 
		// <td> inicial (o checkbox ou radio de seleï¿½ï¿½o)
		var idNovo = new String(id).replace(nomeGrid, "");
		var idNovoNumber = new Number(idNovo);
		var tdNumber = idNovoNumber + 1;
		for(var i = 0; i < nuLinhas; i++){
			var tr = doc.getElementById('linha_'+i);
			if(i == 0){
				sortedBy = SG_getSortedBy(tr, tdNumber);
			}
			var componentes = SG_getChildNodesOfTDNumber(tr, tdNumber);
			var item = new ItemCol('',i,'TEXT');
			tipoColuna = '';
			var componentesLength = componentes.length;
			for(var j = 0; j < componentesLength; j++){
				if(tipoColuna == ''){
					tipoColuna = componentes[j].parentNode.getAttribute("formatType");
					var checked = tr.getElementsByTagName('INPUT')[0].checked;
					item.t = tipoColuna;
					item.c = checked;
				}
				SG_coletaDadoDaColuna(componentes, j, item, tipoColuna, sortedBy, nomeGrid, i);
			}
			itens[z++] = item;
//			for(var j = 0; j < componentes.length; j++){
//				if(componentes[j].nodeValue != null){
//					if(tipoColuna != ''){
//						tipoColuna = componentes[j].parentNode.getAttribute("formatType");
//					}
//					checked = tr.getElementsByTagName('INPUT')[0].checked;
//					itens[z] = new ItemCol(componentes[j].nodeValue,i,tipoColuna);
//					itens[z].c = checked;
//					z++;
//				}
//			}
		}
		//da refresh nas outras colunas e pega o sentido da ordenaï¿½ï¿½o
		var ordenacao = getOrdenacao(obj,id); 
		//pega a funï¿½ï¿½o de ordenaï¿½ï¿½o
		var fnSort = getFuncaoSort(ordenacao);		
		//pega a funï¿½ï¿½o de formataï¿½ï¿½o dos dados
		var fnConvert = getFuncaoFormatacao(tipoColuna);
		if(tipoColuna != null){
			//formata e ordena os dados
			itens = formataOrdenaDados(fnConvert, fnSort, itens);
			
			//troca de posiï¿½ï¿½o as linhas da tabela, colocando de forma ordenada
			var itensLength = itens.length;
			var table = doc.getElementById("tabela"+nomeGrid);
			//Usado para as grids searchs
			if(table == null || table == '' || table == 'undefined'){
				var nomeLinha = 'linha_0';				 
				table = doc.getElementById(nomeLinha);
				while(table.nodeName != 'TABLE'){
					table = table.parentNode;
				} 
			}
			
			var containerTemp = document.createElement("tbody");
			
			var nomeLinhaBase = 'linha_';
			
			for(var i = 0; i < itensLength; i++){
				var objTR = doc.getElementById(nomeLinhaBase+itens[i].s);
				trocaPosicaoLinhas(doc, containerTemp, objTR);
				objTR.getElementsByTagName('INPUT')[0].checked = itens[i].c;
			}
			
			putGridColors(jQuery(containerTemp));
			
			var tabela = jQuery(table);
			tabela.empty();
			tabela.append(containerTemp);
			
			//eh necessï¿½rio selecionar novamente a linha que estava selecionada
			//antes da ordenaï¿½ï¿½o pois o IE nï¿½o estava guardando este estado...
			idSelected = grid.getAttribute('selected');
			mudarSelecaoRegistroAtual(doc.getElementById(idSelected));
			
			refreshStatusCols(obj,id);
		}				
	}
	
	//Recoloca as cores na grid apï¿½s a ordenaï¿½ï¿½o
	function putGridColors(arrayTR){
		var trs = arrayTR.find("TR");
		var arrayTRLength = trs.size();
		var par = true;
		for(var i = 0; i < arrayTRLength; i++){			
			var currentTR = jQuery(trs.get(i));
			var index = getFieldIndex(trs.get(i).id);
			if(index > -1) {
				var corAtual = currentTR.find('td:first').css('background-color').trim();
				if(corAtual != rgbCorExcluir && corAtual != corExcluir){
	 				var $tds = currentTR.find('td');
	 				var $inputs = currentTR.find(':input[type!=radio][type!=checkbox]');
	 				var $inputsDisabled = $inputs.filter('.spwLinhaGridParDisabled, .spwLinhaGridImparDisabled, .disabled');
					if(par){	
	 					$tds.css('background-color', corLinhaPar); 
	 					$inputs.css('background-color', corLinhaPar);
	 					$inputsDisabled.removeClass('disabled spwLinhaGridParDisabled spwLinhaGridImparDisabled').addClass('spwLinhaGridParDisabled');
												  
					}else{ 
						$tds.css('background-color', corLinhaImpar); 
						$inputs.css('background-color', corLinhaImpar);
						$inputsDisabled.removeClass('disabled spwLinhaGridParDisabled spwLinhaGridImparDisabled').addClass('spwLinhaGridImparDisabled');									 						
					}				
				}
				par = !par;
			}
		}											
	}
	
	//objeto que encapsula o valor do campo, posiï¿½ï¿½o original e tipo de dado
	function ItemCol(dado,seq,tipo){
		this.d = dado;
		this.s = seq;
		this.t = tipo;
	}
	
	//funcao que realiza a troca de posiï¿½ï¿½o entre as linhas da table
	function trocaPosicaoLinhas(doc, containerTemp, objTR){		
		containerTemp.appendChild(objTR);
	}
	
	function getFuncaoFormatacao(tpColuna){
		var fnConvert;
		if(tpColuna == 'DATE'){
			fnConvert = function(a){
				return a.d ? a.d : '00/00/0000';
			};
		}else if(tpColuna == 'NUMBER'){
			fnConvert = function(a){
				return a.d ? parseStrToFloat(a.d) : 0;
			};
		}else{
			fnConvert = function(a){
				return a.d ? a.d.toLowerCase(): '';
			};
		}
		return fnConvert;
	}
	
	function retiraAcentos(campo) {
    	var acentos = "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½abcdefghijklmnopqrstuvxwyz";
   		var traducao ="AAAAAAAAAEEEEIIOOOOOOUUUUCCABCDEFGHIJKLMNOPQRSTUVXWYZ";
   		var posic, carac;
   		var tempLog = "";
   		
   		if(campo.length === undefined){
   			return campo;
   		}
   		
		for (var i=0; i < campo.length; i++) {
   			carac = campo.charAt (i);
   			posic  = acentos.indexOf (carac);
   			if (posic > -1)
	  			tempLog += traducao.charAt (posic);
   			else
      			tempLog += campo.charAt (i);
   		}   			
   		
      	return (tempLog);
	}
	
	function getFuncaoSort(ordem){
		var fnSort;
		if(ordem == 'asc'){
			fnSort = function(a,b) {
				if(a.t == 'DATE'){
					anoA = a.d.substring(6,10);
					anoB = b.d.substring(6,10);
					if(anoA > anoB) return 1;
					if(anoA < anoB) return -1;
					mesA = a.d.substring(3,5);
					mesB = b.d.substring(3,5);
					if(mesA > mesB) return 1;
					if(mesA < mesB) return -1;					
					diaA = a.d.substring(0,2);
					diaB = b.d.substring(0,2);				
					if(diaA > diaB) return 1;
					if(diaA < diaB) return -1;					
					return 0;
				}else{
					if (retiraAcentos(a.d) < retiraAcentos(b.d)) return -1;
					if (retiraAcentos(a.d) > retiraAcentos(b.d)) return 1;					
					return 0;				
				}
			};
		} else {
			fnSort = function(a,b) {
				if(a.t == 'DATE'){
					anoA = a.d.substring(6,10);
					anoB = b.d.substring(6,10);
					if(anoA < anoB) return 1;
					if(anoA > anoB) return -1;
					mesA = a.d.substring(3,5);
					mesB = b.d.substring(3,5);
					if(mesA < mesB) return 1;
					if(mesA > mesB) return -1;					
					diaA = a.d.substring(0,2);
					diaB = b.d.substring(0,2);				
					if(diaA < diaB) return 1;
					if(diaA > diaB) return -1;					
					return 0;
				}else{
					if (retiraAcentos(a.d) < retiraAcentos(b.d)) return 1;
					if (retiraAcentos(a.d) > retiraAcentos(b.d)) return -1;
					return 0;				
				}
			};
		}
		return fnSort;
	}
	
	function formataOrdenaDados(funcaoForm, funcaoOrd, dados){
		var dadosLength = dados.length;
		for(var i = 0; i < dadosLength; i++){
			dados[i].d = funcaoForm(dados[i]);
		}				
		dados.sort(funcaoOrd);	
		return dados;
	}
	
	function getOrdenacao(objClicado, idObjClicado){
		ordenacao = objClicado.getAttribute('ord');		
		if(ordenacao == 'des' || ordenacao == null || ordenacao == ''){						
			return 'asc';
		} else {						
			return 'des';
		}
	}
	
	function refreshStatusCols(objClicado, idObjClicado){
		ordenacao = objClicado.getAttribute('ord');
		parNode = objClicado;
		while(parNode.nodeName != 'TR'){
			parNode = parNode.parentNode;
		}
		tds = parNode.getElementsByTagName('TD');
		var tdsLength = tds.length;
		for(var i = 0; i < tdsLength; i++){
			var estilo = tds[i].className;
			if(tds[i].className.indexOf('spwCabecalhoDesc') != -1){ 
				tds[i].className = estilo.substring(0,estilo.indexOf('spwCabecalhoDesc')) + estilo.substring(estilo.indexOf('spwCabecalhoDesc')+16,estilo.length);
			} else if(tds[i].className.indexOf('spwCabecalhoAsc') != -1 ){
				tds[i].className = estilo.substring(0,estilo.indexOf('spwCabecalhoAsc')) + estilo.substring(estilo.indexOf('spwCabecalhoAsc')+16,estilo.length);
			} 			
			tds[i].setAttribute('ord', null);
		}
		var objClassName = objClicado.className;
		var indexOfGridClick = objClassName.indexOf(' spwCabecalhoGridClick');
		if(indexOfGridClick != -1){
			objClassName = objClassName.substring(0,indexOfGridClick);
			objClicado.className = objClassName;
		}
		
		var indexOfGridLeftRoundClick = objClassName.indexOf(' spwCabecalhoGridLeftRoundClick');
		if(indexOfGridLeftRoundClick != -1){
			objClassName = objClassName.substring(0,indexOfGridLeftRoundClick);
			objClicado.className = objClassName;
		}		
		
		if(ordenacao == 'des' || ordenacao == null || ordenacao == ''){
			objClicado.setAttribute('ord', 'asc');
			objClicado.className = objClassName.substring(0,(objClassName.indexOf(' spwCabecalhoDesc')==-1?objClassName.length:objClassName.indexOf(' spwCabecalhoDesc'))) + ' spwCabecalhoAsc';			
		} else {
			objClicado.setAttribute('ord', 'des');
			objClicado.className = objClassName.substring(0,(objClassName.indexOf(' spwCabecalhoAsc')==-1?objClassName.length:objClassName.indexOf(' spwCabecalhoAsc'))) + ' spwCabecalhoDesc';			
		}
	}
	
	function SG_sortCheckBoxColumn(checkColumn){
		var form = document.forms[0];
		var nuChecks = form.rowSelect.length;
		var checksMarcados = new Array();
		var count = 0;
		for(var i = 0; i < nuChecks; i++){
			if(form.rowSelect[i].checked == true){
				checksMarcados[count++] = form.rowSelect[i].getAttribute('value');				
			}
		}
		var nuMarcados = checksMarcados.length;
		if(nuMarcados != nuChecks){
			var table = document.getElementById('tabelaResultado');
			var arrayTR = table.getElementsByTagName('TR');
			var objRowUltimo;
			if(checkColumn.getAttribute('order') != 'firstChecked'){
				objRowUltimo = arrayTR[0];
			}else{
				objRowUltimo = arrayTR[arrayTR.length - 1];
			}

			for(var i = nuMarcados-1; i >= 0; i--){
				var nomeLinha = 'linha_' + checksMarcados[i];
				var objTR = document.getElementById(nomeLinha);
				if(checkColumn.getAttribute('order') != 'firstChecked'){
					table.lastChild.insertBefore(objTR, objRowUltimo);
				}else{
					table.lastChild.insertBefore(objTR, objRowUltimo);
					table.lastChild.insertBefore(objRowUltimo,objTR);
				}
				objTR.getElementsByTagName('INPUT')[0].checked = true;				
			}
		}
		if(nuMarcados != 0){	
			if(checkColumn.getAttribute('order') == 'firstChecked'){
				checkColumn.setAttribute('order','firstUnchecked');
			} else {
				checkColumn.setAttribute('order','firstChecked');
			}
		}
	}
//FUN??ES DE TIMER PARA ATUALIZA??ES
//*********************************************************

var timerID = null;
var timeout = 10000000;
var started = false;
var lastAccess = 0;

/*Funcao que deve ser sobrecrita para responder aos eventos de tempo.
  Para receber as notifica??es, colocar na TAG body os seguintes m?todos:
      - onunload="Stop()"
*/

function onTime() {
}

function _callOnTime() {
    if( timerID != null ) {
        clearTimeout( timerID );
        clockID  = 0;
    }

     timerID = setInterval("_callOnTime()", timeout);
     onTime();
}

function Start() {
     Start( timeout );
}

function Start( newTimeout ) {
    timeout = newTimeout;
    timerID  = setInterval( "_callOnTime()", timeout );
    started = true;
}

function Stop() {
   if( timerID != null) {
      clearTimeout( timerID );
      timerID  = null;
      started = false;
   }
}
function ST_selecionarSimples(obj) {
	var idSelecionado = document.getElementsByTagName("BODY")[0].getAttribute("idSelecionado");
	var objSelecionado = document.getElementById(idSelecionado);
	if (obj != objSelecionado) {
		if (objSelecionado != null) {
			var table = ST_findPrevious(objSelecionado, "TD");
			table.className = "";
		}
		var table = ST_findPrevious(obj, "TD");
		table.className = "linha-selecionada";
		document.getElementsByTagName("BODY")[0].setAttribute("idSelecionado", obj.id);
		if (obj.getAttribute("leaf") != "true") {
			ST_expand(ST_findPrevious(table, "TABLE"));
		}
	}
	var enabled = obj.getAttribute("enabled");
	var botaoSelecionar = document.getElementById("pbSelecionar");
	if(botaoSelecionar){
		botaoSelecionar.disabled = !(ST_strToBoolean(enabled));
	}
}

function ST_expand(obj) {
	var exp = ST_strToBoolean(obj.getAttribute("expanded"));
	var style = (exp == true ? "none" : "");
	obj.setAttribute("expanded", !exp);
	var table = ST_findNext(obj.nextSibling, "TABLE");
	var divs = table.getElementsByTagName("DIV");
	if (divs.length == 0) {
		return;
	}
	var div = divs[0];
	div.style.display = style;
	var tds = obj.getElementsByTagName("TD");
	for(var i = 0; i < tds.length; i++) {
		if(tds[i].getAttribute("iconeEncolher") == "true") {
			if (exp) {
				tds[i].className = "icone-encolhido";
			} else {
				tds[i].className = "icone-aberto";
			}
			break;
		}
	}
}

function ST_strToBoolean(str) {
	return str == "true" || str == true;
}

function ST_findNext(obj, nodeName) {
	while (obj != null && obj.nodeName != nodeName) {
		obj = obj.nextSibling;
	}
	return obj;
}

function ST_findPrevious(obj, nodeName) {
	while (obj != null && obj.nodeName != nodeName) {
		obj = obj.parentNode;
	}
	return obj;
}

function ST_selecionarNodo() {
	var objRetorno = parent.document.getElementById(idObjRetorno);
	var idSelecionado = document.getElementsByTagName("BODY")[0].getAttribute("idSelecionado");
	var objSelecionado = document.getElementById(idSelecionado);
	if (objSelecionado == null) {
		alert(resourceMap.getResource('label.js.nenhumRegistroSelecionado'));
		return;
	}
	if(isInputSelect(objRetorno)){
		parent.document.getElementById(cdSelecaoReference).value = objSelecionado.getAttribute("cdSelecao");
		parent.document.getElementById(descricaoReference).value = objSelecionado.getAttribute("descricao");
		parent.document.getElementById(cdApresentacaoReference).value = objSelecionado.getAttribute("cdApresentacao");
		habilitaInputsFilhos(objRetorno,document);
	} else {
		var grid = getGrid(objRetorno);
		ST_copiarParaGrid(grid, objRetorno, objSelecionado);
	}
	
	fecharConsultaById("");
}

//copia uma linha do form de consulta para o grid
function ST_copiarParaGrid(grid, objRetorno, objSelecionado) {
    var nmGrid = getNomeGrid(grid);
    var nuLinhaNova = new Number( parent.document.getElementById("textQtLinhas"+nmGrid).childNodes[0].nodeValue );
    var linha = parent.criarLinha(objRetorno, true, true );         
    
    var idDoElemento = getColumnId(grid, cdSelecaoReference, nuLinhaNova);
    var obj = parent.document.getElementById( idDoElemento ); 
    if(obj != null){
    	obj.value = url_decode(objSelecionado.getAttribute("cdSelecao"));
    }
    
    var idDoElemento = getColumnId(grid, descricaoReference, nuLinhaNova);
    var obj = parent.document.getElementById( idDoElemento ); 
    if(obj != null){
    	obj.value = url_decode(objSelecionado.getAttribute("descricao"));
    }
    
    var idDoElemento = getColumnId(grid, cdApresentacaoReference, nuLinhaNova);
    var obj = parent.document.getElementById( idDoElemento ); 
    if(obj != null){
    	obj.value = url_decode(objSelecionado.getAttribute("cdApresentacao"));
    }
    
    parent.changeActionGridInsert(grid,nuLinhaNova);
    linha.style.display = '';
   
}

function ST_limparCampoFiltro() {
	document.getElementById("filtroConsulta").value = "";
}

// SPW
var Spw = {};


// Keys
Spw.Keys = {
	DOM_VK_CANCEL			: 3,
	DOM_VK_HELP				: 6,
	DOM_VK_BACK_SPACE		: 8,
	DOM_VK_TAB				: 9,
	DOM_VK_CLEAR			: 12,
	DOM_VK_RETURN			: 13,
	DOM_VK_ENTER			: 14,
	DOM_VK_SHIFT			: 16,
	DOM_VK_CONTROL			: 17,
	DOM_VK_ALT				: 18,
	DOM_VK_PAUSE			: 19,
	DOM_VK_CAPS_LOCK		: 20,
	DOM_VK_ESCAPE			: 27,
	DOM_VK_SPACE			: 32,
	DOM_VK_PAGE_UP			: 33,
	DOM_VK_PAGE_DOWN		: 34,
	DOM_VK_END				: 35,
	DOM_VK_HOME				: 36,
	DOM_VK_LEFT				: 37,
	DOM_VK_UP				: 38,
	DOM_VK_RIGHT			: 39,
	DOM_VK_DOWN				: 40,
	DOM_VK_PRINTSCREEN		: 44,
	DOM_VK_INSERT			: 45,
	DOM_VK_DELETE			: 46,
	DOM_VK_3				: 48,
	DOM_VK_1				: 49,
	DOM_VK_2				: 50,
	DOM_VK_3				: 51,
	DOM_VK_4				: 52,
	DOM_VK_5				: 53,
	DOM_VK_6				: 54,
	DOM_VK_7				: 55,
	DOM_VK_8				: 56,
	DOM_VK_9				: 57,
	DOM_VK_SEMICOLON		: 59,
	DOM_VK_EQUALS			: 61,
	DOM_VK_A				: 65,
	DOM_VK_B				: 66,
	DOM_VK_C				: 67,
	DOM_VK_D				: 68,
	DOM_VK_E				: 69,
	DOM_VK_F				: 70,
	DOM_VK_G				: 71,
	DOM_VK_H				: 72,
	DOM_VK_I				: 73,
	DOM_VK_J				: 74,
	DOM_VK_K				: 75,
	DOM_VK_L				: 76,
	DOM_VK_M				: 77,
	DOM_VK_N				: 78,
	DOM_VK_O				: 79,
	DOM_VK_P				: 80,
	DOM_VK_Q				: 81,
	DOM_VK_R				: 82,
	DOM_VK_S				: 83,
	DOM_VK_T				: 84,
	DOM_VK_U				: 85,
	DOM_VK_V				: 86,
	DOM_VK_W				: 87,
	DOM_VK_X				: 88,
	DOM_VK_Y				: 89,
	DOM_VK_Z				: 90,
	DOM_VK_CONTEXT_MENU		: 93,
	DOM_VK_NUMPAD0			: 96,
	DOM_VK_NUMPAD1			: 97,
	DOM_VK_NUMPAD2			: 98,
	DOM_VK_NUMPAD3			: 99,
	DOM_VK_NUMPAD4			: 100,
	DOM_VK_NUMPAD5			: 101,
	DOM_VK_NUMPAD6			: 102,
	DOM_VK_NUMPAD7			: 103,
	DOM_VK_NUMPAD8			: 104,
	DOM_VK_NUMPAD9			: 105,
	DOM_VK_MULTIPLY			: 106,
	DOM_VK_ADD				: 107,
	DOM_VK_SEPARATOR		: 108,
	DOM_VK_SUBTRACT			: 109,
	DOM_VK_DECIMAL			: 110,
	DOM_VK_DIVIDE			: 111,
	DOM_VK_F1				: 112,
	DOM_VK_F2				: 113,
	DOM_VK_F3				: 114,
	DOM_VK_F4				: 115,
	DOM_VK_F5				: 116,
	DOM_VK_F6				: 117,
	DOM_VK_F7				: 118,
	DOM_VK_F8				: 119,
	DOM_VK_F9				: 120,
	DOM_VK_F10				: 121,
	DOM_VK_F11				: 122,
	DOM_VK_F12				: 123,
	DOM_VK_F13				: 124,
	DOM_VK_F14				: 125,
	DOM_VK_F15				: 126,
	DOM_VK_F16				: 127,
	DOM_VK_F17				: 128,
	DOM_VK_F18				: 129,
	DOM_VK_F19				: 130,
	DOM_VK_F20				: 131,
	DOM_VK_F21				: 132,
	DOM_VK_F22				: 133,
	DOM_VK_F23				: 134,
	DOM_VK_F24				: 135,
	DOM_VK_NUM_LOCK			: 144,
	DOM_VK_SCROLL_LOCK		: 145,
	DOM_VK_COMMA			: 188,
	DOM_VK_PERIOD			: 190,
	DOM_VK_SLASH			: 191,
	DOM_VK_BACK_QUOTE		: 192,
	DOM_VK_OPEN_BRACKET		: 219,
	DOM_VK_BACK_SLASH		: 220,
	DOM_VK_CLOSE_BRACKET	: 221,
	DOM_VK_QUOTE			: 222,
	DOM_VK_META				: 224		
};


// Event
Spw.Event = (function() {
	function addHandler(element, eventType, handler) {
		if (element.addEventListener) {
			element.addEventListener(eventType, handler, false);
		} else if (element.attachEvent) {
			element.attachEvent("on" + eventType, handler);
		}
	}

	function target(event) {
		return event && event.target ? event.target : event.srcElement;
	}

	function cancel(event) {
		if (event && event.preventDefault) {
			event.preventDefault();
		} else {
			event.returnValue = false;
		}
	}

	// Identificadores publicados/revelados
	return { 
		addHandler : addHandler,
		target     : target,
		cancel     : cancel
	};
})();


// DOM
Spw.Dom = (function() {
	function hasClass(element, className) {
		var classes = element.className.split(/\s+/g);
		return classes.indexOf(className) != -1;
	}
	
	function addClass(element, className) {
		if (hasClass(element, className)) {
			return;
		}
		var classes = element.className.split(/\s+/g);
		classes.push(className);
		element.className = classes.join(" ");
	}

	function removeClass(element, className) {
		var classes = element.className.split(/\s+/g);
		var pos = classes.indexOf(className);
		if (pos != -1) {
			classes.splice(pos, 1);
			element.className = classes.join(" ");
		}
	}

	return {
		addClass : addClass,
		removeClass : removeClass,
		hasClass : hasClass
	};
})();


// Characters
Spw.Characters = (function() {
    var NO_DIACRITICS_CODE = [
          0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
         10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
         20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
         30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
         40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
         50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
         60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
         80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
         90,  91,  92,  93,  94,  95,  96,  65,  66,  67,
         68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,
         88,  89,  90, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
        140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
        150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
        160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
        170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
        180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
        190, 191,  65,  65,  65,  65,  65,  65, 198,  67,
         69,  69,  69,  69,  73,  73,  73,  73,  68,  78,
         79,  79,  79,  79,  79, 215,  79,  85,  85,  85,
         85,  89, 222, 223,  65,  65,  65,  65,  65,  65,
        230,  67,  69,  69,  69,  69,  73,  73,  73,  73,
        240,  78,  79,  79,  79,  79,  79, 247,  79,  85,
         85,  85,  85,  89, 254,  89
    ];
    
    // Remove acentos e converte pra maiï¿½sculas.
    var normalize = function(text) {
    	var textLength = text.length;
    	var normalizedText = new Array(textLength);
    	text = text.toUpperCase();
    	for (var i = 0; i < textLength; ++i) {
    		normalizedText[i] = String.fromCharCode(NO_DIACRITICS_CODE[text.charCodeAt(i)]);
    	}
    	return normalizedText.join("");
    };
    
    return {
    	"normalize" : normalize
    };
})();


// Sorting
Spw.Sorting = (function() {
	var mergeSort = function(data) {
	    if (data.length <= 1) {
	        return data;
	    }
	    var mediumIndex = data.length / 2;
	    var left = mergeSort(data.slice(0, mediumIndex));
	    var right = mergeSort(data.slice(mediumIndex));
	    return merge(left, right);
	};

	var merge = function(left, right) {
	    var result = new Array();
	    while (left.length > 0 || right.length > 0) {
	        if (left.length > 0 && right.length > 0) {
	            if (left[0] <= right[0]) {
	                result.push(left[0]);
	                left.splice(0, 1);
	            } else {
	                result.push(right[0]);
	                right.splice(0, 1);
	            }
	        } else if (left.length > 0) {
	            result.push(left[0]);
	            left.splice(0, 1);
	        } else {
	            result.push(right[0]);
	            right.splice(0, 1);
	        }
	    }
	    return result;
	};
	
	return { "mergeSort" : mergeSort };
})();


// ARIA
Spw.Aria = (function() {
	var alert = function(message, baseDocument) {
		if (baseDocument === undefined) {
			baseDocument = window.document;
		}
		removeAlertElement(baseDocument);
		var element = baseDocument.createElement("div");
		element.setAttribute("id", "spwAriaAlert");
		element.setAttribute("role", "alert");
		element.appendChild(baseDocument.createTextNode(message));
		baseDocument.body.appendChild(element);
		window.setTimeout(function() { removeAlertElement(baseDocument); }, 500);
	};

	var removeAlertElement = function(baseDocument) {
		var element = baseDocument.getElementById("spwAriaAlert");
		if (element) {
			baseDocument.body.removeChild(element);
		}
	};
	
	return {
		"alert" : alert
	};
})();


// General utilities and global event handlers
Spw.Util = (function() {
	var isFocusable = function(element) {
		var focusable =
			element.nodeType === Node.ELEMENT_NODE
			&& element.style.visibility !== "hidden" 
			&& element.style.display !== "none"
			&& !element.disabled
			&& !(element.type && element.type === "hidden")
			&& element.getAttribute("tabindex") !== undefined;
		return focusable;
	};
	
	return {
		"isFocusable" : isFocusable
	};
})();

Spw.onWindowLoad = function(event, documentRef) {
    documentRef.body.setAttribute("role", "application");
	Spw.Event.addHandler(documentRef, "keydown", 
			function(event) { Spw.globalKeyDownHandler(event, documentRef); });
	documentRef.body.focus();
//	setTimeout(function() { Spw.focusOnFirstElement(documentRef); }, 5000);
};

Spw.globalKeyDownHandler = function(event, documentRef) {
	if (event.ctrlKey && event.altKey) {
	    if (event.keyCode === event.DOM_VK_M) {
		    top.Spw.Menu.openMenuFrame();
	    } else if (event.keyCode === event.DOM_VK_S) {
//		    Spw.submitCurrentForm(documentRef);
	    } else if (event.keyCode === event.DOM_VK_X) {
		    top.location.href = "logoff.jsp";
	    }
	}
};

Spw.focusOnFirstElement = function(documentRef) {
	console.log("[focusOnFirstElement] begin");
	var elements = documentRef.forms[0].childNodes;
	var elementCount = elements.length;
	for (var i = 0; i < elementCount; ++i) {
		var element = elements[i];
		if (Spw.Util.isFocusable(element)) {
			console.log("[focusOnFirstElement] found the element: " + element.nodeName + " - ");
			element.focus();
			break;
		}
	}
	console.log("[focusOnFirstElement] end");
};

Spw.submitCurrentForm = function(documentRef) {
	var element = documentRef.activeElement;
	while (element && element.nodeType === Node.ELEMENT_NODE) {
		element = element.parentNode;
		if (element.nodeName === "FORM") {
			element.submit();
			return;
		}
	}
	Spw.Aria.alert("Nï¿½o hï¿½ formulï¿½rio a ser submetido.", documentRef);
};
/*****************************************************************************
 ** Obtï¿½m uma propridade de um objeto, de maneira recursiva, com base em um **
 ** caminho em forma de string.                                             **
 *****************************************************************************/
Spw.Util.fetchProperty = function(object, path, separator) {
    if (separator === undefined) separator = "/";
    var pathElements = path.split(separator);
    var target = object;
    if (pathElements.length > 1) {
        for (var i = 1; i < pathElements.length; ++i) {
            var pathElement = pathElements[i];
            if (pathElement == "") continue;
            if (!target.hasOwnProperty(pathElement)) {
                throw new Error("Caminho invï¿½lido: '" + path + "'");
            }
            target = target[pathElement];
        }
    }
    return target;
};

// FIXME: Soluï¿½ï¿½o simples mas que pode falhar. 
Spw.Util.isVisible = function(element) {
    return element.offsetTop != 0;
};

Spw.Util.marshalGridFieldId = function(rowId, propertyName, rowIndex) {
    return rowId + "[" + rowIndex + "]." + propertyName + "_" + rowIndex;
};Spw.Grid = function(tableId) {
    if (Spw.Grid.registry[tableId] !== undefined) {
        return Spw.Grid.registry[tableId];
    }
	Spw.Grid.registry[tableId] = this;

    this.table = document.getElementById(tableId);
    if (this.table == undefined) {
        throw new Error("ID da tabela da grid invï¿½lido.");
    }

    this.mode = Spw.Grid.Modes.NAVIGATION;
    // Pula a coluna de status.
    this.firstNavigableColumnIndex = 1;
    this.currentCell = null;

    // Suporte ï¿½ busca incremental.
    this.searchText = "";
    this.searchTimeoutId = null;
    this.lastMatch = "";
    this.searchBaseRowIndex = 0;

   	var firstCell = this.cell(0, this.firstNavigableColumnIndex);
    if (firstCell) {
        this.currentCell = firstCell;
        firstCell.setAttribute("aria-selected", true);
        Spw.Dom.addClass(firstCell, "current");
    }

	var spwGrid = this;
    Spw.Event.addHandler(this.table, "keydown", function(event) { 
        Spw.Grid.onKeyDown.call(spwGrid, event);
    });
    Spw.Event.addHandler(this.table, "keypress", function(event) {
        Spw.Grid.onKeyPress.call(spwGrid, event); 
    });
    Spw.Event.addHandler(this.table, "click", function(event) { 
        Spw.Grid.onClick.call(spwGrid, event); 
    });
};


//=============================
//==BEGIN "STATIC" PROPERTIES==
//=============================

Spw.Grid.registry = {};

Spw.Grid.alertGridHelp = function() {
	var text = 
		  "Para navegar pelas cï¿½lulas da grid, use as setas do teclado. "
		+ "Para editar um registro, tecle enter. "
		+ "Para terminar a ediï¿½ï¿½o, tecle enter novamente. "
		+ "Para cancelar a ediï¿½ï¿½o e voltar para o modo de navegaï¿½ï¿½o, tecle ï¿½squi. "
		+ "Quando em modo de ediï¿½ï¿½o, tecle tab para pular para a prï¿½xima cï¿½lula editï¿½vel. "
		+ "Para inserir um registor, tecle control alt inserti. "
		+ "Para marcar um registro para exclusï¿½o, tecle delï¿½ti. "
		+ "Para cancelar a exclusï¿½o, tecle delï¿½ti novamente.";
	Spw.Aria.alert(text);
};

Spw.Grid.get = function(gridId) {
	var grid = Spw.Grid.registry[gridId];
	if (grid === undefined) {
		return null;
	}
	return grid;
};

Spw.Grid.Modes = {
	"NAVIGATION" : 0,
	"ACTIONABLE" : 1
};

Spw.Grid.StatusInfo = {
	""   : { description : "Inalterado", iconUrl : "imagens/base/estado.png" },
	"I"  : { description : "Novo", iconUrl : "imagens/base/estadoI.gif" }, 
	"U"  : { description : "Modificado", iconUrl : "imagens/base/estadoU.gif" },
	"D"  : { description : "Marcado para exclusï¿½o", iconUrl : "imagens/base/estadoD.gif" },
	"DU" : { description : "Modificado e marcado para exclusï¿½o", iconUrl : "imagens/base/estadoD.gif" },
	"DI" : { description : "Inserido e marcado para exclusï¿½o", iconUrl : "imagens/base/estadoD.gif" }
};

Spw.Grid.isEditable = function(inputElement) {
	return !Spw.Dom.hasClass(inputElement, "disabled"); // && !inputElement.getAttribute("aria-readonly")
};

Spw.Grid.getEditableInputElement = function(cell) {
	var inputElement = cell.getElementsByTagName("INPUT")[0];
	if (inputElement && Spw.Grid.isEditable(inputElement)) { 
		return inputElement;
	}
	return null;
};

Spw.Grid.isDeletedStatus = function(rowStatus) {
	return rowStatus.indexOf("D") !== -1;
};

//Recursivamente atualiza o id e nome dos subelementos de uma linha da grid.
Spw.Grid.updateIndexAttributes = function(elem, newIndex) {
	var childrenCount = elem.childNodes.length;
	for (var i = 0; i < childrenCount; ++i) {
		var childElem = elem.childNodes[i]; 
		if (childElem.nodeType === 1) { // Processa somente se nodo for ELEMENT_TYPE.
			Spw.Grid.updateIndexAttributes(childElem, newIndex);
		}
	}
	if (elem.id) {
		elem.id = elem.id.replaceAll("-1", newIndex);
	}
	if (elem.name) {
		elem.name = elem.name.replaceAll("-1", newIndex);
	}
};

Spw.Grid.rowElementsOperator = function(row, operation) {
	var elements = row.getElementsByTagName("INPUT");
	var adder = function(array, nodeList) {
		for (var i = 0; i < nodeList.length; ++i) { array.push(nodeList.item(i)); }
	};
	var textAreas = row.getElementsByTagName("TEXTAREA");
	adder(elements, textAreas);
	var selects = row.getElementsByTagName("SELECT");
	adder(elements, selects);
	for (var i = 0; i < elements.length; ++i) {
		var element = elements[i];
		operation(element);
	}
};

Spw.Grid.addNameAttributes = function(row) {
	var op = function(element) {
		if (element.id !== undefined) {
			var elementName = element.id.substring(0, element.id.lastIndexOf("_"));
			element.setAttribute("name", elementName);
		}
	};
	Spw.Grid.rowElementsOperator(row, op);
};

Spw.Grid.removeNameAttributes = function(row) {
	var op = function(element) {
		element.removeAttribute("name");
	};
	Spw.Grid.rowElementsOperator(row, op);
};

Spw.Grid.cellContents = function(cell) {
	var inputs = cell.getElementsByTagName("INPUT");
	if (inputs.length === 0) {
		return window.event ? cell.innerText : cell.textContent;
	} else {
		return inputs[0].value;
	}
};

Spw.Grid.onKeyDown = function(event) {
    var keyCode = event.keyCode;
    switch (keyCode) {
    case Spw.Keys.DOM_VK_DOWN:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            Spw.Event.cancel(event);
            var nextCell = this.cellBelow();
            if (nextCell) {
                this.setCurrentCell(nextCell);
            }
        }
        break;
    case Spw.Keys.DOM_VK_UP:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            Spw.Event.cancel(event);
            var nextCell = this.cellAbove();
            if (nextCell) {
                this.setCurrentCell(nextCell);
            }
        }
        break;
    case Spw.Keys.DOM_VK_RIGHT:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            Spw.Event.cancel(event);
            var nextCell = this.cellToTheRight();
            if (nextCell) {
                this.setCurrentCell(nextCell);
            }
        }
        break;
    case Spw.Keys.DOM_VK_LEFT:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            Spw.Event.cancel(event);
            var nextCell = this.cellToTheLeft();
            if (nextCell) {
                this.setCurrentCell(nextCell);
            }
        }
        break;
    case Spw.Keys.DOM_VK_HOME:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            Spw.Event.cancel(event);
            var nextCell = this.cell(this.currentRowIndex(), this.firstNavigableColumnIndex);
            if (nextCell) {
                this.setCurrentCell(nextCell);
            }
        }
        break;
    case Spw.Keys.DOM_VK_END:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            Spw.Event.cancel(event);
            var nextCell = this.cell(this.currentRowIndex(), this.columnCount() - 1);
            if (nextCell) {
                this.setCurrentCell(nextCell);
            }
        }
        break;
    case Spw.Keys.DOM_VK_PAGE_UP:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            Spw.Event.cancel(event);
            var nextCell = this.cell(0, this.currentCell.cellIndex);
            if (nextCell) {
                this.setCurrentCell(nextCell);
            }
        }
        break;
    case Spw.Keys.DOM_VK_PAGE_DOWN:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            Spw.Event.cancel(event);
            var nextCell = this.cell(this.rowCount() - 1, this.currentCell.cellIndex);
            if (nextCell) {
                this.setCurrentCell(nextCell);
            }
        }
        break;
    case Spw.Keys.DOM_VK_RETURN:
        Spw.Event.cancel(event);
        var inputElement = Spw.Grid.getEditableInputElement(this.currentCell);
        if (inputElement) {
            if (this.mode === Spw.Grid.Modes.NAVIGATION) {
                this.mode = Spw.Grid.Modes.ACTIONABLE;
                this.edit(inputElement);
            } else {
                this.endEditing(inputElement);
                this.mode = Spw.Grid.Modes.NAVIGATION;
            }
        } else {
            Spw.Aria.alert("Cï¿½lula nï¿½o editï¿½vel.");
        }
        break;
    case Spw.Keys.DOM_VK_ESCAPE:
        Spw.Event.cancel(event);
        if (this.mode === Spw.Grid.Modes.ACTIONABLE) {
            var inputElement = Spw.Grid.getEditableInputElement(this.currentCell);
            if (inputElement) {
                this.cancelEditing(inputElement);
            }
            this.mode = Spw.Grid.Modes.NAVIGATION;
        } else {
            this.resetIncrementalSearch();
        }
        break;
    case Spw.Keys.DOM_VK_TAB:
        if (this.mode === Spw.Grid.Modes.ACTIONABLE) {
            Spw.Event.cancel(event);
            var findElement;
            if (!event.shiftKey) {
                findElement = function() { return this.nextActionableElement(); };
            } else {
                findElement = function() { return this.previousActionableElement(); };
            }
            var nextElement = findElement.call(this);
            this.endEditing(this.currentCell);
            this.setCurrentCell(nextElement.parentNode);
            this.edit(nextElement);
        }
        break;
    case Spw.Keys.DOM_VK_DELETE:
        if (this.mode === Spw.Grid.Modes.NAVIGATION) {
            this.deleteRowToggle();
        }
        break;
    case Spw.Keys.DOM_VK_INSERT:
        if (this.mode === Spw.Grid.Modes.NAVIGATION && event.ctrlKey && event.altKey) {
            if (this.table.getAttribute("allowinsert") != null) {
                this.addRow();
            } else {
                Spw.Aria.alert("Inserï¿½ï¿½o de registros nï¿½o permitida.");
            }
        }
        break;
    case Spw.Keys.DOM_VK_N:
        if (this.mode === Spw.Grid.Modes.NAVIGATION && event.ctrlKey && event.altKey) {
            Spw.Event.cancel(event);
            this.findNext();
        }
        break;
    case Spw.Keys.DOM_VK_O:
        if (this.mode === Spw.Grid.Modes.NAVIGATION && event.ctrlKey && event.altKey) {
            Spw.Event.cancel(event);
            this.sortByCurrentColumn();
            this.currentCell.focus();
        }
        break;
    case Spw.Keys.DOM_VK_F1:
        Spw.Event.cancel(event);
        Spw.Grid.alertGridHelp();
        break;
    default:
        break;
    }
};

Spw.Grid.onKeyPress = function(event) {
    if (event.ctrlKey || event.altKey) {
        return;
    }
    if (this.mode === Spw.Grid.Modes.NAVIGATION) {
        // Quando em modo de navegaï¿½ï¿½o, as teclas espaï¿½o e alfanumï¿½ricas (incluindo 'ï¿½')
        // iniciam a funcionalidade de busca textual na coluna corrente.
        var charCode = Spw.Characters.normalize(String.fromCharCode(event.charCode));
        if (charCode == " " || charCode >= "A" && charCode <= "Z" 
                || charCode >= "0" && charCode <= "9") {
            this.incrementalSearch(charCode);
        }
    }
};      

Spw.Grid.onClick = function(event) {
    var element = Spw.Event.target(event);
    
    var cell = null;
    var inputElement = null;
    
    if (element.nodeName === "INPUT") {
        inputElement = element;
        cell = inputElement.parentNode;
    } else if (element.nodeName === "TD") {
        if (element.getAttribute("role") === "gridcell" || element.getAttribute("role") === "rowheader") {
            cell = element;
            inputElement = Spw.Grid.getEditableInputElement(cell);
        }                   
    }

    var editable = Spw.Grid.isEditable(inputElement);

    if (this.mode === Spw.Grid.Modes.ACTIONABLE) {
        var previousInputElement = Spw.Grid.getEditableInputElement(this.currentCell);
        if (inputElement && inputElement != previousInputElement) {
            this.endEditing(previousInputElement);
        }
    }
        
    if (cell) {
        this.setCurrentCell(cell);
        if (inputElement && editable) {
            this.mode = Spw.Grid.Modes.ACTIONABLE;
            this.edit(inputElement);
        }
    }
};

//==END "STATIC" PROPERTIES==


//===============================
// ==BEGIN PROTOTYPE PROPERTIES==
//===============================

Spw.Grid.prototype.rowCount = function() {
	return this.table.tBodies[0].rows.length;
};

Spw.Grid.prototype.columnCount = function() {
	return this.table.tBodies[0].rows[0].cells.length;
};

Spw.Grid.prototype.cell = function(i, j) {
	if (this.rowCount() < i + 1) {
		return null;
	}
	var row = this.table.tBodies[0].rows[i];
	if (row.cells.length < j + 1) {
		return null;
	}
	return row.cells[j];
};

Spw.Grid.prototype.row = function(rowIndex) {
	return this.table.tBodies[0].rows[rowIndex];
};

Spw.Grid.prototype.currentRowIndex = function() {
	return this.currentCell.parentNode.sectionRowIndex;
};

Spw.Grid.prototype.currentRow = function() {
	return this.row(this.currentRowIndex());
};

Spw.Grid.prototype.setCurrentCell = function(cell) {
	var previousCell = this.currentCell;
	if (previousCell) {
		Spw.Dom.removeClass(previousCell, "current");
		previousCell.removeAttribute("aria-selected");
	}
	// Atualizar informaï¿½ï¿½o de cï¿½lula corrente.
	this.currentCell = cell;
	var rowIndex = this.currentRowIndex();
	this.searchBaseRowIndex = rowIndex;
	// Se houve troca de linha, notificar usuï¿½rio sobre status da nova linha.
	if (!previousCell || rowIndex !== previousCell.parentNode.sectionRowIndex) {
		this.alertCurrentRowStatus();
	}
	cell.setAttribute("aria-selected", true);
	Spw.Dom.addClass(cell, "current");
	cell.focus();
};

Spw.Grid.prototype.cellBelow = function() {
    var cellBelow = null;
    var rowIndex = this.currentRowIndex() + 1;
    if (rowIndex < this.rowCount()) {
        cellBelow = this.cell(rowIndex, this.currentCell.cellIndex);
    }
    return cellBelow;
};

Spw.Grid.prototype.cellAbove = function() {
    var cellAbove = null;
    var rowIndex = this.currentRowIndex() - 1;
    if (rowIndex >= 0) {
    	cellAbove = this.cell(rowIndex, this.currentCell.cellIndex);
    }
    return cellAbove;
};

Spw.Grid.prototype.cellToTheRight = function() {
    var cellIndex = this.currentCell.cellIndex;
    var cellToTheRight = null;
    while (++cellIndex < this.columnCount()) {
        cellToTheRight = this.cell(this.currentRowIndex(), cellIndex);
        if (Spw.Util.isVisible(cellToTheRight)) break;
    }
    return cellToTheRight;
};

Spw.Grid.prototype.cellToTheLeft = function() {
    var cellIndex = this.currentCell.cellIndex;
    var cellToTheLeft = null;
    while (--cellIndex >= this.firstNavigableColumnIndex) {
        cellToTheLeft = this.cell(this.currentRowIndex(), cellIndex);
        if (Spw.Util.isVisible(cellToTheLeft)) break;
    }
    return cellToTheLeft;
};

Spw.Grid.prototype.nextActionableElement = function() {
	var rowIndex = this.currentRowIndex();
	var cellIndex = this.currentCell.cellIndex + 1;
	var rowCount = this.rowCount();
	var columnCount = this.columnCount();
	var actionableElement = null;
	while (true) {
		while (rowIndex < rowCount) {
			while (cellIndex < columnCount) {
				var cell = this.cell(rowIndex, cellIndex);
				actionableElement = Spw.Grid.getEditableInputElement(cell);
				if (actionableElement) {
					return actionableElement;
				}
				++cellIndex;
			}
			cellIndex = this.firstNavigableColumnIndex;
			++rowIndex;
		}
		rowIndex = 0;
	}
};

Spw.Grid.prototype.previousActionableElement = function() {
	var rowIndex = this.currentRowIndex();
	var cellIndex = this.currentCell.cellIndex - 1;
	var rowCount = this.rowCount();
	var columnCount = this.columnCount();
	var actionableElement = null;
	while (true) {
		while (rowIndex > -1) {
			while (cellIndex >= this.firstNavigableColumnIndex) {
				var cell = this.cell(rowIndex, cellIndex);
				actionableElement = Spw.Grid.getEditableInputElement(cell);
				if (actionableElement) {
					return actionableElement;
				}
				--cellIndex;
			}
			cellIndex = columnCount - 1;
			--rowIndex;
		}
		rowIndex = rowCount - 1;
	}
};

Spw.Grid.prototype.edit = function(inputElement) {
	if (inputElement.getAttribute("type") === "text") {
		inputElement.setAttribute("oldvalue", inputElement.value);
	}
	inputElement.removeAttribute("readonly");
	inputElement.focus();
};

Spw.Grid.prototype.endEditing = function(inputElement) {
	inputElement.setAttribute("readonly", "readonly");
	this.currentCell.focus();
};

Spw.Grid.prototype.cancelEditing = function(inputElement) {
	inputElement.setAttribute("readonly", "readonly");
	if (inputElement.getAttribute("type") === "text") {
		inputElement.value = inputElement.getAttribute("oldvalue");
	}
	this.currentCell.focus();
};

Spw.Grid.prototype.getRowStatus = function(rowIndex) {
	return this.row(rowIndex).cells[0].getElementsByTagName("INPUT")[0].value;
};

Spw.Grid.prototype.setRowStatus = function(rowIndex, status) {
	var statusCell = this.row(rowIndex).cells[0]; 
	statusCell.getElementsByTagName("INPUT")[0].value = status;
	statusCell.getElementsByTagName("IMG")[0].src = Spw.Grid.StatusInfo[status].iconUrl;
};

Spw.Grid.prototype.getCurrentRowStatus = function() {
	return this.getRowStatus(this.currentRowIndex());
};

Spw.Grid.prototype.setCurrentRowStatus = function(status) {
	this.setRowStatus(this.currentRowIndex(), status);
};

Spw.Grid.prototype.onRowChanged = function() {
	if (this.getCurrentRowStatus() !== "I") {
		this.setCurrentRowStatus("U");
	}
	Spw.Grid.addNameAttributes(this.currentRow());
};

Spw.Grid.prototype.deleteRowToggle = function() {
	var rowStatus = this.getCurrentRowStatus();
	var currentRow = this.currentRow();
	var modifierFunction;
	var message = null;
	if (Spw.Grid.isDeletedStatus(rowStatus)) {
		var newStatus = rowStatus.slice(1);
		this.setCurrentRowStatus(newStatus);
		modifierFunction = function(cell) {
			Spw.Dom.removeClass(cell, "spwLinhaExcluir");
		};
		if (newStatus === "") {
			Spw.Grid.removeNameAttributes(currentRow);
		}
		message = "Exclusï¿½o cancelada.";
	} else {
		this.setCurrentRowStatus("D" + rowStatus);
		modifierFunction = function(cell) {
			Spw.Dom.addClass(cell, "spwLinhaExcluir"); 
		};
		Spw.Grid.addNameAttributes(currentRow);
		message = "Registro marcado para exclusï¿½o.";
	}
	for (var i = 0; i < currentRow.cells.length; ++i) {
		modifierFunction(currentRow.cells[i]);
	} 
	Spw.Aria.alert(message);
};

Spw.Grid.prototype.alertCurrentRowStatus = function() {
	var rowStatus = this.getCurrentRowStatus();
	if (rowStatus !== "") {
		var message = "Registro " + (this.currentRowIndex() + 1) + ", status " + Spw.Grid.StatusInfo[rowStatus].description;
		Spw.Aria.alert(message);
	}
};

Spw.Grid.prototype.addRow = function() {
	var newRowIndex = this.rowCount();
	var newRow = this.table.tBodies[1].rows[0].cloneNode(true);
	Spw.Grid.updateIndexAttributes(newRow, newRowIndex);
	this.table.tBodies[0].appendChild(newRow);
	this.setRowStatus(newRowIndex, "I");
	this.updateRowCount();
	var columnCount = this.columnCount();
	var editableElement = null;
	var i;
	for (i = 1; i < columnCount; ++i) {
		editableElement = Spw.Grid.getEditableInputElement(this.cell(newRowIndex, i));
		if (editableElement != null) {
			break;
		}
	}
	if (i === columnCount) i = 1;
	var cell = this.cell(newRowIndex, i);
	this.setCurrentCell(cell);
	if (editableElement != null) {
		this.mode = Spw.Grid.Modes.ACTIONABLE;
		this.edit(editableElement);
	}
};

Spw.Grid.prototype.updateRowCount = function() {
	var spans = this.table.tFoot.getElementsByTagName("span");
	var rowCountSpan = null;
	for (var i = 0; i < spans.length; ++i) {
		if (spans[i].className === "spwGridRowCount") {
			rowCountSpan = spans[i];
			break;
		}
	}
	if (rowCountSpan) {
		rowCountSpan.replaceChild(document.createTextNode(this.rowCount()), rowCountSpan.firstChild);
	}
};

Spw.Grid.prototype.searchCurrentColumn = function(text, initialRowIndex) {
	var rows = this.table.tBodies[0].rows;
	var rowCount = rows.length;
	var columnIndex = this.currentCell.cellIndex;
	var found = false;
	for (var i = initialRowIndex; i < rowCount; ++i) {
		var cell = rows[i].cells[columnIndex];
		var contents = Spw.Grid.cellContents(cell);
		if (Spw.Characters.normalize(contents).indexOf(text) != -1) {
			this.lastMatch = text;
			this.setCurrentCell(cell);
			found = true;
			break;
		}
	}
	if (!found && initialRowIndex > 0) {
		this.searchCurrentColumn(text, 0);
	}
};

Spw.Grid.prototype.incrementalSearch = function(character) {
	this.searchText += character;
	clearTimeout(this.searchTimeoutId);
	this.searchCurrentColumn(this.searchText, this.searchBaseRowIndex);
	var that = this;
	this.searchTimeoutId = setTimeout(function() { that.resetIncrementalSearch(); }, 500);
};

Spw.Grid.prototype.resetIncrementalSearch = function() {
	this.searchText = "";
};

Spw.Grid.prototype.findNext = function() {
	this.searchCurrentColumn(this.lastMatch, this.searchBaseRowIndex + 1);
};

Spw.Grid.prototype.sortByCurrentColumn = function() {
	var rowCount = this.rowCount();
	var currentCellIndex = this.currentCell.cellIndex;
	// A preparaï¿½ï¿½o dos dados da coluna a ser ordenada ï¿½ diferente para colunas
	// numï¿½ricas e texto. Quando disponï¿½vel, o atributo 'formattype' do input da
	// cï¿½lula ï¿½ usado; em caso contrï¿½rio, tenta-se deduzir o tipo a partir do
	// valor da primeira cï¿½lula da coluna.
	var isNumericData;
	var firstCell = this.cell(0, currentCellIndex);
	var inputElement = firstCell.getElementsByTagName("INPUT")[0];
	if (inputElement !== undefined) {
		var type = inputElement.getAttribute("formattype");
		isNumericData = type !== undefined && type.toUpperCase() === "NUMBER";
	} else {
		isNumericData = !isNaN(+Spw.Grid.cellContents(firstCell));
	}
	var marshallingFunction = isNumericData ?
			function(contents) { return +contents; } :
			function(contents) { return Spw.Characters.normalize(contents); };
	var keys = new Array(rowCount);
	var columnData = {};
	for (var i = 0; i < rowCount; ++i) {
		var cell = this.cell(i, currentCellIndex);
		var key = marshallingFunction(Spw.Grid.cellContents(cell));
		keys[i] = key;
		columnData[key] = this.row(i);
	}
	var sortedKeys = Spw.Sorting.mergeSort(keys);
	var tBody = this.table.tBodies[0];
	for (var i = 0; i < rowCount - 1; ++i) {
		tBody.insertBefore(columnData[sortedKeys[i]], tBody.rows[i]);
	}
	var headerText = this.table.tHead.rows[0].cells[currentCellIndex].firstChild.nodeValue;
    Spw.Aria.alert("Registros ordenados pela coluna " + headerText);
};

//==END PROTOTYPE PROPERTIES==
// Assume a inclusï¿½o prï¿½via do recurso spwAcessGrid.js

Spw.ListGrid = function(tableId) {
    if (Spw.Grid.registry[tableId] !== undefined) {
        return Spw.Grid.registry[tableId];
    }
    Spw.Grid.registry[tableId] = this;

    this.table = document.getElementById(tableId);
    if (this.table == undefined) {
        throw new Error("ID da tabela da list grid invï¿½lido.");
    }

    // List grids suportam apenas modo de navegaï¿½ï¿½o.
    this.mode = Spw.Grid.Modes.NAVIGATION;
    // List grids nï¿½o possuem coluna de status.
    this.firstNavigableColumnIndex = 0;
    this.currentCell = null;

    // Suporte ï¿½ busca incremental.
    this.searchText = "";
    this.searchTimeoutId = null;
    this.lastMatch = "";
    this.searchBaseRowIndex = 0;

    // List grids nï¿½o possuem coluna de status.
    var firstCell = this.cell(0, this.firstNavigableColumnIndex);
    if (firstCell) {
        this.currentCell = firstCell;
        firstCell.setAttribute("aria-selected", true);
        Spw.Dom.addClass(firstCell, "current");
    }

    var spwListGrid = this;
    Spw.Event.addHandler(this.table, "keydown", function(event) { 
        Spw.ListGrid.onKeyDown.call(spwListGrid, event); 
    });
    Spw.Event.addHandler(this.table, "keypress", function(event) { 
        Spw.ListGrid.onKeyPress.call(spwListGrid, event); 
    });
    Spw.Event.addHandler(this.table, "click", function(event) {
        Spw.ListGrid.onClick.call(spwListGrid, event); 
    });
};

// "Inheritance"
var Dummy = function() {};
Dummy.prototype = Spw.Grid.prototype;
Spw.ListGrid.prototype = new Dummy;
Spw.ListGrid.prototype.constructor = Spw.ListGrid;


//=============================
//==BEGIN "STATIC" PROPERTIES==
//=============================

Spw.ListGrid.alertGridHelp = function() {
    var text = 
          "Para navegar pelas cï¿½lulas da grid, use as setas do teclado. "
        + "Para excluir um registro, tecle delï¿½ti.";
    Spw.Aria.alert(text);
};

Spw.ListGrid.onKeyDown = function(event) {
    var keyCode = event.keyCode;
    switch (keyCode) {
    case Spw.Keys.DOM_VK_RETURN:
    case Spw.Keys.DOM_VK_RETURN:
        Spw.Event.cancel(event);
        this.editCurrentRow();
        break;
    case Spw.Keys.DOM_VK_DELETE:
        Spw.Event.cancel(event);
        this.deleteCurrentRow();
        break;
    case Spw.Keys.DOM_VK_INSERT:
        Spw.Aria.alert("Grid nï¿½o editï¿½vel.");
        break;
    case Spw.Keys.DOM_VK_F1:
        Spw.Event.cancel(event);
        Spw.ListGrid.alertGridHelp();
        break;
    default:
        Spw.Grid.onKeyDown.call(this, event);
        break;
    }
};

Spw.ListGrid.onKeyPress = function(event) {
    Spw.Grid.onKeyPress.call(this, event);
};

Spw.ListGrid.onClick = function(event) {
    Spw.Grid.onClick.call(this, event);
};

//==END "STATIC" PROPERTIES==


//===============================
//==BEGIN PROTOTYPE PROPERTIES==
//===============================

// Override
Spw.ListGrid.prototype.setCurrentCell = function(cell) {
    var previousCell = this.currentCell;
    if (previousCell) {
        Spw.Dom.removeClass(previousCell, "current");
        previousCell.blur();
    }
    // Atualizar informaï¿½ï¿½o de cï¿½lula corrente.
    this.currentCell = cell;
    var cellIndex = this.currentRowIndex();
    this.searchBaseRowIndex = cellIndex;
    Spw.Dom.addClass(cell, "current");
    cell.focus();
};

Spw.ListGrid.prototype.deleteCurrentRow = function() {
    var deleteUrl = this.currentRow().getAttribute("deleteurl");
    if (deleteUrl !== null) {
        excluirRegistro(eval(deleteUrl)); // Chamada Spw
    }
};

Spw.ListGrid.prototype.editCurrentRow = function() {
    var editUrl = this.currentRow().getAttribute("editurl");
    if (editUrl !== null) {
        F_openPage(eval(editUrl)); // Chamada Spw
    }
};

//==END PROTOTYPE PROPERTIES==
// Assume a inclusï¿½o prï¿½via do recurso spwAcessListGrid.js

Spw.PagListGrid = function(tableId, rowId, referenceName, pageSize) {
    if (Spw.Grid.registry[tableId] !== undefined) {
        return Spw.Grid.registry[tableId];
    }
    Spw.Grid.registry[tableId] = this;

    this.table = document.getElementById(tableId);
    if (this.table == undefined) {
        throw new Error("ID da tabela da list grid invï¿½lido.");
    }

    // Id da iteraï¿½ï¿½o (atributo 'id' da tag)
    this.rowId = rowId;
    this.referenceName = referenceName;
    // Nï¿½mero de registros por pï¿½gina
    this.pageSize = pageSize;
    // Sentido da ordenaï¿½ï¿½o: sempre ascendente na grid acessï¿½vel.
    this.table.setAttribute("direction", "asc");
   
    // List grids paginadas suportam apenas modo de navegaï¿½ï¿½o.
    this.mode = Spw.Grid.Modes.NAVIGATION;
    // List grids paginadas nï¿½o possuem coluna de status.
    this.firstNavigableColumnIndex = 0;
    this.currentCell = null;

    // Suporte ï¿½ busca incremental.
    this.searchText = "";
    this.searchTimeoutId = null;
    this.lastMatch = "";
    this.searchBaseRowIndex = 0;

    // List grids paginadas nï¿½o possuem coluna de status.
    var firstCell = this.cell(0, this.firstNavigableColumnIndex);
    if (firstCell) {
        this.currentCell = firstCell;
        firstCell.setAttribute("aria-selected", true);
        Spw.Dom.addClass(firstCell, "current");
    }

    var spwPagListGrid = this;
    Spw.Event.addHandler(this.table, "keydown", function(event) { 
        Spw.PagListGrid.onKeyDown.call(spwPagListGrid, event); 
    });
    Spw.Event.addHandler(this.table, "keypress", function(event) { 
        Spw.PagListGrid.onKeyPress.call(spwPagListGrid, event); 
    });
    Spw.Event.addHandler(this.table.tBodies[0], "click", function(event) {
        Spw.PagListGrid.onBodyClick.call(spwPagListGrid, event); 
    });
};

// "Inheritance"
var Dummy = function() {};
Dummy.prototype = Spw.ListGrid.prototype;
Spw.PagListGrid.prototype = new Dummy;
Spw.PagListGrid.prototype.constructor = Spw.PagListGrid;


//=============================
//==BEGIN "STATIC" PROPERTIES==
//=============================

Spw.PagListGrid.get = Spw.Grid.get;

Spw.PagListGrid.alertGridHelp = function() {
    var text = 
          "Para navegar pelas cï¿½lulas da grid, use as setas do teclado. "
        + "Para ir para a prï¿½xima pï¿½gina, use control alti sinal de maior.";
        + "Para ir para a pï¿½gina anterior, use control alti sinal de menor.";
    Spw.Aria.alert(text);
};

Spw.PagListGrid.onKeyDown = function(event) {
    var keyCode = event.keyCode;
    switch (keyCode) {
    case event.DOM_VK_PAGE_UP:
        Spw.Event.cancel(event);
        if (event.shiftKey) {
            this.firstPage();
        } else {
            this.previousPage();
        }
        break;
    case event.DOM_VK_PAGE_DOWN:
        Spw.Event.cancel(event);
        if (event.shiftKey) {
            this.lastPage();
        } else {
            this.nextPage();
        }
        break;
    case Spw.Keys.DOM_VK_O:
        if (event.ctrlKey && event.altKey) {
            Spw.Event.cancel(event);
            this.sortByCurrentColumn();
        }
        break;
    case Spw.Keys.DOM_VK_F1:
        Spw.Event.cancel(event);
        Spw.PagListGrid.alertGridHelp();
        break;
    default:
        Spw.ListGrid.onKeyDown.call(this, event);
        break;
    }
};

Spw.PagListGrid.onKeyPress = function(event) {
    Spw.ListGrid.onKeyPress.call(this, event);
};

Spw.PagListGrid.onBodyClick = function(event) {
    Spw.ListGrid.onClick.call(this, event);
};

Spw.PagListGrid.getButtonOfClass = function(grid, className) {
    var buttons = document.getElementById("GridNavigation" + grid.rowId).getElementsByTagName("input");
    for (var i = 0; i < buttons.length; ++i) {
        var button = buttons[i];
        if (className.length > button.className.length) continue;
        var classNamePrefix = button.className.substring(0, className.length);
        if (button.type === "button" && className === classNamePrefix) {
            return button;
        }
    }
    return null;
};

Spw.PagListGrid.updateGridFieldValue = function(fieldId, newValue) {
    var field = document.getElementById(fieldId);
    if (!field) throw new Error("[updateGridFieldValue] Campo da grid nï¿½o localizado: " + fieldId); 
    if (field.nodeName === "INPUT") {
        var inputType = field.getAttribute("type");
        if (inputType === "text") {
            field.value = newValue ? newValue : "";
        } else if (inputType === "checkbox") {
            if (newValue === "S") {
                field.setAttribute("checked", "checked");
            } else {
                field.removeAttribute("checked");
            }
        }
    } else if (field.nodeName === "DIV") {
        if (newValue === null) newValue = "";
        if (field.firstChild) {
            field.replaceChild(document.createTextNode(newValue), field.firstChild);
        } else {
            field.appendChild(document.createTextNode(newValue));
        }
    }
};

//==END "STATIC" PROPERTIES==


//===============================
//==BEGIN PROTOTYPE PROPERTIES==
//===============================

Spw.PagListGrid.prototype.nextPage = function() {
    var nextPageButton = Spw.PagListGrid.getButtonOfClass(this, "spwBotaoProximo");
    if (nextPageButton) {
        if (!nextPageButton.disabled) {
            nextPageButton.click();
        } else {
            Spw.Aria.alert("Nï¿½o hï¿½ pï¿½ginas posteriores.");
        }
    }
};

Spw.PagListGrid.prototype.previousPage = function() {
    var previousPageButton = Spw.PagListGrid.getButtonOfClass(this, "spwBotaoAnterior");
    if (previousPageButton) {
        if (!previousPageButton.disabled) {
            previousPageButton.click();
        } else {
            Spw.Aria.alert("Nï¿½o hï¿½ pï¿½ginas anteriores.");
        }
    }
};

Spw.PagListGrid.prototype.firstPage = function() {
    var firstPageButton = Spw.PagListGrid.getButtonOfClass(this, "spwBotaoPrimeiro");
    if (firstPageButton) {
        if (!firstPageButton.disabled) {
            firstPageButton.click();
        } else {
            Spw.Aria.alert("Jï¿½ estï¿½ na primeira pï¿½gina.");
        }
    }
};

Spw.PagListGrid.prototype.lastPage = function() {
    var lastPageButton = Spw.PagListGrid.getButtonOfClass(this, "spwBotaoUltimo");
    if (lastPageButton) {
        if (!lastPageButton.disabled) {
            lastPageButton.click();
        } else {
            Spw.Aria.alert("Jï¿½ estï¿½ na ï¿½ltima pï¿½gina.");
        }
    }
};

/*
 * Atualiza as linhas da grid paginada com os dados retornados pela
 * chamada ao AjaxServlet. 
 */
Spw.PagListGrid.prototype.updateRows = function(pageNumber, rowData) {
    // OK usar getElementsByTagName porque as tags nï¿½o se repetem 
    // pra dentro da estrutura do XML.
    var rowElements = rowData.getElementsByTagName("e");
    var rowCount = rowElements.length;
    var propertyNames = [];
    var tableRows = this.table.tBodies[0].rows;
    for (var i = 0; i < rowCount; ++i) {
        var rowElement = rowElements[i];
        var rowIndex = rowElement.getAttribute("i");
        var columnElements = rowElement.getElementsByTagName("r");
        var columnCount = columnElements.length;
        for (var j = 0; j < columnCount; ++j) {
            var columnElement = columnElements[j];
            var propertyName = columnElement.getAttribute("n");
            // Guarda nome das propriedades na primeira passada.
            if (i === 0) propertyNames.push(propertyName);
            var value = columnElement.getAttribute("v");
            var fieldId = Spw.Util.marshalGridFieldId(this.rowId, propertyName, rowIndex);
            Spw.PagListGrid.updateGridFieldValue(fieldId, value);
        }
        tableRows[i].removeAttribute("empty"); // Controle para impedir navegaï¿½ï¿½o sobre linhas em branco.
    }
    // Limpar as linhas restantes, caso a pï¿½gina nï¿½o tenha sido preenchida.
    if (rowCount < this.pageSize) {
        for (var i = rowCount; i < this.pageSize; ++i) {
            for (var j = 0; j < propertyNames.length; ++j) {
                var fieldId = Spw.Util.marshalGridFieldId(this.rowId, propertyNames[j], i);
                Spw.PagListGrid.updateGridFieldValue(fieldId, null);
            }
            tableRows[i].setAttribute("empty", "empty");
        }
    }
    this.updateStatus(pageNumber, rowElements);
    this.setCurrentCell(this.cell(0, this.currentCell.cellIndex));
};

Spw.PagListGrid.prototype.getCellValueOnCurrentRow = function(propertyName) {
    var fieldId = Spw.Util.marshalGridFieldId(this.rowId, propertyName, this.currentRowIndex());
    return encodeURIComponent(new String(document.getElementById(fieldId).value));
};

Spw.PagListGrid.prototype.sortByCurrentColumn = function() {
    var currentCellIndex = this.currentCell.cellIndex;
    var sortProperty = this.table.tHead.rows[0].cells[currentCellIndex].getAttribute("sortProperty");
    this.table.setAttribute("orderBy", sortProperty);
    (new Function(this.referenceName + "GridPaginadaTag_AJAXRequest(\"0\");")).call();
};

Spw.PagListGrid.prototype.updateStatus = function(pageNumber, rowElements) {
    var statusElement = document.getElementById(this.table.id + "Status");
    var statusMessage = "Pï¿½gina " + (+pageNumber + 1);
    statusElement.replaceChild(document.createTextNode(statusMessage), 
            statusElement.firstChild);
};

//==END PROTOTYPE PROPERTIES==
// Assume a inclusï¿½o prï¿½via do recurso spwAcessGrid.js

Spw.SearchGrid = function(tableId) {
    if (Spw.Grid.registry[tableId] !== undefined) {
        return Spw.Grid.registry[tableId];
    }
    Spw.Grid.registry[tableId] = this;

    this.table = document.getElementById(tableId);
    if (this.table == undefined) {
        throw new Error("ID da tabela da search grid invï¿½lido.");
    }

    // Search grids suportam apenas modo de navegaï¿½ï¿½o.
    this.mode = Spw.Grid.Modes.NAVIGATION;
    // Search grids possuem uma coluna de seleï¿½ï¿½o.
    this.firstNavigableColumnIndex = 1;

    var firstCell = this.cell(0, 1);
    if (firstCell) {
        this.currentCell = firstCell;
        firstCell.setAttribute("aria-selected", true);
        Spw.Dom.addClass(firstCell, "current");
    }

    var spwSearchGrid = this;
    Spw.Event.addHandler(this.table, "keydown", function(event) { 
        Spw.SearchGrid.onKeyDown.call(spwSearchGrid, event); 
    });
    Spw.Event.addHandler(this.table, "click", function(event) { 
        Spw.SearchGrid.onClick.call(spwSearchGrid, event); 
    });
};

// "Inheritance"
var Dummy = function() {};
Dummy.prototype = Spw.Grid.prototype;
Spw.SearchGrid.prototype = new Dummy;
Spw.SearchGrid.prototype.constructor = Spw.SearchGrid;


//=============================
//==BEGIN "STATIC" PROPERTIES==
//=============================

Spw.SearchGrid.alertGridHelp = function() {
    var text = 
    	"Para navegar pelas cï¿½lulas da grid, use as setas do teclado. "
      + "Para selecionar um registro, tecle enter. "
      + "Para ordenar os registros pela coluna atual, pressione control alt ï¿½. "
      + "Para fechar a janela de busca, pressione a tecla esc.";
    Spw.Aria.alert(text);
};

Spw.SearchGrid.onKeyDown = function(event) {
    var keyCode = event.keyCode;
    switch (keyCode) {
    case Spw.Keys.DOM_VK_RETURN:
        Spw.Event.cancel(event);
        this.currentCell.parentNode.cells[0].getElementsByTagName("input")[0].checked = true;
        Spw.Aria.alert("Registro selecionado.");
        setTimeout(selecionarRegistros, 100);
        break;
    case Spw.Keys.DOM_VK_O:
        if (event.ctrlKey && event.altKey) {
            Spw.Event.cancel(event);
            this.sortByCurrentColumn();
            this.currentCell.focus();
        }
        break;
    case Spw.Keys.DOM_VK_ESCAPE:
        Spw.SearchGrid.setFocusOnParentControl();
        break;
    case Spw.Keys.DOM_VK_DELETE:
        Spw.Aria.alert("Grid nï¿½o editï¿½vel.");
        break;
    case Spw.Keys.DOM_VK_INSERT:
        Spw.Aria.alert("Grid nï¿½o editï¿½vel.");
        break;
    case Spw.Keys.DOM_VK_F1:
        Spw.Event.cancel(event);
        Spw.SearchGrid.alertGridHelp();
        break;
    default:
        Spw.Grid.onKeyDown.call(this, event);
        break;
    }
};

Spw.SearchGrid.onClick = function(event) {
  var element = Spw.Event.target(event);
  if (element.nodeName === "TD") {
      if (element.getAttribute("role") === "gridcell") {
          this.setCurrentCell(element);
      }
  }
};

Spw.SearchGrid.setFocusOnParentControl = function() {
    var objRetorno = parent.document.getElementById(document.getElementById("idObjRetorno").value);
    var inputs = objRetorno.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; ++i) {
        var input = inputs[i];
        if (!input.hasAttribute("readonly")) {
            input.focus();
            break;
        }
    }
};

//==END "STATIC" PROPERTIES==


//===============================
//==BEGIN PROTOTYPE PROPERTIES==
//===============================

// Override
Spw.SearchGrid.prototype.setCurrentCell = function(cell) {
    var previousCell = this.currentCell;
    if (previousCell) {
        Spw.Dom.removeClass(previousCell, "current");
        previousCell.removeAttribute("aria-selected");
    }
    // Atualizar informaï¿½ï¿½o de cï¿½lula corrente.
    this.currentCell = cell;
    cell.setAttribute("aria-selected", true);
    Spw.Dom.addClass(cell, "current");
    cell.focus();
};

// Override
Spw.SearchGrid.prototype.sortByCurrentColumn = function() {
    var columnHeaderId = this.currentCell.getAttribute("aria-labelledby");
    if (columnHeaderId) {
        var columnHeader = document.getElementById(columnHeaderId);
        var columnTitle = columnHeader.getElementsByTagName("b").item(0).firstChild.nodeValue;
        putGridColors = function() {};
        sortGridSearch(document, columnHeader, columnHeaderId);
        Spw.Aria.alert("Registros ordenados pela coluna " + columnTitle);
    }
};

//==END PROTOTYPE PROPERTIES==
// Assume a inclusï¿½o prï¿½via do recurso spwAcessSearchGrid.js

Spw.PagSearchGrid = function(tableId) {
    if (Spw.Grid.registry[tableId] !== undefined) {
        return Spw.Grid.registry[tableId];
    }
    Spw.Grid.registry[tableId] = this;

    this.table = document.getElementById(tableId);
    if (this.table == undefined) {
        throw new Error("ID da tabela da search grid invï¿½lido.");
    }

    // Search grids paginadas suportam apenas modo de navegaï¿½ï¿½o.
    this.mode = Spw.Grid.Modes.NAVIGATION;
    // Search grids paginadas possuem uma coluna de seleï¿½ï¿½o.
    this.firstNavigableColumnIndex = 1;

    var firstCell = this.cell(0, 1);
    if (firstCell) {
        this.currentCell = firstCell;
        firstCell.setAttribute("aria-selected", true);
        Spw.Dom.addClass(firstCell, "current");
    }

    var spwPagSearchGrid = this;
    Spw.Event.addHandler(this.table, "keydown", function(event) { 
        Spw.PagSearchGrid.onKeyDown.call(spwPagSearchGrid, event); 
    });
};

// "Inheritance"
var Dummy = function() {};
Dummy.prototype = Spw.SearchGrid.prototype;
Spw.PagSearchGrid.prototype = new Dummy;
Spw.PagSearchGrid.prototype.constructor = Spw.PagSearchGrid;


//=============================
//==BEGIN "STATIC" PROPERTIES==
//=============================

Spw.PagSearchGrid.alertGridHelp = function() {
    var text = 
    	"Para navegar pelas cï¿½lulas da grid, use as setas do teclado. "
      + "Para selecionar um registro, tecle enter. "
      + "Para ir para a prï¿½xima pï¿½gina, use control alti sinal de maior.";
      + "Para ir para a pï¿½gina anterior, use control alti sinal de menor.";
      + "Para ordenar os registros pela coluna atual, pressione control alt ï¿½. "
      + "Para fechar a janela de busca, pressione a tecla esc.";
    Spw.Aria.alert(text);
};

Spw.PagSearchGrid.onKeyDown = function(event) {
    var keyCode = event.keyCode;
    switch (keyCode) {
    case event.DOM_VK_PAGE_UP:
        Spw.Event.cancel(event);
        if (event.shiftKey) {
            Spw.PagSearchGrid.firstPage();
        } else {
            Spw.PagSearchGrid.previousPage();
        }
        break;
    case event.DOM_VK_PAGE_DOWN:
        Spw.Event.cancel(event);
        if (event.shiftKey) {
            Spw.PagSearchGrid.lastPage();
        } else {
            Spw.PagSearchGrid.nextPage();
        }
        break;
    case Spw.Keys.DOM_VK_O:
        if (event.ctrlKey && event.altKey) {
            Spw.Event.cancel(event);
            this.sortByCurrentColumn();
        }
        break;
    case Spw.Keys.DOM_VK_F1:
        Spw.Event.cancel(event);
        Spw.PagSearchGrid.alertGridHelp();
        break;
    default:
        Spw.SearchGrid.onKeyDown.call(this, event);
        break;
    }
};

Spw.PagSearchGrid.getButtonOfClass = function(className) {
    var buttons = document.getElementById("painelNavegacao").getElementsByTagName("input");
    for (var i = 0; i < buttons.length; ++i) {
        var button = buttons[i];
        if (button.type === "button" && button.className === className) {
            return button;
        }
    }
    return null;
};

Spw.PagSearchGrid.nextPage = function() {
    var nextPageButton = Spw.PagSearchGrid.getButtonOfClass("spwBotaoProximo");
    if (nextPageButton) {
        if (!nextPageButton.disabled) {
            nextPageButton.click();
        } else {
            Spw.Aria.alert("Nï¿½o hï¿½ pï¿½ginas posteriores.");
        }
    }
};

Spw.PagSearchGrid.previousPage = function() {
    var previousPageButton = Spw.PagSearchGrid.getButtonOfClass("spwBotaoAnterior");
    if (previousPageButton) {
        if (!previousPageButton.disabled) {
            previousPageButton.click();
        } else {
            Spw.Aria.alert("Nï¿½o hï¿½ pï¿½ginas anteriores.");
        }
    }
};

Spw.PagSearchGrid.firstPage = function() {
    var firstPageButton = Spw.PagSearchGrid.getButtonOfClass("spwBotaoPrimeiro");
    if (firstPageButton) {
        if (!firstPageButton.disabled) {
            firstPageButton.click();
        } else {
            Spw.Aria.alert("Jï¿½ estï¿½ na primeira pï¿½gina.");
        }
    }
};

Spw.PagSearchGrid.lastPage = function() {
    var lastPageButton = Spw.PagSearchGrid.getButtonOfClass("spwBotaoUltimo");
    if (lastPageButton) {
        if (!lastPageButton.disabled) {
            lastPageButton.click();
        } else {
            Spw.Aria.alert("Jï¿½ estï¿½ na ï¿½ltima pï¿½gina.");
        }
    }
};

//==END "STATIC" PROPERTIES==


//===============================
//==BEGIN PROTOTYPE PROPERTIES==
//===============================

Spw.PagSearchGrid.prototype.sortByCurrentColumn = function() {
    var headerElement = document.getElementById(this.currentCell.getAttribute("aria-labelledby"));
    if (headerElement) {
        var headerText = headerElement.firstChild ? headerElement.firstChild.nodeValue : null;
        if (headerText !== null) {
            Spw.Aria.alert("Ordenar registros pela coluna " + headerText);
        }
        headerElement.click();
    }
};

//==END PROTOTYPE PROPERTIES==
Spw.onInputSelectKeyDown = function(event) {
	
	var abreJanelaBusca = function(inputSelectId, tagId, property, contextPath, url, 
	        multipleSelection, title, height, width, bindings, event, idIframe, desabilitarSelecionados) { 
	    IS_request(inputSelectId, '/AjaxServlet.ajax', tagId, property, '', contextPath, url, multipleSelection,
	               title, height, width, bindings, 'true', event, 'InputSelectSearchGrid', idIframe,
	               desabilitarSelecionados);
	};
	
    var keyCode = event.keyCode;
    var element = event.currentTarget;
    switch (keyCode) {
    case Spw.Keys.DOM_VK_S:
        Spw.Event.cancel(event);
        abreJanelaBusca(element.getAttribute("input-select"),
                        element.getAttribute("id"),
                        element.getAttribute("name"),
                        element.getAttribute("ctxPath"),
                        element.getAttribute("url"),
                        element.getAttribute("multiplaSelecao"),
                        element.getAttribute("title"),
                        element.getAttribute("altura"),
                        element.getAttribute("largura"),
                        element.getAttribute("bindings"),
                        event,
                        element.getAttribute("idIframe"),
                        element.getAttribute("desabilitarSelecionados"));
        break;
    }
    
};
